{"version":3,"names":["cov_3sum0qv50","actualCoverage","BasicShapeGenerator","ShapeCollections","createGeometricShapes","options","f","shapes","s","createCircle","cx","cy","r","fill","stroke","strokeWidth","createRect","x","y","width","height","createRegularPolygon","name","description","boundingBox","createFlowchartElements","rx","ry","createPolygon","createArrows","createStars","createStar","createUIElements","createGrid","startX","startY","cellWidth","cellHeight","rows","cols","i","push","createLine","x1","y1","x2","y2","j","createCoordinateSystem","centerX","centerY","getAllCollections","getCollection","toLowerCase","b"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\core\\shapes\\ShapeCollections.ts"],"sourcesContent":["/**\r\n * SVG Shape Collections\r\n * \r\n * Pre-defined collections of shapes for common use cases like diagrams,\r\n * flowcharts, icons, and geometric patterns.\r\n */\r\n\r\nimport { BasicShapeGenerator, BaseShapeOptions } from './BasicShapeGenerator.js';\r\nimport { SvgAnyElement } from '../../types/svg.js';\r\n\r\nexport interface ShapeCollection {\r\n  name: string;\r\n  description: string;\r\n  shapes: SvgAnyElement[];\r\n  boundingBox: {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n  };\r\n}\r\n\r\n/**\r\n * Shape Collections - Pre-defined shape sets\r\n */\r\nexport class ShapeCollections {\r\n\r\n  /**\r\n   * Create basic geometric shapes collection\r\n   */\r\n  static createGeometricShapes(options?: Partial<BaseShapeOptions>): ShapeCollection {\r\n    const shapes: SvgAnyElement[] = [\r\n      // Circle\r\n      BasicShapeGenerator.createCircle({\r\n        cx: 50,\r\n        cy: 50,\r\n        r: 30,\r\n        fill: 'none',\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Rectangle\r\n      BasicShapeGenerator.createRect({\r\n        x: 120,\r\n        y: 20,\r\n        width: 60,\r\n        height: 60,\r\n        fill: 'none',\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Triangle\r\n      BasicShapeGenerator.createRegularPolygon(250, 50, 30, 3, {\r\n        fill: 'none',\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Pentagon\r\n      BasicShapeGenerator.createRegularPolygon(350, 50, 30, 5, {\r\n        fill: 'none',\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Hexagon\r\n      BasicShapeGenerator.createRegularPolygon(450, 50, 30, 6, {\r\n        fill: 'none',\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      })\r\n    ];\r\n\r\n    return {\r\n      name: 'Geometric Shapes',\r\n      description: 'Basic geometric shapes including circle, rectangle, and regular polygons',\r\n      shapes,\r\n      boundingBox: { x: 20, y: 20, width: 460, height: 60 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create flowchart elements collection\r\n   */\r\n  static createFlowchartElements(options?: Partial<BaseShapeOptions>): ShapeCollection {\r\n    const shapes: SvgAnyElement[] = [\r\n      // Start/End (Rounded Rectangle)\r\n      BasicShapeGenerator.createRect({\r\n        x: 20,\r\n        y: 20,\r\n        width: 100,\r\n        height: 40,\r\n        rx: 20,\r\n        ry: 20,\r\n        fill: 'lightblue',\r\n        stroke: 'navy',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Process (Rectangle)\r\n      BasicShapeGenerator.createRect({\r\n        x: 150,\r\n        y: 20,\r\n        width: 100,\r\n        height: 40,\r\n        fill: 'lightgreen',\r\n        stroke: 'darkgreen',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Decision (Diamond)\r\n      BasicShapeGenerator.createRegularPolygon(340, 40, 30, 4, {\r\n        fill: 'lightyellow',\r\n        stroke: 'orange',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Document (Rectangle with wave bottom)\r\n      BasicShapeGenerator.createRect({\r\n        x: 400,\r\n        y: 20,\r\n        width: 80,\r\n        height: 40,\r\n        fill: 'lightcoral',\r\n        stroke: 'darkred',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Arrow (pointing right)\r\n      BasicShapeGenerator.createPolygon([\r\n        { x: 520, y: 20 },\r\n        { x: 580, y: 20 },\r\n        { x: 600, y: 40 },\r\n        { x: 580, y: 60 },\r\n        { x: 520, y: 60 },\r\n        { x: 540, y: 40 }\r\n      ], {\r\n        fill: 'lightgray',\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      })\r\n    ];\r\n\r\n    return {\r\n      name: 'Flowchart Elements',\r\n      description: 'Common flowchart symbols including start/end, process, decision, and connector shapes',\r\n      shapes,\r\n      boundingBox: { x: 20, y: 20, width: 580, height: 40 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create arrow collection\r\n   */\r\n  static createArrows(options?: Partial<BaseShapeOptions>): ShapeCollection {\r\n    const shapes: SvgAnyElement[] = [\r\n      // Right arrow\r\n      BasicShapeGenerator.createPolygon([\r\n        { x: 20, y: 30 },\r\n        { x: 60, y: 30 },\r\n        { x: 60, y: 20 },\r\n        { x: 80, y: 40 },\r\n        { x: 60, y: 60 },\r\n        { x: 60, y: 50 },\r\n        { x: 20, y: 50 }\r\n      ], {\r\n        fill: 'black',\r\n        ...options\r\n      }),\r\n      \r\n      // Left arrow\r\n      BasicShapeGenerator.createPolygon([\r\n        { x: 120, y: 30 },\r\n        { x: 160, y: 30 },\r\n        { x: 160, y: 20 },\r\n        { x: 180, y: 40 },\r\n        { x: 160, y: 60 },\r\n        { x: 160, y: 50 },\r\n        { x: 120, y: 50 },\r\n        { x: 100, y: 40 }\r\n      ], {\r\n        fill: 'black',\r\n        ...options\r\n      }),\r\n      \r\n      // Up arrow\r\n      BasicShapeGenerator.createPolygon([\r\n        { x: 230, y: 60 },\r\n        { x: 230, y: 30 },\r\n        { x: 220, y: 30 },\r\n        { x: 240, y: 10 },\r\n        { x: 260, y: 30 },\r\n        { x: 250, y: 30 },\r\n        { x: 250, y: 60 }\r\n      ], {\r\n        fill: 'black',\r\n        ...options\r\n      }),\r\n      \r\n      // Down arrow\r\n      BasicShapeGenerator.createPolygon([\r\n        { x: 300, y: 20 },\r\n        { x: 300, y: 50 },\r\n        { x: 290, y: 50 },\r\n        { x: 310, y: 70 },\r\n        { x: 330, y: 50 },\r\n        { x: 320, y: 50 },\r\n        { x: 320, y: 20 }\r\n      ], {\r\n        fill: 'black',\r\n        ...options\r\n      })\r\n    ];\r\n\r\n    return {\r\n      name: 'Arrows',\r\n      description: 'Directional arrows pointing up, down, left, and right',\r\n      shapes,\r\n      boundingBox: { x: 20, y: 10, width: 310, height: 60 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create star collection\r\n   */\r\n  static createStars(options?: Partial<BaseShapeOptions>): ShapeCollection {\r\n    const shapes: SvgAnyElement[] = [\r\n      // 5-point star\r\n      BasicShapeGenerator.createStar(50, 50, 30, 15, 5, {\r\n        fill: 'gold',\r\n        stroke: 'orange',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // 6-point star\r\n      BasicShapeGenerator.createStar(150, 50, 30, 15, 6, {\r\n        fill: 'silver',\r\n        stroke: 'gray',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // 8-point star\r\n      BasicShapeGenerator.createStar(250, 50, 30, 15, 8, {\r\n        fill: 'lightblue',\r\n        stroke: 'blue',\r\n        strokeWidth: 2,\r\n        ...options\r\n      })\r\n    ];\r\n\r\n    return {\r\n      name: 'Stars',\r\n      description: 'Star shapes with different numbers of points',\r\n      shapes,\r\n      boundingBox: { x: 20, y: 20, width: 260, height: 60 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create basic UI elements collection\r\n   */\r\n  static createUIElements(options?: Partial<BaseShapeOptions>): ShapeCollection {\r\n    const shapes: SvgAnyElement[] = [\r\n      // Button\r\n      BasicShapeGenerator.createRect({\r\n        x: 20,\r\n        y: 20,\r\n        width: 80,\r\n        height: 30,\r\n        rx: 5,\r\n        ry: 5,\r\n        fill: 'lightblue',\r\n        stroke: 'blue',\r\n        strokeWidth: 1,\r\n        ...options\r\n      }),\r\n      \r\n      // Text field\r\n      BasicShapeGenerator.createRect({\r\n        x: 120,\r\n        y: 20,\r\n        width: 120,\r\n        height: 30,\r\n        fill: 'white',\r\n        stroke: 'gray',\r\n        strokeWidth: 1,\r\n        ...options\r\n      }),\r\n      \r\n      // Checkbox (unchecked)\r\n      BasicShapeGenerator.createRect({\r\n        x: 260,\r\n        y: 25,\r\n        width: 20,\r\n        height: 20,\r\n        fill: 'white',\r\n        stroke: 'black',\r\n        strokeWidth: 1,\r\n        ...options\r\n      }),\r\n      \r\n      // Radio button (unchecked)\r\n      BasicShapeGenerator.createCircle({\r\n        cx: 310,\r\n        cy: 35,\r\n        r: 10,\r\n        fill: 'white',\r\n        stroke: 'black',\r\n        strokeWidth: 1,\r\n        ...options\r\n      }),\r\n      \r\n      // Progress bar background\r\n      BasicShapeGenerator.createRect({\r\n        x: 340,\r\n        y: 30,\r\n        width: 100,\r\n        height: 10,\r\n        rx: 5,\r\n        ry: 5,\r\n        fill: 'lightgray',\r\n        stroke: 'gray',\r\n        strokeWidth: 1,\r\n        ...options\r\n      }),\r\n      \r\n      // Progress bar fill\r\n      BasicShapeGenerator.createRect({\r\n        x: 342,\r\n        y: 32,\r\n        width: 60,\r\n        height: 6,\r\n        rx: 3,\r\n        ry: 3,\r\n        fill: 'blue',\r\n        ...options\r\n      })\r\n    ];\r\n\r\n    return {\r\n      name: 'UI Elements',\r\n      description: 'Basic user interface elements like buttons, text fields, and form controls',\r\n      shapes,\r\n      boundingBox: { x: 20, y: 20, width: 420, height: 30 }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create grid pattern\r\n   */\r\n  static createGrid(\r\n    startX: number,\r\n    startY: number,\r\n    cellWidth: number,\r\n    cellHeight: number,\r\n    rows: number,\r\n    cols: number,\r\n    options?: Partial<BaseShapeOptions>\r\n  ): ShapeCollection {\r\n    const shapes: SvgAnyElement[] = [];\r\n    \r\n    // Create horizontal lines\r\n    for (let i = 0; i <= rows; i++) {\r\n      const y = startY + i * cellHeight;\r\n      shapes.push(BasicShapeGenerator.createLine({\r\n        x1: startX,\r\n        y1: y,\r\n        x2: startX + cols * cellWidth,\r\n        y2: y,\r\n        stroke: 'lightgray',\r\n        strokeWidth: 1,\r\n        ...options\r\n      }));\r\n    }\r\n    \r\n    // Create vertical lines\r\n    for (let j = 0; j <= cols; j++) {\r\n      const x = startX + j * cellWidth;\r\n      shapes.push(BasicShapeGenerator.createLine({\r\n        x1: x,\r\n        y1: startY,\r\n        x2: x,\r\n        y2: startY + rows * cellHeight,\r\n        stroke: 'lightgray',\r\n        strokeWidth: 1,\r\n        ...options\r\n      }));\r\n    }\r\n\r\n    return {\r\n      name: 'Grid',\r\n      description: `${rows}x${cols} grid pattern`,\r\n      shapes,\r\n      boundingBox: {\r\n        x: startX,\r\n        y: startY,\r\n        width: cols * cellWidth,\r\n        height: rows * cellHeight\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create coordinate system (axes)\r\n   */\r\n  static createCoordinateSystem(\r\n    centerX: number,\r\n    centerY: number,\r\n    width: number,\r\n    height: number,\r\n    options?: Partial<BaseShapeOptions>\r\n  ): ShapeCollection {\r\n    const shapes: SvgAnyElement[] = [\r\n      // X-axis\r\n      BasicShapeGenerator.createLine({\r\n        x1: centerX - width / 2,\r\n        y1: centerY,\r\n        x2: centerX + width / 2,\r\n        y2: centerY,\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // Y-axis\r\n      BasicShapeGenerator.createLine({\r\n        x1: centerX,\r\n        y1: centerY - height / 2,\r\n        x2: centerX,\r\n        y2: centerY + height / 2,\r\n        stroke: 'black',\r\n        strokeWidth: 2,\r\n        ...options\r\n      }),\r\n      \r\n      // X-axis arrow\r\n      BasicShapeGenerator.createPolygon([\r\n        { x: centerX + width / 2, y: centerY },\r\n        { x: centerX + width / 2 - 10, y: centerY - 5 },\r\n        { x: centerX + width / 2 - 10, y: centerY + 5 }\r\n      ], {\r\n        fill: 'black',\r\n        ...options\r\n      }),\r\n      \r\n      // Y-axis arrow\r\n      BasicShapeGenerator.createPolygon([\r\n        { x: centerX, y: centerY - height / 2 },\r\n        { x: centerX - 5, y: centerY - height / 2 + 10 },\r\n        { x: centerX + 5, y: centerY - height / 2 + 10 }\r\n      ], {\r\n        fill: 'black',\r\n        ...options\r\n      })\r\n    ];\r\n\r\n    return {\r\n      name: 'Coordinate System',\r\n      description: 'X-Y coordinate system with axes and arrows',\r\n      shapes,\r\n      boundingBox: {\r\n        x: centerX - width / 2,\r\n        y: centerY - height / 2,\r\n        width,\r\n        height\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get all available collections\r\n   */\r\n  static getAllCollections(): string[] {\r\n    return [\r\n      'geometricShapes',\r\n      'flowchartElements',\r\n      'arrows',\r\n      'stars',\r\n      'uiElements'\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get collection by name\r\n   */\r\n  static getCollection(name: string, options?: Partial<BaseShapeOptions>): ShapeCollection | null {\r\n    switch (name.toLowerCase()) {\r\n      case 'geometric':\r\n      case 'geometricshapes':\r\n        return this.createGeometricShapes(options);\r\n      case 'flowchart':\r\n      case 'flowchartelements':\r\n        return this.createFlowchartElements(options);\r\n      case 'arrows':\r\n        return this.createArrows(options);\r\n      case 'stars':\r\n        return this.createStars(options);\r\n      case 'ui':\r\n      case 'uielements':\r\n        return this.createUIElements(options);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]}