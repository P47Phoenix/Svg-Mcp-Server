{"version":3,"names":["cov_1pw1kxbm4v","actualCoverage","BaseElementValidator","errors","s","warnings","suggestions","addError","code","message","element","property","value","f","error","severity","undefined","b","push","addWarning","warning","addSuggestion","suggestion","sug","reset","validateCommonProperties","id","trim","className","isValidClassName","transform","isValidTransform","style","validateStyleProperties","test","transformFunctions","opacity","fillOpacity","strokeOpacity","strokeWidth","fill","isValidColor","stroke","color","colorPatterns","includes","namedColors","toLowerCase","some","pattern","CircleValidator","validate","_context","type","getResult","circle","validateRadius","validateCenter","checkVisibility","checkPerformance","r","Number","isFinite","cx","cy","Math","abs","strokeDasharray","valid","length","RectValidator","rect","validateDimensions","validatePosition","validateCornerRadius","width","height","x","y","rx","ry","LineValidator","line","validateCoordinates","checkLineLength","coords","x1","y1","x2","y2","index","coord","entries","coordName","sqrt","pow","PathValidator","path","validatePathData","checkComplexity","d","pathCommands","hasValidPathStructure","pathData","trimmed","commandCount","match","TextValidator","text","validateContent","validateTextStyle","checkAccessibility","content","fontSize","GroupValidator","context","group","validateChildren","checkNesting","children","parentElement","nestingDepth","ElementValidatorFactory","validators","Map","getValidator","elementType","get","validateElement","validator","getSupportedElementTypes","Array","from","keys"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\core\\validation\\ElementValidators.ts"],"sourcesContent":["/**\r\n * SVG Element Validators\r\n * \r\n * Comprehensive validation modules for individual SVG elements with detailed\r\n * error reporting, compliance checking, and semantic validation.\r\n */\r\n\r\nimport { \r\n  SvgAnyElement, \r\n  CircleElement, \r\n  RectElement, \r\n  LineElement, \r\n  PathElement, \r\n  TextElement, \r\n  GroupElement \r\n} from '../../types/svg.js';// Validation result interface\r\nexport interface ValidationResult {\r\n  valid: boolean;\r\n  errors: ValidationError[];\r\n  warnings: ValidationWarning[];\r\n  suggestions: ValidationSuggestion[];\r\n}\r\n\r\n// Detailed error information\r\nexport interface ValidationError {\r\n  code: string;\r\n  message: string;\r\n  element?: SvgAnyElement;\r\n  property?: string;\r\n  value?: unknown;\r\n  severity: 'error';\r\n  line?: number;\r\n  column?: number;\r\n}\r\n\r\nexport interface ValidationWarning {\r\n  code: string;\r\n  message: string;\r\n  element?: SvgAnyElement;\r\n  property?: string;\r\n  value?: unknown;\r\n  severity: 'warning';\r\n  line?: number;\r\n  column?: number;\r\n}\r\n\r\nexport interface ValidationSuggestion {\r\n  code: string;\r\n  message: string;\r\n  element?: SvgAnyElement;\r\n  property?: string;\r\n  value?: unknown;\r\n  severity: 'info';\r\n  line?: number;\r\n  column?: number;\r\n  suggestion: string;\r\n  suggestedValue?: any;\r\n}\r\n\r\n// Validation context for cross-element checks\r\nexport interface ValidationContext {\r\n  elementIndex?: number;\r\n  parentElement?: SvgAnyElement;\r\n  siblingElements?: SvgAnyElement[];\r\n  documentIds?: Set<string>;\r\n  referencedIds?: Set<string>;\r\n}\r\n\r\n/**\r\n * Base Element Validator\r\n */\r\nexport abstract class BaseElementValidator {\r\n  protected errors: ValidationError[] = [];\r\n  protected warnings: ValidationWarning[] = [];\r\n  protected suggestions: ValidationSuggestion[] = [];\r\n\r\n  abstract validate(element: SvgAnyElement, context?: ValidationContext): ValidationResult;\r\n\r\n  protected addError(code: string, message: string, element?: SvgAnyElement, property?: string, value?: unknown): void {\r\n    const error: any = {\r\n      code,\r\n      message,\r\n      severity: 'error'\r\n    };\r\n    \r\n    if (element !== undefined) error.element = element;\r\n    if (property !== undefined) error.property = property;\r\n    if (value !== undefined) error.value = value;\r\n    \r\n    this.errors.push(error);\r\n  }\r\n\r\n  protected addWarning(code: string, message: string, element?: SvgAnyElement, property?: string, value?: unknown): void {\r\n    const warning: any = {\r\n      code,\r\n      message,\r\n      severity: 'warning'\r\n    };\r\n    \r\n    if (element !== undefined) warning.element = element;\r\n    if (property !== undefined) warning.property = property;\r\n    if (value !== undefined) warning.value = value;\r\n    \r\n    this.warnings.push(warning);\r\n  }\r\n\r\n  protected addSuggestion(code: string, message: string, suggestion: string, element?: SvgAnyElement, property?: string): void {\r\n    const sug: any = {\r\n      code,\r\n      message,\r\n      suggestion,\r\n      severity: 'info'\r\n    };\r\n    \r\n    if (element !== undefined) sug.element = element;\r\n    if (property !== undefined) sug.property = property;\r\n    \r\n    this.suggestions.push(sug);\r\n  }\r\n\r\n  protected reset(): void {\r\n    this.errors = [];\r\n    this.warnings = [];\r\n    this.suggestions = [];\r\n  }\r\n\r\n  protected validateCommonProperties(element: SvgAnyElement): void {\r\n    // Validate ID uniqueness (checked in context)\r\n    if (element.id && element.id.trim() === '') {\r\n      this.addError('INVALID_ID', 'Element ID cannot be empty', element, 'id', element.id);\r\n    }\r\n\r\n    // Validate class name format\r\n    if (element.className && !this.isValidClassName(element.className)) {\r\n      this.addWarning('INVALID_CLASS_NAME', 'Class name contains invalid characters', element, 'className', element.className);\r\n    }\r\n\r\n    // Validate transform syntax\r\n    if (element.transform && !this.isValidTransform(element.transform)) {\r\n      this.addError('INVALID_TRANSFORM', 'Transform contains invalid syntax', element, 'transform', element.transform);\r\n    }\r\n\r\n    // Validate style properties\r\n    if (element.style) {\r\n      this.validateStyleProperties(element);\r\n    }\r\n  }\r\n\r\n  private isValidClassName(className: string): boolean {\r\n    // CSS class name validation (simplified)\r\n    return /^[a-zA-Z][\\w\\-]*$/.test(className);\r\n  }\r\n\r\n  private isValidTransform(transform: string): boolean {\r\n    // Basic transform validation (simplified)\r\n    const transformFunctions = /^(matrix|translate|scale|rotate|skewX|skewY)\\s*\\([^)]*\\)(\\s+(matrix|translate|scale|rotate|skewX|skewY)\\s*\\([^)]*\\))*\\s*$/;\r\n    return transformFunctions.test(transform.trim());\r\n  }\r\n\r\n  private validateStyleProperties(element: SvgAnyElement): void {\r\n    const style = element.style!;\r\n\r\n    // Validate opacity values\r\n    if (style.opacity !== undefined && (style.opacity < 0 || style.opacity > 1)) {\r\n      this.addError('INVALID_OPACITY', 'Opacity must be between 0 and 1', element, 'style.opacity', style.opacity);\r\n    }\r\n\r\n    if (style.fillOpacity !== undefined && (style.fillOpacity < 0 || style.fillOpacity > 1)) {\r\n      this.addError('INVALID_FILL_OPACITY', 'Fill opacity must be between 0 and 1', element, 'style.fillOpacity', style.fillOpacity);\r\n    }\r\n\r\n    if (style.strokeOpacity !== undefined && (style.strokeOpacity < 0 || style.strokeOpacity > 1)) {\r\n      this.addError('INVALID_STROKE_OPACITY', 'Stroke opacity must be between 0 and 1', element, 'style.strokeOpacity', style.strokeOpacity);\r\n    }\r\n\r\n    // Validate stroke width\r\n    if (style.strokeWidth !== undefined && style.strokeWidth < 0) {\r\n      this.addError('INVALID_STROKE_WIDTH', 'Stroke width cannot be negative', element, 'style.strokeWidth', style.strokeWidth);\r\n    }\r\n\r\n    // Validate color formats\r\n    if (style.fill && !this.isValidColor(style.fill)) {\r\n      this.addWarning('INVALID_COLOR_FORMAT', 'Fill color format may not be valid', element, 'style.fill', style.fill);\r\n    }\r\n\r\n    if (style.stroke && !this.isValidColor(style.stroke)) {\r\n      this.addWarning('INVALID_COLOR_FORMAT', 'Stroke color format may not be valid', element, 'style.stroke', style.stroke);\r\n    }\r\n  }\r\n\r\n  private isValidColor(color: string): boolean {\r\n    // Basic color validation (hex, rgb, rgba, hsl, hsla, named colors)\r\n    const colorPatterns = [\r\n      /^#([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6}|[0-9A-Fa-f]{8})$/, // hex\r\n      /^rgb\\s*\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*\\)$/, // rgb\r\n      /^rgba\\s*\\(\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*\\d+\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$/, // rgba\r\n      /^hsl\\s*\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*\\)$/, // hsl\r\n      /^hsla\\s*\\(\\s*\\d+\\s*,\\s*\\d+%\\s*,\\s*\\d+%\\s*,\\s*(0|1|0?\\.\\d+)\\s*\\)$/, // hsla\r\n    ];\r\n\r\n    // Check if it's 'none', 'transparent', or a named color\r\n    if (['none', 'transparent', 'currentColor'].includes(color)) {\r\n      return true;\r\n    }\r\n\r\n    // Check named colors (basic set)\r\n    const namedColors = ['red', 'green', 'blue', 'black', 'white', 'yellow', 'orange', 'purple', 'pink', 'brown', 'gray', 'grey'];\r\n    if (namedColors.includes(color.toLowerCase())) {\r\n      return true;\r\n    }\r\n\r\n    return colorPatterns.some(pattern => pattern.test(color));\r\n  }\r\n}\r\n\r\n/**\r\n * Circle Element Validator\r\n */\r\nexport class CircleValidator extends BaseElementValidator {\r\n  validate(element: SvgAnyElement, _context?: ValidationContext): ValidationResult {\r\n    this.reset();\r\n\r\n    if (element.type !== 'circle') {\r\n      this.addError('WRONG_ELEMENT_TYPE', `Expected circle element, got ${element.type}`, element);\r\n      return this.getResult();\r\n    }\r\n\r\n    const circle = element as CircleElement;\r\n\r\n    // Validate common properties\r\n    this.validateCommonProperties(circle);\r\n\r\n    // Validate circle-specific properties\r\n    this.validateRadius(circle);\r\n    this.validateCenter(circle);\r\n    this.checkVisibility(circle);\r\n    this.checkPerformance(circle);\r\n\r\n    return this.getResult();\r\n  }\r\n\r\n  private validateRadius(circle: CircleElement): void {\r\n    if (circle.r < 0) {\r\n      this.addError('NEGATIVE_RADIUS', 'Circle radius cannot be negative', circle, 'r', circle.r);\r\n    } else if (circle.r === 0) {\r\n      this.addWarning('ZERO_RADIUS', 'Circle with zero radius will not be visible', circle, 'r', circle.r);\r\n    } else if (circle.r > 10000) {\r\n      this.addWarning('LARGE_RADIUS', 'Very large radius may impact performance', circle, 'r', circle.r);\r\n    }\r\n  }\r\n\r\n  private validateCenter(circle: CircleElement): void {\r\n    if (!Number.isFinite(circle.cx) || !Number.isFinite(circle.cy)) {\r\n      this.addError('INVALID_CENTER', 'Circle center coordinates must be finite numbers', circle, 'cx,cy', { cx: circle.cx, cy: circle.cy });\r\n    }\r\n\r\n    if (Math.abs(circle.cx) > 1000000 || Math.abs(circle.cy) > 1000000) {\r\n      this.addWarning('EXTREME_COORDINATES', 'Circle center coordinates are very large', circle, 'cx,cy', { cx: circle.cx, cy: circle.cy });\r\n    }\r\n  }\r\n\r\n  private checkVisibility(circle: CircleElement): void {\r\n    const style = circle.style;\r\n    if (style?.fill === 'none' && (!style?.stroke || style.stroke === 'none')) {\r\n      this.addWarning('INVISIBLE_ELEMENT', 'Circle has no fill or stroke and will not be visible', circle);\r\n    }\r\n  }\r\n\r\n  private checkPerformance(circle: CircleElement): void {\r\n    // Large circles with complex styling may impact performance\r\n    if (circle.r > 1000 && circle.style?.strokeDasharray) {\r\n      this.addSuggestion('PERFORMANCE_OPTIMIZATION', 'Large circle with stroke dash array may impact performance', 'Consider simplifying the stroke pattern or reducing the radius', circle);\r\n    }\r\n  }\r\n\r\n  private getResult(): ValidationResult {\r\n    return {\r\n      valid: this.errors.length === 0,\r\n      errors: this.errors,\r\n      warnings: this.warnings,\r\n      suggestions: this.suggestions\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Rectangle Element Validator\r\n */\r\nexport class RectValidator extends BaseElementValidator {\r\n  validate(element: SvgAnyElement, _context?: ValidationContext): ValidationResult {\r\n    this.reset();\r\n\r\n    if (element.type !== 'rect') {\r\n      this.addError('WRONG_ELEMENT_TYPE', `Expected rect element, got ${element.type}`, element);\r\n      return this.getResult();\r\n    }\r\n\r\n    const rect = element as RectElement;\r\n\r\n    // Validate common properties\r\n    this.validateCommonProperties(rect);\r\n\r\n    // Validate rectangle-specific properties\r\n    this.validateDimensions(rect);\r\n    this.validatePosition(rect);\r\n    this.validateCornerRadius(rect);\r\n    this.checkVisibility(rect);\r\n\r\n    return this.getResult();\r\n  }\r\n\r\n  private validateDimensions(rect: RectElement): void {\r\n    if (rect.width < 0) {\r\n      this.addError('NEGATIVE_WIDTH', 'Rectangle width cannot be negative', rect, 'width', rect.width);\r\n    } else if (rect.width === 0) {\r\n      this.addWarning('ZERO_WIDTH', 'Rectangle with zero width will not be visible', rect, 'width', rect.width);\r\n    }\r\n\r\n    if (rect.height < 0) {\r\n      this.addError('NEGATIVE_HEIGHT', 'Rectangle height cannot be negative', rect, 'height', rect.height);\r\n    } else if (rect.height === 0) {\r\n      this.addWarning('ZERO_HEIGHT', 'Rectangle with zero height will not be visible', rect, 'height', rect.height);\r\n    }\r\n\r\n    if (rect.width > 10000 || rect.height > 10000) {\r\n      this.addWarning('LARGE_DIMENSIONS', 'Very large rectangle dimensions may impact performance', rect, 'width,height', { width: rect.width, height: rect.height });\r\n    }\r\n  }\r\n\r\n  private validatePosition(rect: RectElement): void {\r\n    if (!Number.isFinite(rect.x) || !Number.isFinite(rect.y)) {\r\n      this.addError('INVALID_POSITION', 'Rectangle position coordinates must be finite numbers', rect, 'x,y', { x: rect.x, y: rect.y });\r\n    }\r\n  }\r\n\r\n  private validateCornerRadius(rect: RectElement): void {\r\n    if (rect.rx !== undefined) {\r\n      if (rect.rx < 0) {\r\n        this.addError('NEGATIVE_CORNER_RADIUS', 'Corner radius rx cannot be negative', rect, 'rx', rect.rx);\r\n      } else if (rect.rx > rect.width / 2) {\r\n        this.addWarning('EXCESSIVE_CORNER_RADIUS', 'Corner radius rx is larger than half the width', rect, 'rx', rect.rx);\r\n      }\r\n    }\r\n\r\n    if (rect.ry !== undefined) {\r\n      if (rect.ry < 0) {\r\n        this.addError('NEGATIVE_CORNER_RADIUS', 'Corner radius ry cannot be negative', rect, 'ry', rect.ry);\r\n      } else if (rect.ry > rect.height / 2) {\r\n        this.addWarning('EXCESSIVE_CORNER_RADIUS', 'Corner radius ry is larger than half the height', rect, 'ry', rect.ry);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkVisibility(rect: RectElement): void {\r\n    const style = rect.style;\r\n    if (style?.fill === 'none' && (!style?.stroke || style.stroke === 'none')) {\r\n      this.addWarning('INVISIBLE_ELEMENT', 'Rectangle has no fill or stroke and will not be visible', rect);\r\n    }\r\n  }\r\n\r\n  private getResult(): ValidationResult {\r\n    return {\r\n      valid: this.errors.length === 0,\r\n      errors: this.errors,\r\n      warnings: this.warnings,\r\n      suggestions: this.suggestions\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Line Element Validator\r\n */\r\nexport class LineValidator extends BaseElementValidator {\r\n  validate(element: SvgAnyElement, _context?: ValidationContext): ValidationResult {\r\n    this.reset();\r\n\r\n    if (element.type !== 'line') {\r\n      this.addError('WRONG_ELEMENT_TYPE', `Expected line element, got ${element.type}`, element);\r\n      return this.getResult();\r\n    }\r\n\r\n    const line = element as LineElement;\r\n\r\n    // Validate common properties\r\n    this.validateCommonProperties(line);\r\n\r\n    // Validate line-specific properties\r\n    this.validateCoordinates(line);\r\n    this.checkLineLength(line);\r\n    this.checkVisibility(line);\r\n\r\n    return this.getResult();\r\n  }\r\n\r\n  private validateCoordinates(line: LineElement): void {\r\n    const coords = [line.x1, line.y1, line.x2, line.y2];\r\n    \r\n    for (const [index, coord] of coords.entries()) {\r\n      if (!Number.isFinite(coord)) {\r\n        const coordName = ['x1', 'y1', 'x2', 'y2'][index];\r\n        this.addError('INVALID_COORDINATE', `Line coordinate ${coordName} must be a finite number`, line, coordName, coord);\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkLineLength(line: LineElement): void {\r\n    const length = Math.sqrt(Math.pow(line.x2 - line.x1, 2) + Math.pow(line.y2 - line.y1, 2));\r\n    \r\n    if (length === 0) {\r\n      this.addWarning('ZERO_LENGTH_LINE', 'Line has zero length and will not be visible', line);\r\n    } else if (length > 10000) {\r\n      this.addWarning('VERY_LONG_LINE', 'Very long line may impact performance', line);\r\n    }\r\n  }\r\n\r\n  private checkVisibility(line: LineElement): void {\r\n    const style = line.style;\r\n    if (!style?.stroke || style.stroke === 'none') {\r\n      this.addWarning('INVISIBLE_LINE', 'Line has no stroke and will not be visible', line);\r\n    }\r\n  }\r\n\r\n  private getResult(): ValidationResult {\r\n    return {\r\n      valid: this.errors.length === 0,\r\n      errors: this.errors,\r\n      warnings: this.warnings,\r\n      suggestions: this.suggestions\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Path Element Validator\r\n */\r\nexport class PathValidator extends BaseElementValidator {\r\n  validate(element: SvgAnyElement, _context?: ValidationContext): ValidationResult {\r\n    this.reset();\r\n\r\n    if (element.type !== 'path') {\r\n      this.addError('WRONG_ELEMENT_TYPE', `Expected path element, got ${element.type}`, element);\r\n      return this.getResult();\r\n    }\r\n\r\n    const path = element as PathElement;\r\n\r\n    // Validate common properties\r\n    this.validateCommonProperties(path);\r\n\r\n    // Validate path-specific properties\r\n    this.validatePathData(path);\r\n    this.checkComplexity(path);\r\n    this.checkVisibility(path);\r\n\r\n    return this.getResult();\r\n  }\r\n\r\n  private validatePathData(path: PathElement): void {\r\n    if (!path.d || path.d.trim() === '') {\r\n      this.addError('EMPTY_PATH_DATA', 'Path data (d attribute) cannot be empty', path, 'd', path.d);\r\n      return;\r\n    }\r\n\r\n    // Basic path data validation\r\n    const pathCommands = /^[MmLlHhVvCcSsQqTtAaZz\\d\\s,.-]+$/;\r\n    if (!pathCommands.test(path.d)) {\r\n      this.addError('INVALID_PATH_DATA', 'Path data contains invalid characters', path, 'd', path.d);\r\n    }\r\n\r\n    // Check for proper path structure\r\n    if (!this.hasValidPathStructure(path.d)) {\r\n      this.addWarning('QUESTIONABLE_PATH_STRUCTURE', 'Path data structure may be malformed', path, 'd', path.d);\r\n    }\r\n  }\r\n\r\n  private hasValidPathStructure(pathData: string): boolean {\r\n    // Basic check: should start with M or m (move command)\r\n    const trimmed = pathData.trim();\r\n    return /^[Mm]/.test(trimmed);\r\n  }\r\n\r\n  private checkComplexity(path: PathElement): void {\r\n    if (path.d.length > 10000) {\r\n      this.addWarning('COMPLEX_PATH', 'Very long path data may impact performance', path, 'd');\r\n      this.addSuggestion('OPTIMIZE_PATH', 'Path is very complex', 'Consider simplifying the path or breaking it into smaller segments', path, 'd');\r\n    }\r\n\r\n    // Count path commands for complexity estimation\r\n    const commandCount = (path.d.match(/[MmLlHhVvCcSsQqTtAaZz]/g) || []).length;\r\n    if (commandCount > 1000) {\r\n      this.addWarning('HIGH_COMMAND_COUNT', 'Path has many commands and may impact performance', path, 'd');\r\n    }\r\n  }\r\n\r\n  private checkVisibility(path: PathElement): void {\r\n    const style = path.style;\r\n    if (style?.fill === 'none' && (!style?.stroke || style.stroke === 'none')) {\r\n      this.addWarning('INVISIBLE_ELEMENT', 'Path has no fill or stroke and will not be visible', path);\r\n    }\r\n  }\r\n\r\n  private getResult(): ValidationResult {\r\n    return {\r\n      valid: this.errors.length === 0,\r\n      errors: this.errors,\r\n      warnings: this.warnings,\r\n      suggestions: this.suggestions\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Text Element Validator\r\n */\r\nexport class TextValidator extends BaseElementValidator {\r\n  validate(element: SvgAnyElement, _context?: ValidationContext): ValidationResult {\r\n    this.reset();\r\n\r\n    if (element.type !== 'text') {\r\n      this.addError('WRONG_ELEMENT_TYPE', `Expected text element, got ${element.type}`, element);\r\n      return this.getResult();\r\n    }\r\n\r\n    const text = element as TextElement;\r\n\r\n    // Validate common properties\r\n    this.validateCommonProperties(text);\r\n\r\n    // Validate text-specific properties\r\n    this.validateContent(text);\r\n    this.validatePosition(text);\r\n    this.validateTextStyle(text);\r\n    this.checkAccessibility(text);\r\n\r\n    return this.getResult();\r\n  }\r\n\r\n  private validateContent(text: TextElement): void {\r\n    if (!text.content || text.content.trim() === '') {\r\n      this.addWarning('EMPTY_TEXT_CONTENT', 'Text element has no content', text, 'content', text.content);\r\n    }\r\n\r\n    if (text.content && text.content.length > 10000) {\r\n      this.addWarning('VERY_LONG_TEXT', 'Very long text content may impact performance', text, 'content');\r\n    }\r\n  }\r\n\r\n  private validatePosition(text: TextElement): void {\r\n    if (!Number.isFinite(text.x) || !Number.isFinite(text.y)) {\r\n      this.addError('INVALID_POSITION', 'Text position coordinates must be finite numbers', text, 'x,y', { x: text.x, y: text.y });\r\n    }\r\n  }\r\n\r\n  private validateTextStyle(text: TextElement): void {\r\n    const style = text.style;\r\n    if (!style) return;\r\n\r\n    if (style.fontSize !== undefined && style.fontSize <= 0) {\r\n      this.addError('INVALID_FONT_SIZE', 'Font size must be positive', text, 'style.fontSize', style.fontSize);\r\n    }\r\n\r\n    if (style.fontSize !== undefined && style.fontSize > 1000) {\r\n      this.addWarning('VERY_LARGE_FONT', 'Very large font size may impact layout', text, 'style.fontSize', style.fontSize);\r\n    }\r\n  }\r\n\r\n  private checkAccessibility(text: TextElement): void {\r\n    const style = text.style;\r\n    \r\n    // Check color contrast (simplified)\r\n    if (style?.fill && style.fill === style?.stroke) {\r\n      this.addWarning('LOW_CONTRAST', 'Text fill and stroke colors are the same, may reduce readability', text);\r\n    }\r\n\r\n    // Check for very small text\r\n    if (style?.fontSize && style.fontSize < 8) {\r\n      this.addSuggestion('ACCESSIBILITY_IMPROVEMENT', 'Very small text may be hard to read', 'Consider increasing font size for better accessibility', text, 'style.fontSize');\r\n    }\r\n  }\r\n\r\n  private getResult(): ValidationResult {\r\n    return {\r\n      valid: this.errors.length === 0,\r\n      errors: this.errors,\r\n      warnings: this.warnings,\r\n      suggestions: this.suggestions\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Group Element Validator\r\n */\r\nexport class GroupValidator extends BaseElementValidator {\r\n  validate(element: SvgAnyElement, context?: ValidationContext): ValidationResult {\r\n    this.reset();\r\n\r\n    if (element.type !== 'group') {\r\n      this.addError('WRONG_ELEMENT_TYPE', `Expected group element, got ${element.type}`, element);\r\n      return this.getResult();\r\n    }\r\n\r\n    const group = element as GroupElement;\r\n\r\n    // Validate common properties\r\n    this.validateCommonProperties(group);\r\n\r\n    // Validate group-specific properties\r\n    this.validateChildren(group, context);\r\n    this.checkNesting(group, context);\r\n\r\n    return this.getResult();\r\n  }\r\n\r\n  private validateChildren(group: GroupElement, _context?: ValidationContext): void {\r\n    if (!group.children || group.children.length === 0) {\r\n      this.addWarning('EMPTY_GROUP', 'Group element has no children', group, 'children');\r\n    }\r\n\r\n    if (group.children && group.children.length > 1000) {\r\n      this.addWarning('LARGE_GROUP', 'Group has many children and may impact performance', group, 'children');\r\n    }\r\n  }\r\n\r\n  private checkNesting(group: GroupElement, context?: ValidationContext): void {\r\n    // Check for excessive nesting depth\r\n    if (context?.parentElement?.type === 'group') {\r\n      const nestingDepth = 1;\r\n      // This is a simplified check - in a real implementation, you'd track the full parent chain\r\n      if (nestingDepth > 10) {\r\n        this.addWarning('DEEP_NESTING', 'Deep group nesting may impact performance', group);\r\n      }\r\n    }\r\n  }\r\n\r\n  private getResult(): ValidationResult {\r\n    return {\r\n      valid: this.errors.length === 0,\r\n      errors: this.errors,\r\n      warnings: this.warnings,\r\n      suggestions: this.suggestions\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Element Validator Factory\r\n */\r\nexport class ElementValidatorFactory {\r\n  private static validators = new Map<string, BaseElementValidator>([\r\n    ['circle', new CircleValidator()],\r\n    ['rect', new RectValidator()],\r\n    ['line', new LineValidator()],\r\n    ['path', new PathValidator()],\r\n    ['text', new TextValidator()],\r\n    ['group', new GroupValidator()]\r\n  ]);\r\n\r\n  static getValidator(elementType: string): BaseElementValidator | null {\r\n    return this.validators.get(elementType) || null;\r\n  }\r\n\r\n  static validateElement(element: SvgAnyElement, context?: ValidationContext): ValidationResult {\r\n    const validator = this.getValidator(element.type);\r\n    if (!validator) {\r\n      return {\r\n        valid: false,\r\n        errors: [{\r\n          code: 'UNKNOWN_ELEMENT_TYPE',\r\n          message: `Unknown element type: ${element.type}`,\r\n          element,\r\n          severity: 'error'\r\n        }],\r\n        warnings: [],\r\n        suggestions: []\r\n      };\r\n    }\r\n\r\n    return validator.validate(element, context);\r\n  }\r\n\r\n  static getSupportedElementTypes(): string[] {\r\n    return Array.from(this.validators.keys());\r\n  }\r\n}\r\n"],"mappingsgFM;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAhFN;;;;;;AAoEA;;;AAGA,OAAM,MAAgBE,oBAAoB;EAC9BC,MAAM;EAAA;EAAA,CAAAH,cAAA,GAAAI,CAAA,OAAsB,EAAE;EAC9BC,QAAQ;EAAA;EAAA,CAAAL,cAAA,GAAAI,CAAA,OAAwB,EAAE;EAClCE,WAAW;EAAA;EAAA,CAAAN,cAAA,GAAAI,CAAA,OAA2B,EAAE;EAIxCG,QAAQA,CAACC,IAAY,EAAEC,OAAe,EAAEC,OAAuB,EAAEC,QAAiB,EAAEC,KAAe;IAAA;IAAAZ,cAAA,GAAAa,CAAA;IAC3G,MAAMC,KAAK;IAAA;IAAA,CAAAd,cAAA,GAAAI,CAAA,OAAQ;MACjBI,IAAI;MACJC,OAAO;MACPM,QAAQ,EAAE;KACX;IAAC;IAAAf,cAAA,GAAAI,CAAA;IAEF,IAAIM,OAAO,KAAKM,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAU,KAAK,CAACJ,OAAO,GAAGA,OAAO;IAAA,CAAC;IAAA;IAAA;MAAAV,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IACnD,IAAIO,QAAQ,KAAKK,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAU,KAAK,CAACH,QAAQ,GAAGA,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IACtD,IAAIQ,KAAK,KAAKI,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAU,KAAK,CAACF,KAAK,GAAGA,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAZ,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAE7C,IAAI,CAACD,MAAM,CAACe,IAAI,CAACJ,KAAK,CAAC;EACzB;EAEUK,UAAUA,CAACX,IAAY,EAAEC,OAAe,EAAEC,OAAuB,EAAEC,QAAiB,EAAEC,KAAe;IAAA;IAAAZ,cAAA,GAAAa,CAAA;IAC7G,MAAMO,OAAO;IAAA;IAAA,CAAApB,cAAA,GAAAI,CAAA,QAAQ;MACnBI,IAAI;MACJC,OAAO;MACPM,QAAQ,EAAE;KACX;IAAC;IAAAf,cAAA,GAAAI,CAAA;IAEF,IAAIM,OAAO,KAAKM,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAgB,OAAO,CAACV,OAAO,GAAGA,OAAO;IAAA,CAAC;IAAA;IAAA;MAAAV,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IACrD,IAAIO,QAAQ,KAAKK,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAgB,OAAO,CAACT,QAAQ,GAAGA,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IACxD,IAAIQ,KAAK,KAAKI,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAgB,OAAO,CAACR,KAAK,GAAGA,KAAK;IAAA,CAAC;IAAA;IAAA;MAAAZ,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAE/C,IAAI,CAACC,QAAQ,CAACa,IAAI,CAACE,OAAO,CAAC;EAC7B;EAEUC,aAAaA,CAACb,IAAY,EAAEC,OAAe,EAAEa,UAAkB,EAAEZ,OAAuB,EAAEC,QAAiB;IAAA;IAAAX,cAAA,GAAAa,CAAA;IACnH,MAAMU,GAAG;IAAA;IAAA,CAAAvB,cAAA,GAAAI,CAAA,QAAQ;MACfI,IAAI;MACJC,OAAO;MACPa,UAAU;MACVP,QAAQ,EAAE;KACX;IAAC;IAAAf,cAAA,GAAAI,CAAA;IAEF,IAAIM,OAAO,KAAKM,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAmB,GAAG,CAACb,OAAO,GAAGA,OAAO;IAAA,CAAC;IAAA;IAAA;MAAAV,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IACjD,IAAIO,QAAQ,KAAKK,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAAmB,GAAG,CAACZ,QAAQ,GAAGA,QAAQ;IAAA,CAAC;IAAA;IAAA;MAAAX,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAEpD,IAAI,CAACE,WAAW,CAACY,IAAI,CAACK,GAAG,CAAC;EAC5B;EAEUC,KAAKA,CAAA;IAAA;IAAAxB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACb,IAAI,CAACD,MAAM,GAAG,EAAE;IAAC;IAAAH,cAAA,GAAAI,CAAA;IACjB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAAC;IAAAL,cAAA,GAAAI,CAAA;IACnB,IAAI,CAACE,WAAW,GAAG,EAAE;EACvB;EAEUmB,wBAAwBA,CAACf,OAAsB;IAAA;IAAAV,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACvD;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,UAAAP,OAAO,CAACgB,EAAE;IAAA;IAAA,CAAA1B,cAAA,GAAAiB,CAAA,UAAIP,OAAO,CAACgB,EAAE,CAACC,IAAI,EAAE,KAAK,EAAE,GAAE;MAAA;MAAA3B,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC1C,IAAI,CAACG,QAAQ,CAAC,YAAY,EAAE,4BAA4B,EAAEG,OAAO,EAAE,IAAI,EAAEA,OAAO,CAACgB,EAAE,CAAC;IACtF,CAAC;IAAA;IAAA;MAAA1B,cAAA,GAAAiB,CAAA;IAAA;IAED;IAAAjB,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAP,OAAO,CAACkB,SAAS;IAAA;IAAA,CAAA5B,cAAA,GAAAiB,CAAA,WAAI,CAAC,IAAI,CAACY,gBAAgB,CAACnB,OAAO,CAACkB,SAAS,CAAC,GAAE;MAAA;MAAA5B,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAClE,IAAI,CAACe,UAAU,CAAC,oBAAoB,EAAE,wCAAwC,EAAET,OAAO,EAAE,WAAW,EAAEA,OAAO,CAACkB,SAAS,CAAC;IAC1H,CAAC;IAAA;IAAA;MAAA5B,cAAA,GAAAiB,CAAA;IAAA;IAED;IAAAjB,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAP,OAAO,CAACoB,SAAS;IAAA;IAAA,CAAA9B,cAAA,GAAAiB,CAAA,WAAI,CAAC,IAAI,CAACc,gBAAgB,CAACrB,OAAO,CAACoB,SAAS,CAAC,GAAE;MAAA;MAAA9B,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAClE,IAAI,CAACG,QAAQ,CAAC,mBAAmB,EAAE,mCAAmC,EAAEG,OAAO,EAAE,WAAW,EAAEA,OAAO,CAACoB,SAAS,CAAC;IAClH,CAAC;IAAA;IAAA;MAAA9B,cAAA,GAAAiB,CAAA;IAAA;IAED;IAAAjB,cAAA,GAAAI,CAAA;IACA,IAAIM,OAAO,CAACsB,KAAK,EAAE;MAAA;MAAAhC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACjB,IAAI,CAAC6B,uBAAuB,CAACvB,OAAO,CAAC;IACvC,CAAC;IAAA;IAAA;MAAAV,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQY,gBAAgBA,CAACD,SAAiB;IAAA;IAAA5B,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACxC;IACA,OAAO,mBAAmB,CAAC8B,IAAI,CAACN,SAAS,CAAC;EAC5C;EAEQG,gBAAgBA,CAACD,SAAiB;IAAA;IAAA9B,cAAA,GAAAa,CAAA;IACxC;IACA,MAAMsB,kBAAkB;IAAA;IAAA,CAAAnC,cAAA,GAAAI,CAAA,QAAG,2HAA2H;IAAC;IAAAJ,cAAA,GAAAI,CAAA;IACvJ,OAAO+B,kBAAkB,CAACD,IAAI,CAACJ,SAAS,CAACH,IAAI,EAAE,CAAC;EAClD;EAEQM,uBAAuBA,CAACvB,OAAsB;IAAA;IAAAV,cAAA,GAAAa,CAAA;IACpD,MAAMmB,KAAK;IAAA;IAAA,CAAAhC,cAAA,GAAAI,CAAA,QAAGM,OAAO,CAACsB,KAAM;IAE5B;IAAA;IAAAhC,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACI,OAAO,KAAKpB,SAAS;IAAK;IAAA,CAAAhB,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACI,OAAO,GAAG,CAAC;IAAA;IAAA,CAAApC,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACI,OAAO,GAAG,CAAC,EAAC,EAAE;MAAA;MAAApC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC3E,IAAI,CAACG,QAAQ,CAAC,iBAAiB,EAAE,iCAAiC,EAAEG,OAAO,EAAE,eAAe,EAAEsB,KAAK,CAACI,OAAO,CAAC;IAC9G,CAAC;IAAA;IAAA;MAAApC,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACK,WAAW,KAAKrB,SAAS;IAAK;IAAA,CAAAhB,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACK,WAAW,GAAG,CAAC;IAAA;IAAA,CAAArC,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACK,WAAW,GAAG,CAAC,EAAC,EAAE;MAAA;MAAArC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACvF,IAAI,CAACG,QAAQ,CAAC,sBAAsB,EAAE,sCAAsC,EAAEG,OAAO,EAAE,mBAAmB,EAAEsB,KAAK,CAACK,WAAW,CAAC;IAChI,CAAC;IAAA;IAAA;MAAArC,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACM,aAAa,KAAKtB,SAAS;IAAK;IAAA,CAAAhB,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACM,aAAa,GAAG,CAAC;IAAA;IAAA,CAAAtC,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACM,aAAa,GAAG,CAAC,EAAC,EAAE;MAAA;MAAAtC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC7F,IAAI,CAACG,QAAQ,CAAC,wBAAwB,EAAE,wCAAwC,EAAEG,OAAO,EAAE,qBAAqB,EAAEsB,KAAK,CAACM,aAAa,CAAC;IACxI,CAAC;IAAA;IAAA;MAAAtC,cAAA,GAAAiB,CAAA;IAAA;IAED;IAAAjB,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACO,WAAW,KAAKvB,SAAS;IAAA;IAAA,CAAAhB,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACO,WAAW,GAAG,CAAC,GAAE;MAAA;MAAAvC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC5D,IAAI,CAACG,QAAQ,CAAC,sBAAsB,EAAE,iCAAiC,EAAEG,OAAO,EAAE,mBAAmB,EAAEsB,KAAK,CAACO,WAAW,CAAC;IAC3H,CAAC;IAAA;IAAA;MAAAvC,cAAA,GAAAiB,CAAA;IAAA;IAED;IAAAjB,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACQ,IAAI;IAAA;IAAA,CAAAxC,cAAA,GAAAiB,CAAA,WAAI,CAAC,IAAI,CAACwB,YAAY,CAACT,KAAK,CAACQ,IAAI,CAAC,GAAE;MAAA;MAAAxC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAChD,IAAI,CAACe,UAAU,CAAC,sBAAsB,EAAE,oCAAoC,EAAET,OAAO,EAAE,YAAY,EAAEsB,KAAK,CAACQ,IAAI,CAAC;IAClH,CAAC;IAAA;IAAA;MAAAxC,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACU,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAAiB,CAAA,WAAI,CAAC,IAAI,CAACwB,YAAY,CAACT,KAAK,CAACU,MAAM,CAAC,GAAE;MAAA;MAAA1C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACpD,IAAI,CAACe,UAAU,CAAC,sBAAsB,EAAE,sCAAsC,EAAET,OAAO,EAAE,cAAc,EAAEsB,KAAK,CAACU,MAAM,CAAC;IACxH,CAAC;IAAA;IAAA;MAAA1C,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQwB,YAAYA,CAACE,KAAa;IAAA;IAAA3C,cAAA,GAAAa,CAAA;IAChC;IACA,MAAM+B,aAAa;IAAA;IAAA,CAAA5C,cAAA,GAAAI,CAAA,QAAG,CACpB,mDAAmD;IAAE;IACrD,2CAA2C;IAAE;IAC7C,gEAAgE;IAAE;IAClE,6CAA6C;IAAE;IAC/C,kEAAkE,CAAE;IAAA,CACrE;IAED;IAAA;IAAAJ,cAAA,GAAAI,CAAA;IACA,IAAI,CAAC,MAAM,EAAE,aAAa,EAAE,cAAc,CAAC,CAACyC,QAAQ,CAACF,KAAK,CAAC,EAAE;MAAA;MAAA3C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC3D,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAJ,cAAA,GAAAiB,CAAA;IAAA;IAED;IACA,MAAM6B,WAAW;IAAA;IAAA,CAAA9C,cAAA,GAAAI,CAAA,QAAG,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,CAAC;IAAC;IAAAJ,cAAA,GAAAI,CAAA;IAC9H,IAAI0C,WAAW,CAACD,QAAQ,CAACF,KAAK,CAACI,WAAW,EAAE,CAAC,EAAE;MAAA;MAAA/C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC7C,OAAO,IAAI;IACb,CAAC;IAAA;IAAA;MAAAJ,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED,OAAOwC,aAAa,CAACI,IAAI,CAACC,OAAO,IAAI;MAAA;MAAAjD,cAAA,GAAAa,CAAA;MAAAb,cAAA,GAAAI,CAAA;MAAA,OAAA6C,OAAO,CAACf,IAAI,CAACS,KAAK,CAAC;IAAD,CAAC,CAAC;EAC3D;;AAGF;;;AAGA,OAAM,MAAOO,eAAgB,SAAQhD,oBAAoB;EACvDiD,QAAQA,CAACzC,OAAsB,EAAE0C,QAA4B;IAAA;IAAApD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC3D,IAAI,CAACoB,KAAK,EAAE;IAAC;IAAAxB,cAAA,GAAAI,CAAA;IAEb,IAAIM,OAAO,CAAC2C,IAAI,KAAK,QAAQ,EAAE;MAAA;MAAArD,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC7B,IAAI,CAACG,QAAQ,CAAC,oBAAoB,EAAE,gCAAgCG,OAAO,CAAC2C,IAAI,EAAE,EAAE3C,OAAO,CAAC;MAAC;MAAAV,cAAA,GAAAI,CAAA;MAC7F,OAAO,IAAI,CAACkD,SAAS,EAAE;IACzB,CAAC;IAAA;IAAA;MAAAtD,cAAA,GAAAiB,CAAA;IAAA;IAED,MAAMsC,MAAM;IAAA;IAAA,CAAAvD,cAAA,GAAAI,CAAA,QAAGM,OAAwB;IAEvC;IAAA;IAAAV,cAAA,GAAAI,CAAA;IACA,IAAI,CAACqB,wBAAwB,CAAC8B,MAAM,CAAC;IAErC;IAAA;IAAAvD,cAAA,GAAAI,CAAA;IACA,IAAI,CAACoD,cAAc,CAACD,MAAM,CAAC;IAAC;IAAAvD,cAAA,GAAAI,CAAA;IAC5B,IAAI,CAACqD,cAAc,CAACF,MAAM,CAAC;IAAC;IAAAvD,cAAA,GAAAI,CAAA;IAC5B,IAAI,CAACsD,eAAe,CAACH,MAAM,CAAC;IAAC;IAAAvD,cAAA,GAAAI,CAAA;IAC7B,IAAI,CAACuD,gBAAgB,CAACJ,MAAM,CAAC;IAAC;IAAAvD,cAAA,GAAAI,CAAA;IAE9B,OAAO,IAAI,CAACkD,SAAS,EAAE;EACzB;EAEQE,cAAcA,CAACD,MAAqB;IAAA;IAAAvD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC1C,IAAImD,MAAM,CAACK,CAAC,GAAG,CAAC,EAAE;MAAA;MAAA5D,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAChB,IAAI,CAACG,QAAQ,CAAC,iBAAiB,EAAE,kCAAkC,EAAEgD,MAAM,EAAE,GAAG,EAAEA,MAAM,CAACK,CAAC,CAAC;IAC7F,CAAC,MAAM;MAAA;MAAA5D,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAA,IAAImD,MAAM,CAACK,CAAC,KAAK,CAAC,EAAE;QAAA;QAAA5D,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QACzB,IAAI,CAACe,UAAU,CAAC,aAAa,EAAE,6CAA6C,EAAEoC,MAAM,EAAE,GAAG,EAAEA,MAAM,CAACK,CAAC,CAAC;MACtG,CAAC,MAAM;QAAA;QAAA5D,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QAAA,IAAImD,MAAM,CAACK,CAAC,GAAG,KAAK,EAAE;UAAA;UAAA5D,cAAA,GAAAiB,CAAA;UAAAjB,cAAA,GAAAI,CAAA;UAC3B,IAAI,CAACe,UAAU,CAAC,cAAc,EAAE,0CAA0C,EAAEoC,MAAM,EAAE,GAAG,EAAEA,MAAM,CAACK,CAAC,CAAC;QACpG,CAAC;QAAA;QAAA;UAAA5D,cAAA,GAAAiB,CAAA;QAAA;MAAD;IAAA;EACF;EAEQwC,cAAcA,CAACF,MAAqB;IAAA;IAAAvD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC1C;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,YAAC4C,MAAM,CAACC,QAAQ,CAACP,MAAM,CAACQ,EAAE,CAAC;IAAA;IAAA,CAAA/D,cAAA,GAAAiB,CAAA,WAAI,CAAC4C,MAAM,CAACC,QAAQ,CAACP,MAAM,CAACS,EAAE,CAAC,GAAE;MAAA;MAAAhE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC9D,IAAI,CAACG,QAAQ,CAAC,gBAAgB,EAAE,kDAAkD,EAAEgD,MAAM,EAAE,OAAO,EAAE;QAAEQ,EAAE,EAAER,MAAM,CAACQ,EAAE;QAAEC,EAAE,EAAET,MAAM,CAACS;MAAE,CAAE,CAAC;IACxI,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAgD,IAAI,CAACC,GAAG,CAACX,MAAM,CAACQ,EAAE,CAAC,GAAG,OAAO;IAAA;IAAA,CAAA/D,cAAA,GAAAiB,CAAA,WAAIgD,IAAI,CAACC,GAAG,CAACX,MAAM,CAACS,EAAE,CAAC,GAAG,OAAO,GAAE;MAAA;MAAAhE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAClE,IAAI,CAACe,UAAU,CAAC,qBAAqB,EAAE,0CAA0C,EAAEoC,MAAM,EAAE,OAAO,EAAE;QAAEQ,EAAE,EAAER,MAAM,CAACQ,EAAE;QAAEC,EAAE,EAAET,MAAM,CAACS;MAAE,CAAE,CAAC;IACvI,CAAC;IAAA;IAAA;MAAAhE,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQyC,eAAeA,CAACH,MAAqB;IAAA;IAAAvD,cAAA,GAAAa,CAAA;IAC3C,MAAMmB,KAAK;IAAA;IAAA,CAAAhC,cAAA,GAAAI,CAAA,QAAGmD,MAAM,CAACvB,KAAK;IAAC;IAAAhC,cAAA,GAAAI,CAAA;IAC3B;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,EAAEQ,IAAI,KAAK,MAAM;IAAK;IAAA,CAAAxC,cAAA,GAAAiB,CAAA,YAACe,KAAK,EAAEU,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACU,MAAM,KAAK,MAAM,EAAC,EAAE;MAAA;MAAA1C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzE,IAAI,CAACe,UAAU,CAAC,mBAAmB,EAAE,sDAAsD,EAAEoC,MAAM,CAAC;IACtG,CAAC;IAAA;IAAA;MAAAvD,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQ0C,gBAAgBA,CAACJ,MAAqB;IAAA;IAAAvD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC5C;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAsC,MAAM,CAACK,CAAC,GAAG,IAAI;IAAA;IAAA,CAAA5D,cAAA,GAAAiB,CAAA,WAAIsC,MAAM,CAACvB,KAAK,EAAEmC,eAAe,GAAE;MAAA;MAAAnE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACpD,IAAI,CAACiB,aAAa,CAAC,0BAA0B,EAAE,4DAA4D,EAAE,gEAAgE,EAAEkC,MAAM,CAAC;IACxL,CAAC;IAAA;IAAA;MAAAvD,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqC,SAASA,CAAA;IAAA;IAAAtD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACf,OAAO;MACLgE,KAAK,EAAE,IAAI,CAACjE,MAAM,CAACkE,MAAM,KAAK,CAAC;MAC/BlE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA;KACnB;EACH;;AAGF;;;AAGA,OAAM,MAAOgE,aAAc,SAAQpE,oBAAoB;EACrDiD,QAAQA,CAACzC,OAAsB,EAAE0C,QAA4B;IAAA;IAAApD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC3D,IAAI,CAACoB,KAAK,EAAE;IAAC;IAAAxB,cAAA,GAAAI,CAAA;IAEb,IAAIM,OAAO,CAAC2C,IAAI,KAAK,MAAM,EAAE;MAAA;MAAArD,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC3B,IAAI,CAACG,QAAQ,CAAC,oBAAoB,EAAE,8BAA8BG,OAAO,CAAC2C,IAAI,EAAE,EAAE3C,OAAO,CAAC;MAAC;MAAAV,cAAA,GAAAI,CAAA;MAC3F,OAAO,IAAI,CAACkD,SAAS,EAAE;IACzB,CAAC;IAAA;IAAA;MAAAtD,cAAA,GAAAiB,CAAA;IAAA;IAED,MAAMsD,IAAI;IAAA;IAAA,CAAAvE,cAAA,GAAAI,CAAA,QAAGM,OAAsB;IAEnC;IAAA;IAAAV,cAAA,GAAAI,CAAA;IACA,IAAI,CAACqB,wBAAwB,CAAC8C,IAAI,CAAC;IAEnC;IAAA;IAAAvE,cAAA,GAAAI,CAAA;IACA,IAAI,CAACoE,kBAAkB,CAACD,IAAI,CAAC;IAAC;IAAAvE,cAAA,GAAAI,CAAA;IAC9B,IAAI,CAACqE,gBAAgB,CAACF,IAAI,CAAC;IAAC;IAAAvE,cAAA,GAAAI,CAAA;IAC5B,IAAI,CAACsE,oBAAoB,CAACH,IAAI,CAAC;IAAC;IAAAvE,cAAA,GAAAI,CAAA;IAChC,IAAI,CAACsD,eAAe,CAACa,IAAI,CAAC;IAAC;IAAAvE,cAAA,GAAAI,CAAA;IAE3B,OAAO,IAAI,CAACkD,SAAS,EAAE;EACzB;EAEQkB,kBAAkBA,CAACD,IAAiB;IAAA;IAAAvE,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC1C,IAAImE,IAAI,CAACI,KAAK,GAAG,CAAC,EAAE;MAAA;MAAA3E,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAClB,IAAI,CAACG,QAAQ,CAAC,gBAAgB,EAAE,oCAAoC,EAAEgE,IAAI,EAAE,OAAO,EAAEA,IAAI,CAACI,KAAK,CAAC;IAClG,CAAC,MAAM;MAAA;MAAA3E,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAA,IAAImE,IAAI,CAACI,KAAK,KAAK,CAAC,EAAE;QAAA;QAAA3E,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QAC3B,IAAI,CAACe,UAAU,CAAC,YAAY,EAAE,+CAA+C,EAAEoD,IAAI,EAAE,OAAO,EAAEA,IAAI,CAACI,KAAK,CAAC;MAC3G,CAAC;MAAA;MAAA;QAAA3E,cAAA,GAAAiB,CAAA;MAAA;IAAD;IAAC;IAAAjB,cAAA,GAAAI,CAAA;IAED,IAAImE,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;MAAA;MAAA5E,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACnB,IAAI,CAACG,QAAQ,CAAC,iBAAiB,EAAE,qCAAqC,EAAEgE,IAAI,EAAE,QAAQ,EAAEA,IAAI,CAACK,MAAM,CAAC;IACtG,CAAC,MAAM;MAAA;MAAA5E,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAA,IAAImE,IAAI,CAACK,MAAM,KAAK,CAAC,EAAE;QAAA;QAAA5E,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QAC5B,IAAI,CAACe,UAAU,CAAC,aAAa,EAAE,gDAAgD,EAAEoD,IAAI,EAAE,QAAQ,EAAEA,IAAI,CAACK,MAAM,CAAC;MAC/G,CAAC;MAAA;MAAA;QAAA5E,cAAA,GAAAiB,CAAA;MAAA;IAAD;IAAC;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAsD,IAAI,CAACI,KAAK,GAAG,KAAK;IAAA;IAAA,CAAA3E,cAAA,GAAAiB,CAAA,WAAIsD,IAAI,CAACK,MAAM,GAAG,KAAK,GAAE;MAAA;MAAA5E,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC7C,IAAI,CAACe,UAAU,CAAC,kBAAkB,EAAE,wDAAwD,EAAEoD,IAAI,EAAE,cAAc,EAAE;QAAEI,KAAK,EAAEJ,IAAI,CAACI,KAAK;QAAEC,MAAM,EAAEL,IAAI,CAACK;MAAM,CAAE,CAAC;IACjK,CAAC;IAAA;IAAA;MAAA5E,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQwD,gBAAgBA,CAACF,IAAiB;IAAA;IAAAvE,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACxC;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,YAAC4C,MAAM,CAACC,QAAQ,CAACS,IAAI,CAACM,CAAC,CAAC;IAAA;IAAA,CAAA7E,cAAA,GAAAiB,CAAA,WAAI,CAAC4C,MAAM,CAACC,QAAQ,CAACS,IAAI,CAACO,CAAC,CAAC,GAAE;MAAA;MAAA9E,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACxD,IAAI,CAACG,QAAQ,CAAC,kBAAkB,EAAE,uDAAuD,EAAEgE,IAAI,EAAE,KAAK,EAAE;QAAEM,CAAC,EAAEN,IAAI,CAACM,CAAC;QAAEC,CAAC,EAAEP,IAAI,CAACO;MAAC,CAAE,CAAC;IACnI,CAAC;IAAA;IAAA;MAAA9E,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQyD,oBAAoBA,CAACH,IAAiB;IAAA;IAAAvE,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC5C,IAAImE,IAAI,CAACQ,EAAE,KAAK/D,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzB,IAAImE,IAAI,CAACQ,EAAE,GAAG,CAAC,EAAE;QAAA;QAAA/E,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QACf,IAAI,CAACG,QAAQ,CAAC,wBAAwB,EAAE,qCAAqC,EAAEgE,IAAI,EAAE,IAAI,EAAEA,IAAI,CAACQ,EAAE,CAAC;MACrG,CAAC,MAAM;QAAA;QAAA/E,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QAAA,IAAImE,IAAI,CAACQ,EAAE,GAAGR,IAAI,CAACI,KAAK,GAAG,CAAC,EAAE;UAAA;UAAA3E,cAAA,GAAAiB,CAAA;UAAAjB,cAAA,GAAAI,CAAA;UACnC,IAAI,CAACe,UAAU,CAAC,yBAAyB,EAAE,gDAAgD,EAAEoD,IAAI,EAAE,IAAI,EAAEA,IAAI,CAACQ,EAAE,CAAC;QACnH,CAAC;QAAA;QAAA;UAAA/E,cAAA,GAAAiB,CAAA;QAAA;MAAD;IACF,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED,IAAImE,IAAI,CAACS,EAAE,KAAKhE,SAAS,EAAE;MAAA;MAAAhB,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzB,IAAImE,IAAI,CAACS,EAAE,GAAG,CAAC,EAAE;QAAA;QAAAhF,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QACf,IAAI,CAACG,QAAQ,CAAC,wBAAwB,EAAE,qCAAqC,EAAEgE,IAAI,EAAE,IAAI,EAAEA,IAAI,CAACS,EAAE,CAAC;MACrG,CAAC,MAAM;QAAA;QAAAhF,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QAAA,IAAImE,IAAI,CAACS,EAAE,GAAGT,IAAI,CAACK,MAAM,GAAG,CAAC,EAAE;UAAA;UAAA5E,cAAA,GAAAiB,CAAA;UAAAjB,cAAA,GAAAI,CAAA;UACpC,IAAI,CAACe,UAAU,CAAC,yBAAyB,EAAE,iDAAiD,EAAEoD,IAAI,EAAE,IAAI,EAAEA,IAAI,CAACS,EAAE,CAAC;QACpH,CAAC;QAAA;QAAA;UAAAhF,cAAA,GAAAiB,CAAA;QAAA;MAAD;IACF,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQyC,eAAeA,CAACa,IAAiB;IAAA;IAAAvE,cAAA,GAAAa,CAAA;IACvC,MAAMmB,KAAK;IAAA;IAAA,CAAAhC,cAAA,GAAAI,CAAA,SAAGmE,IAAI,CAACvC,KAAK;IAAC;IAAAhC,cAAA,GAAAI,CAAA;IACzB;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,EAAEQ,IAAI,KAAK,MAAM;IAAK;IAAA,CAAAxC,cAAA,GAAAiB,CAAA,YAACe,KAAK,EAAEU,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACU,MAAM,KAAK,MAAM,EAAC,EAAE;MAAA;MAAA1C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzE,IAAI,CAACe,UAAU,CAAC,mBAAmB,EAAE,yDAAyD,EAAEoD,IAAI,CAAC;IACvG,CAAC;IAAA;IAAA;MAAAvE,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqC,SAASA,CAAA;IAAA;IAAAtD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACf,OAAO;MACLgE,KAAK,EAAE,IAAI,CAACjE,MAAM,CAACkE,MAAM,KAAK,CAAC;MAC/BlE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA;KACnB;EACH;;AAGF;;;AAGA,OAAM,MAAO2E,aAAc,SAAQ/E,oBAAoB;EACrDiD,QAAQA,CAACzC,OAAsB,EAAE0C,QAA4B;IAAA;IAAApD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC3D,IAAI,CAACoB,KAAK,EAAE;IAAC;IAAAxB,cAAA,GAAAI,CAAA;IAEb,IAAIM,OAAO,CAAC2C,IAAI,KAAK,MAAM,EAAE;MAAA;MAAArD,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC3B,IAAI,CAACG,QAAQ,CAAC,oBAAoB,EAAE,8BAA8BG,OAAO,CAAC2C,IAAI,EAAE,EAAE3C,OAAO,CAAC;MAAC;MAAAV,cAAA,GAAAI,CAAA;MAC3F,OAAO,IAAI,CAACkD,SAAS,EAAE;IACzB,CAAC;IAAA;IAAA;MAAAtD,cAAA,GAAAiB,CAAA;IAAA;IAED,MAAMiE,IAAI;IAAA;IAAA,CAAAlF,cAAA,GAAAI,CAAA,SAAGM,OAAsB;IAEnC;IAAA;IAAAV,cAAA,GAAAI,CAAA;IACA,IAAI,CAACqB,wBAAwB,CAACyD,IAAI,CAAC;IAEnC;IAAA;IAAAlF,cAAA,GAAAI,CAAA;IACA,IAAI,CAAC+E,mBAAmB,CAACD,IAAI,CAAC;IAAC;IAAAlF,cAAA,GAAAI,CAAA;IAC/B,IAAI,CAACgF,eAAe,CAACF,IAAI,CAAC;IAAC;IAAAlF,cAAA,GAAAI,CAAA;IAC3B,IAAI,CAACsD,eAAe,CAACwB,IAAI,CAAC;IAAC;IAAAlF,cAAA,GAAAI,CAAA;IAE3B,OAAO,IAAI,CAACkD,SAAS,EAAE;EACzB;EAEQ6B,mBAAmBA,CAACD,IAAiB;IAAA;IAAAlF,cAAA,GAAAa,CAAA;IAC3C,MAAMwE,MAAM;IAAA;IAAA,CAAArF,cAAA,GAAAI,CAAA,SAAG,CAAC8E,IAAI,CAACI,EAAE,EAAEJ,IAAI,CAACK,EAAE,EAAEL,IAAI,CAACM,EAAE,EAAEN,IAAI,CAACO,EAAE,CAAC;IAAC;IAAAzF,cAAA,GAAAI,CAAA;IAEpD,KAAK,MAAM,CAACsF,KAAK,EAAEC,KAAK,CAAC,IAAIN,MAAM,CAACO,OAAO,EAAE,EAAE;MAAA;MAAA5F,cAAA,GAAAI,CAAA;MAC7C,IAAI,CAACyD,MAAM,CAACC,QAAQ,CAAC6B,KAAK,CAAC,EAAE;QAAA;QAAA3F,cAAA,GAAAiB,CAAA;QAC3B,MAAM4E,SAAS;QAAA;QAAA,CAAA7F,cAAA,GAAAI,CAAA,SAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAACsF,KAAK,CAAC;QAAC;QAAA1F,cAAA,GAAAI,CAAA;QAClD,IAAI,CAACG,QAAQ,CAAC,oBAAoB,EAAE,mBAAmBsF,SAAS,0BAA0B,EAAEX,IAAI,EAAEW,SAAS,EAAEF,KAAK,CAAC;MACrH,CAAC;MAAA;MAAA;QAAA3F,cAAA,GAAAiB,CAAA;MAAA;IACH;EACF;EAEQmE,eAAeA,CAACF,IAAiB;IAAA;IAAAlF,cAAA,GAAAa,CAAA;IACvC,MAAMwD,MAAM;IAAA;IAAA,CAAArE,cAAA,GAAAI,CAAA,SAAG6D,IAAI,CAAC6B,IAAI,CAAC7B,IAAI,CAAC8B,GAAG,CAACb,IAAI,CAACM,EAAE,GAAGN,IAAI,CAACI,EAAE,EAAE,CAAC,CAAC,GAAGrB,IAAI,CAAC8B,GAAG,CAACb,IAAI,CAACO,EAAE,GAAGP,IAAI,CAACK,EAAE,EAAE,CAAC,CAAC,CAAC;IAAC;IAAAvF,cAAA,GAAAI,CAAA;IAE1F,IAAIiE,MAAM,KAAK,CAAC,EAAE;MAAA;MAAArE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAChB,IAAI,CAACe,UAAU,CAAC,kBAAkB,EAAE,8CAA8C,EAAE+D,IAAI,CAAC;IAC3F,CAAC,MAAM;MAAA;MAAAlF,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAA,IAAIiE,MAAM,GAAG,KAAK,EAAE;QAAA;QAAArE,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QACzB,IAAI,CAACe,UAAU,CAAC,gBAAgB,EAAE,uCAAuC,EAAE+D,IAAI,CAAC;MAClF,CAAC;MAAA;MAAA;QAAAlF,cAAA,GAAAiB,CAAA;MAAA;IAAD;EACF;EAEQyC,eAAeA,CAACwB,IAAiB;IAAA;IAAAlF,cAAA,GAAAa,CAAA;IACvC,MAAMmB,KAAK;IAAA;IAAA,CAAAhC,cAAA,GAAAI,CAAA,SAAG8E,IAAI,CAAClD,KAAK;IAAC;IAAAhC,cAAA,GAAAI,CAAA;IACzB;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,YAACe,KAAK,EAAEU,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACU,MAAM,KAAK,MAAM,GAAE;MAAA;MAAA1C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC7C,IAAI,CAACe,UAAU,CAAC,gBAAgB,EAAE,4CAA4C,EAAE+D,IAAI,CAAC;IACvF,CAAC;IAAA;IAAA;MAAAlF,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqC,SAASA,CAAA;IAAA;IAAAtD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACf,OAAO;MACLgE,KAAK,EAAE,IAAI,CAACjE,MAAM,CAACkE,MAAM,KAAK,CAAC;MAC/BlE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA;KACnB;EACH;;AAGF;;;AAGA,OAAM,MAAO0F,aAAc,SAAQ9F,oBAAoB;EACrDiD,QAAQA,CAACzC,OAAsB,EAAE0C,QAA4B;IAAA;IAAApD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC3D,IAAI,CAACoB,KAAK,EAAE;IAAC;IAAAxB,cAAA,GAAAI,CAAA;IAEb,IAAIM,OAAO,CAAC2C,IAAI,KAAK,MAAM,EAAE;MAAA;MAAArD,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC3B,IAAI,CAACG,QAAQ,CAAC,oBAAoB,EAAE,8BAA8BG,OAAO,CAAC2C,IAAI,EAAE,EAAE3C,OAAO,CAAC;MAAC;MAAAV,cAAA,GAAAI,CAAA;MAC3F,OAAO,IAAI,CAACkD,SAAS,EAAE;IACzB,CAAC;IAAA;IAAA;MAAAtD,cAAA,GAAAiB,CAAA;IAAA;IAED,MAAMgF,IAAI;IAAA;IAAA,CAAAjG,cAAA,GAAAI,CAAA,SAAGM,OAAsB;IAEnC;IAAA;IAAAV,cAAA,GAAAI,CAAA;IACA,IAAI,CAACqB,wBAAwB,CAACwE,IAAI,CAAC;IAEnC;IAAA;IAAAjG,cAAA,GAAAI,CAAA;IACA,IAAI,CAAC8F,gBAAgB,CAACD,IAAI,CAAC;IAAC;IAAAjG,cAAA,GAAAI,CAAA;IAC5B,IAAI,CAAC+F,eAAe,CAACF,IAAI,CAAC;IAAC;IAAAjG,cAAA,GAAAI,CAAA;IAC3B,IAAI,CAACsD,eAAe,CAACuC,IAAI,CAAC;IAAC;IAAAjG,cAAA,GAAAI,CAAA;IAE3B,OAAO,IAAI,CAACkD,SAAS,EAAE;EACzB;EAEQ4C,gBAAgBA,CAACD,IAAiB;IAAA;IAAAjG,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACxC;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,YAACgF,IAAI,CAACG,CAAC;IAAA;IAAA,CAAApG,cAAA,GAAAiB,CAAA,WAAIgF,IAAI,CAACG,CAAC,CAACzE,IAAI,EAAE,KAAK,EAAE,GAAE;MAAA;MAAA3B,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACnC,IAAI,CAACG,QAAQ,CAAC,iBAAiB,EAAE,yCAAyC,EAAE0F,IAAI,EAAE,GAAG,EAAEA,IAAI,CAACG,CAAC,CAAC;MAAC;MAAApG,cAAA,GAAAI,CAAA;MAC/F;IACF,CAAC;IAAA;IAAA;MAAAJ,cAAA,GAAAiB,CAAA;IAAA;IAED;IACA,MAAMoF,YAAY;IAAA;IAAA,CAAArG,cAAA,GAAAI,CAAA,SAAG,kCAAkC;IAAC;IAAAJ,cAAA,GAAAI,CAAA;IACxD,IAAI,CAACiG,YAAY,CAACnE,IAAI,CAAC+D,IAAI,CAACG,CAAC,CAAC,EAAE;MAAA;MAAApG,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC9B,IAAI,CAACG,QAAQ,CAAC,mBAAmB,EAAE,uCAAuC,EAAE0F,IAAI,EAAE,GAAG,EAAEA,IAAI,CAACG,CAAC,CAAC;IAChG,CAAC;IAAA;IAAA;MAAApG,cAAA,GAAAiB,CAAA;IAAA;IAED;IAAAjB,cAAA,GAAAI,CAAA;IACA,IAAI,CAAC,IAAI,CAACkG,qBAAqB,CAACL,IAAI,CAACG,CAAC,CAAC,EAAE;MAAA;MAAApG,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACvC,IAAI,CAACe,UAAU,CAAC,6BAA6B,EAAE,sCAAsC,EAAE8E,IAAI,EAAE,GAAG,EAAEA,IAAI,CAACG,CAAC,CAAC;IAC3G,CAAC;IAAA;IAAA;MAAApG,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqF,qBAAqBA,CAACC,QAAgB;IAAA;IAAAvG,cAAA,GAAAa,CAAA;IAC5C;IACA,MAAM2F,OAAO;IAAA;IAAA,CAAAxG,cAAA,GAAAI,CAAA,SAAGmG,QAAQ,CAAC5E,IAAI,EAAE;IAAC;IAAA3B,cAAA,GAAAI,CAAA;IAChC,OAAO,OAAO,CAAC8B,IAAI,CAACsE,OAAO,CAAC;EAC9B;EAEQL,eAAeA,CAACF,IAAiB;IAAA;IAAAjG,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACvC,IAAI6F,IAAI,CAACG,CAAC,CAAC/B,MAAM,GAAG,KAAK,EAAE;MAAA;MAAArE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzB,IAAI,CAACe,UAAU,CAAC,cAAc,EAAE,4CAA4C,EAAE8E,IAAI,EAAE,GAAG,CAAC;MAAC;MAAAjG,cAAA,GAAAI,CAAA;MACzF,IAAI,CAACiB,aAAa,CAAC,eAAe,EAAE,sBAAsB,EAAE,oEAAoE,EAAE4E,IAAI,EAAE,GAAG,CAAC;IAC9I,CAAC;IAAA;IAAA;MAAAjG,cAAA,GAAAiB,CAAA;IAAA;IAED;IACA,MAAMwF,YAAY;IAAA;IAAA,CAAAzG,cAAA,GAAAI,CAAA,SAAG;IAAC;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAgF,IAAI,CAACG,CAAC,CAACM,KAAK,CAAC,yBAAyB,CAAC;IAAA;IAAA,CAAA1G,cAAA,GAAAiB,CAAA,WAAI,EAAE,GAAEoD,MAAM;IAAC;IAAArE,cAAA,GAAAI,CAAA;IAC5E,IAAIqG,YAAY,GAAG,IAAI,EAAE;MAAA;MAAAzG,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACvB,IAAI,CAACe,UAAU,CAAC,oBAAoB,EAAE,mDAAmD,EAAE8E,IAAI,EAAE,GAAG,CAAC;IACvG,CAAC;IAAA;IAAA;MAAAjG,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQyC,eAAeA,CAACuC,IAAiB;IAAA;IAAAjG,cAAA,GAAAa,CAAA;IACvC,MAAMmB,KAAK;IAAA;IAAA,CAAAhC,cAAA,GAAAI,CAAA,SAAG6F,IAAI,CAACjE,KAAK;IAAC;IAAAhC,cAAA,GAAAI,CAAA;IACzB;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,EAAEQ,IAAI,KAAK,MAAM;IAAK;IAAA,CAAAxC,cAAA,GAAAiB,CAAA,YAACe,KAAK,EAAEU,MAAM;IAAA;IAAA,CAAA1C,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACU,MAAM,KAAK,MAAM,EAAC,EAAE;MAAA;MAAA1C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzE,IAAI,CAACe,UAAU,CAAC,mBAAmB,EAAE,oDAAoD,EAAE8E,IAAI,CAAC;IAClG,CAAC;IAAA;IAAA;MAAAjG,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqC,SAASA,CAAA;IAAA;IAAAtD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACf,OAAO;MACLgE,KAAK,EAAE,IAAI,CAACjE,MAAM,CAACkE,MAAM,KAAK,CAAC;MAC/BlE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA;KACnB;EACH;;AAGF;;;AAGA,OAAM,MAAOqG,aAAc,SAAQzG,oBAAoB;EACrDiD,QAAQA,CAACzC,OAAsB,EAAE0C,QAA4B;IAAA;IAAApD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC3D,IAAI,CAACoB,KAAK,EAAE;IAAC;IAAAxB,cAAA,GAAAI,CAAA;IAEb,IAAIM,OAAO,CAAC2C,IAAI,KAAK,MAAM,EAAE;MAAA;MAAArD,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC3B,IAAI,CAACG,QAAQ,CAAC,oBAAoB,EAAE,8BAA8BG,OAAO,CAAC2C,IAAI,EAAE,EAAE3C,OAAO,CAAC;MAAC;MAAAV,cAAA,GAAAI,CAAA;MAC3F,OAAO,IAAI,CAACkD,SAAS,EAAE;IACzB,CAAC;IAAA;IAAA;MAAAtD,cAAA,GAAAiB,CAAA;IAAA;IAED,MAAM2F,IAAI;IAAA;IAAA,CAAA5G,cAAA,GAAAI,CAAA,SAAGM,OAAsB;IAEnC;IAAA;IAAAV,cAAA,GAAAI,CAAA;IACA,IAAI,CAACqB,wBAAwB,CAACmF,IAAI,CAAC;IAEnC;IAAA;IAAA5G,cAAA,GAAAI,CAAA;IACA,IAAI,CAACyG,eAAe,CAACD,IAAI,CAAC;IAAC;IAAA5G,cAAA,GAAAI,CAAA;IAC3B,IAAI,CAACqE,gBAAgB,CAACmC,IAAI,CAAC;IAAC;IAAA5G,cAAA,GAAAI,CAAA;IAC5B,IAAI,CAAC0G,iBAAiB,CAACF,IAAI,CAAC;IAAC;IAAA5G,cAAA,GAAAI,CAAA;IAC7B,IAAI,CAAC2G,kBAAkB,CAACH,IAAI,CAAC;IAAC;IAAA5G,cAAA,GAAAI,CAAA;IAE9B,OAAO,IAAI,CAACkD,SAAS,EAAE;EACzB;EAEQuD,eAAeA,CAACD,IAAiB;IAAA;IAAA5G,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACvC;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,YAAC2F,IAAI,CAACI,OAAO;IAAA;IAAA,CAAAhH,cAAA,GAAAiB,CAAA,WAAI2F,IAAI,CAACI,OAAO,CAACrF,IAAI,EAAE,KAAK,EAAE,GAAE;MAAA;MAAA3B,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC/C,IAAI,CAACe,UAAU,CAAC,oBAAoB,EAAE,6BAA6B,EAAEyF,IAAI,EAAE,SAAS,EAAEA,IAAI,CAACI,OAAO,CAAC;IACrG,CAAC;IAAA;IAAA;MAAAhH,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAA2F,IAAI,CAACI,OAAO;IAAA;IAAA,CAAAhH,cAAA,GAAAiB,CAAA,WAAI2F,IAAI,CAACI,OAAO,CAAC3C,MAAM,GAAG,KAAK,GAAE;MAAA;MAAArE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC/C,IAAI,CAACe,UAAU,CAAC,gBAAgB,EAAE,+CAA+C,EAAEyF,IAAI,EAAE,SAAS,CAAC;IACrG,CAAC;IAAA;IAAA;MAAA5G,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQwD,gBAAgBA,CAACmC,IAAiB;IAAA;IAAA5G,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACxC;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,YAAC4C,MAAM,CAACC,QAAQ,CAAC8C,IAAI,CAAC/B,CAAC,CAAC;IAAA;IAAA,CAAA7E,cAAA,GAAAiB,CAAA,WAAI,CAAC4C,MAAM,CAACC,QAAQ,CAAC8C,IAAI,CAAC9B,CAAC,CAAC,GAAE;MAAA;MAAA9E,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACxD,IAAI,CAACG,QAAQ,CAAC,kBAAkB,EAAE,kDAAkD,EAAEqG,IAAI,EAAE,KAAK,EAAE;QAAE/B,CAAC,EAAE+B,IAAI,CAAC/B,CAAC;QAAEC,CAAC,EAAE8B,IAAI,CAAC9B;MAAC,CAAE,CAAC;IAC9H,CAAC;IAAA;IAAA;MAAA9E,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQ6F,iBAAiBA,CAACF,IAAiB;IAAA;IAAA5G,cAAA,GAAAa,CAAA;IACzC,MAAMmB,KAAK;IAAA;IAAA,CAAAhC,cAAA,GAAAI,CAAA,SAAGwG,IAAI,CAAC5E,KAAK;IAAC;IAAAhC,cAAA,GAAAI,CAAA;IACzB,IAAI,CAAC4B,KAAK,EAAE;MAAA;MAAAhC,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAAA;IAAA,CAAO;IAAA;IAAA;MAAAJ,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAEnB;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACiF,QAAQ,KAAKjG,SAAS;IAAA;IAAA,CAAAhB,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACiF,QAAQ,IAAI,CAAC,GAAE;MAAA;MAAAjH,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACvD,IAAI,CAACG,QAAQ,CAAC,mBAAmB,EAAE,4BAA4B,EAAEqG,IAAI,EAAE,gBAAgB,EAAE5E,KAAK,CAACiF,QAAQ,CAAC;IAC1G,CAAC;IAAA;IAAA;MAAAjH,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,CAACiF,QAAQ,KAAKjG,SAAS;IAAA;IAAA,CAAAhB,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACiF,QAAQ,GAAG,IAAI,GAAE;MAAA;MAAAjH,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzD,IAAI,CAACe,UAAU,CAAC,iBAAiB,EAAE,wCAAwC,EAAEyF,IAAI,EAAE,gBAAgB,EAAE5E,KAAK,CAACiF,QAAQ,CAAC;IACtH,CAAC;IAAA;IAAA;MAAAjH,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQ8F,kBAAkBA,CAACH,IAAiB;IAAA;IAAA5G,cAAA,GAAAa,CAAA;IAC1C,MAAMmB,KAAK;IAAA;IAAA,CAAAhC,cAAA,GAAAI,CAAA,SAAGwG,IAAI,CAAC5E,KAAK;IAExB;IAAA;IAAAhC,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,EAAEQ,IAAI;IAAA;IAAA,CAAAxC,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACQ,IAAI,KAAKR,KAAK,EAAEU,MAAM,GAAE;MAAA;MAAA1C,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC/C,IAAI,CAACe,UAAU,CAAC,cAAc,EAAE,kEAAkE,EAAEyF,IAAI,CAAC;IAC3G,CAAC;IAAA;IAAA;MAAA5G,cAAA,GAAAiB,CAAA;IAAA;IAED;IAAAjB,cAAA,GAAAI,CAAA;IACA;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAe,KAAK,EAAEiF,QAAQ;IAAA;IAAA,CAAAjH,cAAA,GAAAiB,CAAA,WAAIe,KAAK,CAACiF,QAAQ,GAAG,CAAC,GAAE;MAAA;MAAAjH,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACzC,IAAI,CAACiB,aAAa,CAAC,2BAA2B,EAAE,qCAAqC,EAAE,wDAAwD,EAAEuF,IAAI,EAAE,gBAAgB,CAAC;IAC1K,CAAC;IAAA;IAAA;MAAA5G,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqC,SAASA,CAAA;IAAA;IAAAtD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACf,OAAO;MACLgE,KAAK,EAAE,IAAI,CAACjE,MAAM,CAACkE,MAAM,KAAK,CAAC;MAC/BlE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA;KACnB;EACH;;AAGF;;;AAGA,OAAM,MAAO4G,cAAe,SAAQhH,oBAAoB;EACtDiD,QAAQA,CAACzC,OAAsB,EAAEyG,OAA2B;IAAA;IAAAnH,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC1D,IAAI,CAACoB,KAAK,EAAE;IAAC;IAAAxB,cAAA,GAAAI,CAAA;IAEb,IAAIM,OAAO,CAAC2C,IAAI,KAAK,OAAO,EAAE;MAAA;MAAArD,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAC5B,IAAI,CAACG,QAAQ,CAAC,oBAAoB,EAAE,+BAA+BG,OAAO,CAAC2C,IAAI,EAAE,EAAE3C,OAAO,CAAC;MAAC;MAAAV,cAAA,GAAAI,CAAA;MAC5F,OAAO,IAAI,CAACkD,SAAS,EAAE;IACzB,CAAC;IAAA;IAAA;MAAAtD,cAAA,GAAAiB,CAAA;IAAA;IAED,MAAMmG,KAAK;IAAA;IAAA,CAAApH,cAAA,GAAAI,CAAA,SAAGM,OAAuB;IAErC;IAAA;IAAAV,cAAA,GAAAI,CAAA;IACA,IAAI,CAACqB,wBAAwB,CAAC2F,KAAK,CAAC;IAEpC;IAAA;IAAApH,cAAA,GAAAI,CAAA;IACA,IAAI,CAACiH,gBAAgB,CAACD,KAAK,EAAED,OAAO,CAAC;IAAC;IAAAnH,cAAA,GAAAI,CAAA;IACtC,IAAI,CAACkH,YAAY,CAACF,KAAK,EAAED,OAAO,CAAC;IAAC;IAAAnH,cAAA,GAAAI,CAAA;IAElC,OAAO,IAAI,CAACkD,SAAS,EAAE;EACzB;EAEQ+D,gBAAgBA,CAACD,KAAmB,EAAEhE,QAA4B;IAAA;IAAApD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACxE;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,YAACmG,KAAK,CAACG,QAAQ;IAAA;IAAA,CAAAvH,cAAA,GAAAiB,CAAA,WAAImG,KAAK,CAACG,QAAQ,CAAClD,MAAM,KAAK,CAAC,GAAE;MAAA;MAAArE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAClD,IAAI,CAACe,UAAU,CAAC,aAAa,EAAE,+BAA+B,EAAEiG,KAAK,EAAE,UAAU,CAAC;IACpF,CAAC;IAAA;IAAA;MAAApH,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED;IAAI;IAAA,CAAAJ,cAAA,GAAAiB,CAAA,WAAAmG,KAAK,CAACG,QAAQ;IAAA;IAAA,CAAAvH,cAAA,GAAAiB,CAAA,WAAImG,KAAK,CAACG,QAAQ,CAAClD,MAAM,GAAG,IAAI,GAAE;MAAA;MAAArE,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MAClD,IAAI,CAACe,UAAU,CAAC,aAAa,EAAE,oDAAoD,EAAEiG,KAAK,EAAE,UAAU,CAAC;IACzG,CAAC;IAAA;IAAA;MAAApH,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqG,YAAYA,CAACF,KAAmB,EAAED,OAA2B;IAAA;IAAAnH,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACnE;IACA,IAAI+G,OAAO,EAAEK,aAAa,EAAEnE,IAAI,KAAK,OAAO,EAAE;MAAA;MAAArD,cAAA,GAAAiB,CAAA;MAC5C,MAAMwG,YAAY;MAAA;MAAA,CAAAzH,cAAA,GAAAI,CAAA,SAAG,CAAC;MACtB;MAAA;MAAAJ,cAAA,GAAAI,CAAA;MACA,IAAIqH,YAAY,GAAG,EAAE,EAAE;QAAA;QAAAzH,cAAA,GAAAiB,CAAA;QAAAjB,cAAA,GAAAI,CAAA;QACrB,IAAI,CAACe,UAAU,CAAC,cAAc,EAAE,2CAA2C,EAAEiG,KAAK,CAAC;MACrF,CAAC;MAAA;MAAA;QAAApH,cAAA,GAAAiB,CAAA;MAAA;IACH,CAAC;IAAA;IAAA;MAAAjB,cAAA,GAAAiB,CAAA;IAAA;EACH;EAEQqC,SAASA,CAAA;IAAA;IAAAtD,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACf,OAAO;MACLgE,KAAK,EAAE,IAAI,CAACjE,MAAM,CAACkE,MAAM,KAAK,CAAC;MAC/BlE,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBE,QAAQ,EAAE,IAAI,CAACA,QAAQ;MACvBC,WAAW,EAAE,IAAI,CAACA;KACnB;EACH;;AAGF;;;AAGA,OAAM,MAAOoH,uBAAuB;EAC1B,OAAOC,UAAU;EAAA;EAAA,CAAA3H,cAAA,GAAAI,CAAA,SAAG,IAAIwH,GAAG,CAA+B,CAChE,CAAC,QAAQ,EAAE,IAAI1E,eAAe,EAAE,CAAC,EACjC,CAAC,MAAM,EAAE,IAAIoB,aAAa,EAAE,CAAC,EAC7B,CAAC,MAAM,EAAE,IAAIW,aAAa,EAAE,CAAC,EAC7B,CAAC,MAAM,EAAE,IAAIe,aAAa,EAAE,CAAC,EAC7B,CAAC,MAAM,EAAE,IAAIW,aAAa,EAAE,CAAC,EAC7B,CAAC,OAAO,EAAE,IAAIO,cAAc,EAAE,CAAC,CAChC,CAAC;EAEF,OAAOW,YAAYA,CAACC,WAAmB;IAAA;IAAA9H,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IACrC,OAAO,2BAAAJ,cAAA,GAAAiB,CAAA,eAAI,CAAC0G,UAAU,CAACI,GAAG,CAACD,WAAW,CAAC;IAAA;IAAA,CAAA9H,cAAA,GAAAiB,CAAA,WAAI,IAAI;EACjD;EAEA,OAAO+G,eAAeA,CAACtH,OAAsB,EAAEyG,OAA2B;IAAA;IAAAnH,cAAA,GAAAa,CAAA;IACxE,MAAMoH,SAAS;IAAA;IAAA,CAAAjI,cAAA,GAAAI,CAAA,SAAG,IAAI,CAACyH,YAAY,CAACnH,OAAO,CAAC2C,IAAI,CAAC;IAAC;IAAArD,cAAA,GAAAI,CAAA;IAClD,IAAI,CAAC6H,SAAS,EAAE;MAAA;MAAAjI,cAAA,GAAAiB,CAAA;MAAAjB,cAAA,GAAAI,CAAA;MACd,OAAO;QACLgE,KAAK,EAAE,KAAK;QACZjE,MAAM,EAAE,CAAC;UACPK,IAAI,EAAE,sBAAsB;UAC5BC,OAAO,EAAE,yBAAyBC,OAAO,CAAC2C,IAAI,EAAE;UAChD3C,OAAO;UACPK,QAAQ,EAAE;SACX,CAAC;QACFV,QAAQ,EAAE,EAAE;QACZC,WAAW,EAAE;OACd;IACH,CAAC;IAAA;IAAA;MAAAN,cAAA,GAAAiB,CAAA;IAAA;IAAAjB,cAAA,GAAAI,CAAA;IAED,OAAO6H,SAAS,CAAC9E,QAAQ,CAACzC,OAAO,EAAEyG,OAAO,CAAC;EAC7C;EAEA,OAAOe,wBAAwBA,CAAA;IAAA;IAAAlI,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAI,CAAA;IAC7B,OAAO+H,KAAK,CAACC,IAAI,CAAC,IAAI,CAACT,UAAU,CAACU,IAAI,EAAE,CAAC;EAC3C","ignoreList":[]}