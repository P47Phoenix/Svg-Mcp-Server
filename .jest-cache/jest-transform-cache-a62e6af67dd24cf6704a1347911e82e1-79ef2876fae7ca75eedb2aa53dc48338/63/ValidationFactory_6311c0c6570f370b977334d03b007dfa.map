{"version":3,"names":["cov_4b7hv1blm","actualCoverage","ElementValidatorFactory","DocumentValidator","ValidationFactory","presetConfigs","s","strict","checkAccessibility","checkPerformance","checkCompliance","targetCompliance","maxElements","maxNestingDepth","allowUnknownElements","standard","minimal","performance","accessibility","custom","createDocumentValidator","preset","b","f","options","createCustomDocumentValidator","validateElement","element","context","validateDocument","document","config","elementValidation","documentValidation","documentOptions","baseOptions","finalOptions","recommendations","quickFixes","elementResults","documentResult","Map","elements","forEach","index","elementIndex","siblingElements","documentIds","Set","referencedIds","result","set","suggestions","suggestion","quickFix","type","description","message","priority","getSuggestionPriority","code","automated","isAutomatable","property","undefined","suggestedValue","push","validator","optimizations","compliance","warnings","warning","overall","calculateOverallResults","Array","from","quickValidate","criticalIssues","viewBox","length","width","height","invalidElements","valid","elementCount","validateWithAutoFix","validationResult","appliedFixes","autoFixedDocument","automatableFixes","filter","fix","applyFix","error","console","warn","_recommendations","score","totalErrors","totalWarnings","values","errors","Math","max","min","summary","round","highPriority","lowPriority","some","hp","includes","lp","automatable","auto","title","SVGValidator","quick","withAutoFix"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\core\\validation\\ValidationFactory.ts"],"sourcesContent":["/**\r\n * Validation Factory\r\n * \r\n * Central factory for creating and managing SVG validation instances.\r\n * Provides easy access to all validation capabilities with sensible defaults.\r\n */\r\n\r\nimport { \r\n  ElementValidatorFactory, \r\n  ValidationResult, \r\n  ValidationContext \r\n} from './ElementValidators.js';\r\nimport { \r\n  DocumentValidator, \r\n  DocumentValidationOptions, \r\n  DocumentValidationResult \r\n} from './DocumentValidator.js';\r\nimport { SvgDocument, SvgAnyElement } from '../../types/svg.js';\r\n\r\n// Validation presets for common use cases\r\nexport type ValidationPreset = \r\n  | 'strict'      // Maximum validation with all checks enabled\r\n  | 'standard'    // Balanced validation suitable for most cases\r\n  | 'minimal'     // Basic validation only\r\n  | 'performance' // Focus on performance-related issues\r\n  | 'accessibility' // Focus on accessibility compliance\r\n  | 'custom';     // Custom configuration\r\n\r\n// Validation suite configuration\r\nexport interface ValidationSuiteConfig {\r\n  preset?: ValidationPreset;\r\n  elementValidation?: boolean;\r\n  documentValidation?: boolean;\r\n  documentOptions?: DocumentValidationOptions;\r\n}\r\n\r\n// Combined validation results\r\nexport interface ValidationSuiteResult {\r\n  overall: {\r\n    valid: boolean;\r\n    score: number; // 0-100 overall quality score\r\n    summary: string;\r\n  };\r\n  elementResults?: Map<number, ValidationResult>;\r\n  documentResult?: DocumentValidationResult;\r\n  recommendations: string[];\r\n  quickFixes: QuickFix[];\r\n}\r\n\r\n// Quick fix suggestions\r\nexport interface QuickFix {\r\n  type: 'add' | 'remove' | 'modify';\r\n  description: string;\r\n  property?: string;\r\n  suggestedValue?: any;\r\n  priority: 'high' | 'medium' | 'low';\r\n  automated: boolean; // Whether this fix can be applied automatically\r\n}\r\n\r\n/**\r\n * Main validation factory and orchestrator\r\n */\r\nexport class ValidationFactory {\r\n  private static presetConfigs: Record<ValidationPreset, DocumentValidationOptions> = {\r\n    strict: {\r\n      checkAccessibility: true,\r\n      checkPerformance: true,\r\n      checkCompliance: true,\r\n      targetCompliance: 'svg20',\r\n      maxElements: 5000,\r\n      maxNestingDepth: 15,\r\n      allowUnknownElements: false\r\n    },\r\n    standard: {\r\n      checkAccessibility: true,\r\n      checkPerformance: true,\r\n      checkCompliance: true,\r\n      targetCompliance: 'svg20',\r\n      maxElements: 10000,\r\n      maxNestingDepth: 20,\r\n      allowUnknownElements: true\r\n    },\r\n    minimal: {\r\n      checkAccessibility: false,\r\n      checkPerformance: false,\r\n      checkCompliance: false,\r\n      maxElements: 50000,\r\n      maxNestingDepth: 50,\r\n      allowUnknownElements: true\r\n    },\r\n    performance: {\r\n      checkAccessibility: false,\r\n      checkPerformance: true,\r\n      checkCompliance: false,\r\n      maxElements: 1000,\r\n      maxNestingDepth: 10,\r\n      allowUnknownElements: true\r\n    },\r\n    accessibility: {\r\n      checkAccessibility: true,\r\n      checkPerformance: false,\r\n      checkCompliance: true,\r\n      targetCompliance: 'svg20',\r\n      maxElements: 50000,\r\n      maxNestingDepth: 50,\r\n      allowUnknownElements: true\r\n    },\r\n    custom: {\r\n      // Default values - will be overridden by user config\r\n      checkAccessibility: true,\r\n      checkPerformance: true,\r\n      checkCompliance: true,\r\n      targetCompliance: 'svg20',\r\n      maxElements: 10000,\r\n      maxNestingDepth: 20,\r\n      allowUnknownElements: true\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Create a document validator with preset configuration\r\n   */\r\n  static createDocumentValidator(preset: ValidationPreset = 'standard'): DocumentValidator {\r\n    const options = { ...this.presetConfigs[preset] };\r\n    return new DocumentValidator(options);\r\n  }\r\n\r\n  /**\r\n   * Create a document validator with custom options\r\n   */\r\n  static createCustomDocumentValidator(options: DocumentValidationOptions): DocumentValidator {\r\n    return new DocumentValidator(options);\r\n  }\r\n\r\n  /**\r\n   * Validate a single SVG element\r\n   */\r\n  static validateElement(\r\n    element: SvgAnyElement, \r\n    context?: ValidationContext\r\n  ): ValidationResult {\r\n    return ElementValidatorFactory.validateElement(element, context);\r\n  }\r\n\r\n  /**\r\n   * Run a complete validation suite on an SVG document\r\n   */\r\n  static async validateDocument(\r\n    document: SvgDocument,\r\n    config: ValidationSuiteConfig = {}\r\n  ): Promise<ValidationSuiteResult> {\r\n    const {\r\n      preset = 'standard',\r\n      elementValidation = true,\r\n      documentValidation = true,\r\n      documentOptions\r\n    } = config;\r\n\r\n    // Get preset options and merge with custom options\r\n    const baseOptions = preset === 'custom' ? {} : this.presetConfigs[preset];\r\n    const finalOptions = { ...baseOptions, ...documentOptions };\r\n\r\n    const recommendations: string[] = [];\r\n    const quickFixes: QuickFix[] = [];\r\n    let elementResults: Map<number, ValidationResult> | undefined;\r\n    let documentResult: DocumentValidationResult | undefined;\r\n\r\n    // Element-level validation\r\n    if (elementValidation) {\r\n      elementResults = new Map();\r\n      \r\n      document.elements.forEach((element, index) => {\r\n        const context: ValidationContext = {\r\n          elementIndex: index,\r\n          siblingElements: document.elements,\r\n          documentIds: new Set(),\r\n          referencedIds: new Set()\r\n        };\r\n        \r\n        const result = ElementValidatorFactory.validateElement(element, context);\r\n        elementResults!.set(index, result);\r\n\r\n        // Generate quick fixes from element validation\r\n        result.suggestions.forEach(suggestion => {\r\n          const quickFix: any = {\r\n            type: 'modify',\r\n            description: suggestion.message,\r\n            priority: this.getSuggestionPriority(suggestion.code),\r\n            automated: this.isAutomatable(suggestion.code)\r\n          };\r\n          \r\n          if (suggestion.property !== undefined) quickFix.property = suggestion.property;\r\n          if ((suggestion as any).suggestedValue !== undefined) quickFix.suggestedValue = (suggestion as any).suggestedValue;\r\n          \r\n          quickFixes.push(quickFix);\r\n        });\r\n      });\r\n    }\r\n\r\n    // Document-level validation\r\n    if (documentValidation) {\r\n      const validator = new DocumentValidator(finalOptions);\r\n      documentResult = await validator.validateDocument(document);\r\n\r\n      // Extract recommendations from document validation\r\n      if (documentResult.accessibility.recommendations) {\r\n        recommendations.push(...documentResult.accessibility.recommendations);\r\n      }\r\n      if (documentResult.performance.optimizations) {\r\n        recommendations.push(...documentResult.performance.optimizations);\r\n      }\r\n      if (documentResult.compliance.recommendations) {\r\n        recommendations.push(...documentResult.compliance.recommendations);\r\n      }\r\n\r\n      // Generate quick fixes from document validation\r\n      documentResult.warnings.forEach(warning => {\r\n        quickFixes.push({\r\n          type: 'modify',\r\n          description: warning.message,\r\n          priority: 'medium',\r\n          automated: false\r\n        });\r\n      });\r\n    }\r\n\r\n    // Calculate overall results\r\n    const overall = this.calculateOverallResults(elementResults, documentResult, recommendations);\r\n\r\n    const result: any = {\r\n      overall,\r\n      recommendations: Array.from(new Set(recommendations)), // Remove duplicates\r\n      quickFixes\r\n    };\r\n    \r\n    if (elementResults !== undefined) result.elementResults = elementResults;\r\n    if (documentResult !== undefined) result.documentResult = documentResult;\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Quick validation for performance-critical scenarios\r\n   */\r\n  static quickValidate(document: SvgDocument): {\r\n    valid: boolean;\r\n    criticalIssues: string[];\r\n    elementCount: number;\r\n  } {\r\n    const criticalIssues: string[] = [];\r\n\r\n    // Basic structure checks\r\n    if (!document.viewBox) {\r\n      criticalIssues.push('Missing viewBox');\r\n    }\r\n\r\n    if (!document.elements || document.elements.length === 0) {\r\n      criticalIssues.push('No elements in document');\r\n    }\r\n\r\n    // Check for obviously invalid values\r\n    if (document.viewBox) {\r\n      if (document.viewBox.width <= 0 || document.viewBox.height <= 0) {\r\n        criticalIssues.push('Invalid viewBox dimensions');\r\n      }\r\n    }\r\n\r\n    // Basic element validation\r\n    let invalidElements = 0;\r\n    document.elements?.forEach(element => {\r\n      if (!element.type) {\r\n        invalidElements++;\r\n      }\r\n    });\r\n\r\n    if (invalidElements > 0) {\r\n      criticalIssues.push(`${invalidElements} elements missing type information`);\r\n    }\r\n\r\n    return {\r\n      valid: criticalIssues.length === 0,\r\n      criticalIssues,\r\n      elementCount: document.elements?.length || 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate and suggest automatic fixes\r\n   */\r\n  static async validateWithAutoFix(\r\n    document: SvgDocument,\r\n    preset: ValidationPreset = 'standard'\r\n  ): Promise<{\r\n    validationResult: ValidationSuiteResult;\r\n    autoFixedDocument?: SvgDocument;\r\n    appliedFixes: string[];\r\n  }> {\r\n    const validationResult = await this.validateDocument(document, { preset });\r\n    const appliedFixes: string[] = [];\r\n    let autoFixedDocument: SvgDocument | undefined;\r\n\r\n    // Apply automatic fixes\r\n    const automatableFixes = validationResult.quickFixes.filter(fix => fix.automated);\r\n    \r\n    if (automatableFixes.length > 0) {\r\n      autoFixedDocument = { ...document };\r\n      \r\n      for (const fix of automatableFixes) {\r\n        try {\r\n          this.applyFix(autoFixedDocument, fix);\r\n          appliedFixes.push(fix.description);\r\n        } catch (error) {\r\n          console.warn(`Failed to apply auto-fix: ${fix.description}`, error);\r\n        }\r\n      }\r\n    }\r\n\r\n    const result: any = {\r\n      validationResult,\r\n      appliedFixes\r\n    };\r\n    \r\n    if (autoFixedDocument !== undefined) result.autoFixedDocument = autoFixedDocument;\r\n\r\n    return result;\r\n  }\r\n\r\n  private static calculateOverallResults(\r\n    elementResults?: Map<number, ValidationResult>,\r\n    documentResult?: DocumentValidationResult,\r\n    _recommendations?: string[]\r\n  ): { valid: boolean; score: number; summary: string } {\r\n    let score = 100;\r\n    let totalErrors = 0;\r\n    let totalWarnings = 0;\r\n\r\n    // Factor in element validation results\r\n    if (elementResults) {\r\n      for (const result of elementResults.values()) {\r\n        totalErrors += result.errors.length;\r\n        totalWarnings += result.warnings.length;\r\n        score -= result.errors.length * 10; // 10 points per error\r\n        score -= result.warnings.length * 2; // 2 points per warning\r\n      }\r\n    }\r\n\r\n    // Factor in document validation results\r\n    if (documentResult) {\r\n      totalErrors += documentResult.errors.length;\r\n      totalWarnings += documentResult.warnings.length;\r\n      score -= documentResult.errors.length * 15; // Document errors are more serious\r\n      score -= documentResult.warnings.length * 3;\r\n\r\n      // Factor in specialized scores\r\n      if (documentResult.accessibility.score < 100) {\r\n        score -= (100 - documentResult.accessibility.score) * 0.2;\r\n      }\r\n      if (documentResult.performance.score < 100) {\r\n        score -= (100 - documentResult.performance.score) * 0.1;\r\n      }\r\n    }\r\n\r\n    score = Math.max(0, Math.min(100, score));\r\n\r\n    // Generate summary\r\n    let summary = '';\r\n    if (totalErrors === 0 && totalWarnings === 0) {\r\n      summary = 'Document is valid with no issues detected';\r\n    } else if (totalErrors === 0) {\r\n      summary = `Document is valid with ${totalWarnings} warning(s)`;\r\n    } else {\r\n      summary = `Document has ${totalErrors} error(s) and ${totalWarnings} warning(s)`;\r\n    }\r\n\r\n    return {\r\n      valid: totalErrors === 0,\r\n      score: Math.round(score),\r\n      summary\r\n    };\r\n  }\r\n\r\n  private static getSuggestionPriority(code: string): 'high' | 'medium' | 'low' {\r\n    const highPriority = ['MISSING_REQUIRED_ATTRIBUTE', 'INVALID_DIMENSION', 'NEGATIVE_DIMENSION'];\r\n    const lowPriority = ['STYLE_OPTIMIZATION', 'PERFORMANCE_SUGGESTION'];\r\n    \r\n    if (highPriority.some(hp => code.includes(hp))) return 'high';\r\n    if (lowPriority.some(lp => code.includes(lp))) return 'low';\r\n    return 'medium';\r\n  }\r\n\r\n  private static isAutomatable(code: string): boolean {\r\n    const automatable = [\r\n      'MISSING_TITLE',\r\n      'MISSING_DESCRIPTION',\r\n      'EMPTY_ATTRIBUTE',\r\n      'REDUNDANT_ATTRIBUTE'\r\n    ];\r\n    return automatable.some(auto => code.includes(auto));\r\n  }\r\n\r\n  private static applyFix(document: SvgDocument, fix: QuickFix): void {\r\n    // Simple auto-fix implementations\r\n    switch (fix.description) {\r\n      case 'Add a title for screen readers':\r\n        if (!document.title) {\r\n          document.title = 'SVG Document';\r\n        }\r\n        break;\r\n      case 'Add a description for better accessibility':\r\n        if (!document.description) {\r\n          document.description = 'An SVG graphic';\r\n        }\r\n        break;\r\n      // Add more auto-fix implementations as needed\r\n    }\r\n  }\r\n}\r\n\r\n// Convenience exports for common validation scenarios\r\nexport const SVGValidator = {\r\n  /**\r\n   * Quick validation for basic structure and critical errors\r\n   */\r\n  quick: (document: SvgDocument) => ValidationFactory.quickValidate(document),\r\n\r\n  /**\r\n   * Standard validation with balanced checks\r\n   */\r\n  standard: (document: SvgDocument) => ValidationFactory.validateDocument(document, { preset: 'standard' }),\r\n\r\n  /**\r\n   * Strict validation with all checks enabled\r\n   */\r\n  strict: (document: SvgDocument) => ValidationFactory.validateDocument(document, { preset: 'strict' }),\r\n\r\n  /**\r\n   * Performance-focused validation\r\n   */\r\n  performance: (document: SvgDocument) => ValidationFactory.validateDocument(document, { preset: 'performance' }),\r\n\r\n  /**\r\n   * Accessibility-focused validation\r\n   */\r\n  accessibility: (document: SvgDocument) => ValidationFactory.validateDocument(document, { preset: 'accessibility' }),\r\n\r\n  /**\r\n   * Validation with automatic fixes applied\r\n   */\r\n  withAutoFix: (document: SvgDocument, preset?: ValidationPreset) => \r\n    ValidationFactory.validateWithAutoFix(document, preset)\r\n};\r\n"],"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","ignoreList":[]}