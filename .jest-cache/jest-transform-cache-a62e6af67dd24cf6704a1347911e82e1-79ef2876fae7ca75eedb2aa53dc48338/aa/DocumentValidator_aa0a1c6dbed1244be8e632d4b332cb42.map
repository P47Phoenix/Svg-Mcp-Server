{"version":3,"names":["cov_i07i6o0cs","actualCoverage","ElementValidatorFactory","DocumentValidator","options","constructor","b","f","s","checkAccessibility","checkPerformance","checkCompliance","targetCompliance","maxElements","maxNestingDepth","allowUnknownElements","validateDocument","document","errors","warnings","suggestions","elementResults","Map","validateDocumentStructure","context","buildValidationContext","validateViewBox","viewBox","elements","forEach","element","index","elementContext","elementIndex","siblingElements","documentIds","referencedIds","result","validateElement","set","push","validateCrossElementReferences","validateIdUniqueness","documentStats","generateDocumentStats","compliance","generateComplianceReport","createEmptyComplianceReport","accessibility","generateAccessibilityReport","createEmptyAccessibilityReport","performance","generatePerformanceReport","createEmptyPerformanceReport","valid","length","code","message","severity","value","title","description","Set","collectIds","id","add","clipPath","extractIdFromUrl","mask","type","children","url","match","width","property","height","aspectRatio","_document","referencedId","has","documentId","seenIds","duplicates","duplicateId","elementTypes","analyzeElement","depth","Math","max","count","get","child","duplicateIds","unreferencedIds","missingReferences","estimatedBytes","JSON","stringify","complexity","totalElements","totalIds","size","documentSize","standard","violations","recommendations","rule","some","el","filter","version","compliant","v","score","colorContrastIssues","textSizeIssues","hasTitle","hasDescription","hasAriaLabels","style","textElements","textEl","fontSize","recommended","stats","issues","optimizations","renderComplexity","impact","memoryEstimate"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\core\\validation\\DocumentValidator.ts"],"sourcesContent":["/**\r\n * SVG Document Validator\r\n * \r\n * Comprehensive document-level validation including cross-element validation,\r\n * structural integrity, accessibility compliance, and performance analysis.\r\n */\r\n\r\nimport { \r\n  SvgDocument, \r\n  SvgAnyElement, \r\n  ViewBox\r\n} from '../../types/svg.js';\r\nimport { \r\n  ElementValidatorFactory, \r\n  ValidationResult, \r\n  ValidationError, \r\n  ValidationWarning, \r\n  ValidationSuggestion,\r\n  ValidationContext \r\n} from './ElementValidators.js';\r\n\r\n// Document validation options\r\nexport interface DocumentValidationOptions {\r\n  checkAccessibility?: boolean;\r\n  checkPerformance?: boolean;\r\n  checkCompliance?: boolean;\r\n  targetCompliance?: 'svg11' | 'svg20' | 'svg21';\r\n  maxElements?: number;\r\n  maxNestingDepth?: number;\r\n  allowUnknownElements?: boolean;\r\n}\r\n\r\n// Document validation result\r\nexport interface DocumentValidationResult extends ValidationResult {\r\n  elementResults: Map<number, ValidationResult>;\r\n  documentStats: DocumentStats;\r\n  compliance: ComplianceReport;\r\n  accessibility: AccessibilityReport;\r\n  performance: PerformanceReport;\r\n}\r\n\r\n// Document statistics\r\nexport interface DocumentStats {\r\n  totalElements: number;\r\n  elementTypes: Map<string, number>;\r\n  maxNestingDepth: number;\r\n  totalIds: number;\r\n  duplicateIds: string[];\r\n  unreferencedIds: string[];\r\n  missingReferences: string[];\r\n  documentSize: {\r\n    estimatedBytes: number;\r\n    complexity: 'low' | 'medium' | 'high' | 'extreme';\r\n  };\r\n}\r\n\r\n// Compliance report\r\nexport interface ComplianceReport {\r\n  standard: string;\r\n  version: string;\r\n  compliant: boolean;\r\n  violations: ComplianceViolation[];\r\n  recommendations: string[];\r\n}\r\n\r\nexport interface ComplianceViolation {\r\n  rule: string;\r\n  description: string;\r\n  elements: SvgAnyElement[];\r\n  severity: 'error' | 'warning';\r\n}\r\n\r\n// Accessibility report\r\nexport interface AccessibilityReport {\r\n  score: number; // 0-100\r\n  hasTitle: boolean;\r\n  hasDescription: boolean;\r\n  hasAriaLabels: boolean;\r\n  colorContrastIssues: ColorContrastIssue[];\r\n  textSizeIssues: TextSizeIssue[];\r\n  recommendations: string[];\r\n}\r\n\r\nexport interface ColorContrastIssue {\r\n  element: SvgAnyElement;\r\n  foreground: string;\r\n  background: string;\r\n  ratio: number;\r\n  minimumRequired: number;\r\n}\r\n\r\nexport interface TextSizeIssue {\r\n  element: SvgAnyElement;\r\n  fontSize: number;\r\n  recommended: number;\r\n}\r\n\r\n// Performance report\r\nexport interface PerformanceReport {\r\n  score: number; // 0-100\r\n  renderComplexity: number;\r\n  memoryEstimate: number; // in KB\r\n  issues: PerformanceIssue[];\r\n  optimizations: string[];\r\n}\r\n\r\nexport interface PerformanceIssue {\r\n  type: 'complexity' | 'size' | 'nesting' | 'redundancy';\r\n  description: string;\r\n  impact: 'low' | 'medium' | 'high';\r\n  elements?: SvgAnyElement[];\r\n}\r\n\r\n/**\r\n * SVG Document Validator\r\n */\r\nexport class DocumentValidator {\r\n  private options: DocumentValidationOptions;\r\n\r\n  constructor(options: DocumentValidationOptions = {}) {\r\n    this.options = {\r\n      checkAccessibility: true,\r\n      checkPerformance: true,\r\n      checkCompliance: true,\r\n      targetCompliance: 'svg20',\r\n      maxElements: 10000,\r\n      maxNestingDepth: 20,\r\n      allowUnknownElements: false,\r\n      ...options\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate an entire SVG document\r\n   */\r\n  async validateDocument(document: SvgDocument): Promise<DocumentValidationResult> {\r\n    const errors: ValidationError[] = [];\r\n    const warnings: ValidationWarning[] = [];\r\n    const suggestions: ValidationSuggestion[] = [];\r\n    const elementResults = new Map<number, ValidationResult>();\r\n\r\n    // Validate document structure\r\n    this.validateDocumentStructure(document, errors, warnings);\r\n\r\n    // Build validation context\r\n    const context = this.buildValidationContext(document);\r\n\r\n    // Validate ViewBox\r\n    this.validateViewBox(document.viewBox, errors, warnings);\r\n\r\n    // Validate individual elements\r\n    document.elements.forEach((element, index) => {\r\n      const elementContext: ValidationContext = {\r\n        elementIndex: index,\r\n        siblingElements: document.elements,\r\n        documentIds: context.documentIds,\r\n        referencedIds: context.referencedIds\r\n      };\r\n\r\n      const result = ElementValidatorFactory.validateElement(element, elementContext);\r\n      elementResults.set(index, result);\r\n\r\n      // Aggregate errors, warnings, and suggestions\r\n      errors.push(...result.errors);\r\n      warnings.push(...result.warnings);\r\n      suggestions.push(...result.suggestions);\r\n    });\r\n\r\n    // Cross-element validation\r\n    this.validateCrossElementReferences(document, context, errors, warnings);\r\n    this.validateIdUniqueness(context, errors);\r\n\r\n    // Generate reports\r\n    const documentStats = this.generateDocumentStats(document, context);\r\n    const compliance = this.options.checkCompliance ? \r\n      await this.generateComplianceReport(document, this.options.targetCompliance!) : \r\n      this.createEmptyComplianceReport();\r\n    const accessibility = this.options.checkAccessibility ? \r\n      this.generateAccessibilityReport(document) : \r\n      this.createEmptyAccessibilityReport();\r\n    const performance = this.options.checkPerformance ? \r\n      this.generatePerformanceReport(document, documentStats) : \r\n      this.createEmptyPerformanceReport();\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      warnings,\r\n      suggestions,\r\n      elementResults,\r\n      documentStats,\r\n      compliance,\r\n      accessibility,\r\n      performance\r\n    };\r\n  }\r\n\r\n  private validateDocumentStructure(document: SvgDocument, errors: ValidationError[], warnings: ValidationWarning[]): void {\r\n    // Check required properties\r\n    if (!document.viewBox) {\r\n      errors.push({\r\n        code: 'MISSING_VIEWBOX',\r\n        message: 'Document must have a viewBox',\r\n        severity: 'error'\r\n      });\r\n    }\r\n\r\n    if (!document.elements || document.elements.length === 0) {\r\n      warnings.push({\r\n        code: 'EMPTY_DOCUMENT',\r\n        message: 'Document has no elements',\r\n        severity: 'warning'\r\n      });\r\n    }\r\n\r\n    // Check element limits\r\n    if (document.elements && document.elements.length > this.options.maxElements!) {\r\n      errors.push({\r\n        code: 'TOO_MANY_ELEMENTS',\r\n        message: `Document exceeds maximum element limit of ${this.options.maxElements}`,\r\n        severity: 'error',\r\n        value: document.elements.length\r\n      });\r\n    }\r\n\r\n    // Check for accessibility metadata\r\n    if (!document.title && !document.description) {\r\n      warnings.push({\r\n        code: 'MISSING_ACCESSIBILITY_METADATA',\r\n        message: 'Document should have a title or description for accessibility',\r\n        severity: 'warning'\r\n      });\r\n    }\r\n  }\r\n\r\n  private buildValidationContext(document: SvgDocument): {\r\n    documentIds: Set<string>;\r\n    referencedIds: Set<string>;\r\n  } {\r\n    const documentIds = new Set<string>();\r\n    const referencedIds = new Set<string>();\r\n\r\n    // Collect all IDs and references\r\n    const collectIds = (element: SvgAnyElement) => {\r\n      if (element.id) {\r\n        documentIds.add(element.id);\r\n      }\r\n\r\n      // Collect referenced IDs from various attributes\r\n      if (element.clipPath) {\r\n        const id = this.extractIdFromUrl(element.clipPath);\r\n        if (id) referencedIds.add(id);\r\n      }\r\n\r\n      if (element.mask) {\r\n        const id = this.extractIdFromUrl(element.mask);\r\n        if (id) referencedIds.add(id);\r\n      }\r\n\r\n      // Recurse into group children\r\n      if (element.type === 'group') {\r\n        element.children.forEach(collectIds);\r\n      }\r\n    };\r\n\r\n    document.elements.forEach(collectIds);\r\n\r\n    return { documentIds, referencedIds };\r\n  }\r\n\r\n  private extractIdFromUrl(url: string): string | null {\r\n    const match = url.match(/url\\(#([^)]+)\\)/);\r\n    return match?.[1] ?? null;\r\n  }\r\n\r\n  private validateViewBox(viewBox: ViewBox, errors: ValidationError[], warnings: ValidationWarning[]): void {\r\n    if (viewBox.width <= 0) {\r\n      errors.push({\r\n        code: 'INVALID_VIEWBOX_WIDTH',\r\n        message: 'ViewBox width must be positive',\r\n        severity: 'error',\r\n        property: 'viewBox.width',\r\n        value: viewBox.width\r\n      });\r\n    }\r\n\r\n    if (viewBox.height <= 0) {\r\n      errors.push({\r\n        code: 'INVALID_VIEWBOX_HEIGHT',\r\n        message: 'ViewBox height must be positive',\r\n        severity: 'error',\r\n        property: 'viewBox.height',\r\n        value: viewBox.height\r\n      });\r\n    }\r\n\r\n    if (viewBox.width > 100000 || viewBox.height > 100000) {\r\n      warnings.push({\r\n        code: 'VERY_LARGE_VIEWBOX',\r\n        message: 'Very large viewBox dimensions may impact performance',\r\n        severity: 'warning',\r\n        property: 'viewBox',\r\n        value: viewBox\r\n      });\r\n    }\r\n\r\n    const aspectRatio = viewBox.width / viewBox.height;\r\n    if (aspectRatio > 100 || aspectRatio < 0.01) {\r\n      warnings.push({\r\n        code: 'EXTREME_ASPECT_RATIO',\r\n        message: 'Extreme aspect ratio may cause rendering issues',\r\n        severity: 'warning',\r\n        property: 'viewBox',\r\n        value: aspectRatio\r\n      });\r\n    }\r\n  }\r\n\r\n  private validateCrossElementReferences(\r\n    _document: SvgDocument, \r\n    context: { documentIds: Set<string>; referencedIds: Set<string> }, \r\n    errors: ValidationError[], \r\n    warnings: ValidationWarning[]\r\n  ): void {\r\n    // Check for missing references\r\n    for (const referencedId of context.referencedIds) {\r\n      if (!context.documentIds.has(referencedId)) {\r\n        errors.push({\r\n          code: 'MISSING_REFERENCE',\r\n          message: `Referenced ID '${referencedId}' not found in document`,\r\n          severity: 'error',\r\n          value: referencedId\r\n        });\r\n      }\r\n    }\r\n\r\n    // Check for unreferenced IDs (potential cleanup opportunity)\r\n    for (const documentId of context.documentIds) {\r\n      if (!context.referencedIds.has(documentId)) {\r\n        warnings.push({\r\n          code: 'UNREFERENCED_ID',\r\n          message: `ID '${documentId}' is defined but never referenced`,\r\n          severity: 'warning',\r\n          value: documentId\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateIdUniqueness(\r\n    context: { documentIds: Set<string>; referencedIds: Set<string> }, \r\n    errors: ValidationError[]\r\n  ): void {\r\n    const seenIds = new Set<string>();\r\n    const duplicates = new Set<string>();\r\n\r\n    // This is a simplified check - in practice, you'd track which elements have duplicate IDs\r\n    for (const id of context.documentIds) {\r\n      if (seenIds.has(id)) {\r\n        duplicates.add(id);\r\n      } else {\r\n        seenIds.add(id);\r\n      }\r\n    }\r\n\r\n    for (const duplicateId of duplicates) {\r\n      errors.push({\r\n        code: 'DUPLICATE_ID',\r\n        message: `Duplicate ID found: '${duplicateId}'`,\r\n        severity: 'error',\r\n        value: duplicateId\r\n      });\r\n    }\r\n  }\r\n\r\n  private generateDocumentStats(document: SvgDocument, context: {\r\n    documentIds: Set<string>;\r\n    referencedIds: Set<string>;\r\n  }): DocumentStats {\r\n    const elementTypes = new Map<string, number>();\r\n    let maxNestingDepth = 0;\r\n\r\n    const analyzeElement = (element: SvgAnyElement, depth: number = 0) => {\r\n      maxNestingDepth = Math.max(maxNestingDepth, depth);\r\n      \r\n      const count = elementTypes.get(element.type) || 0;\r\n      elementTypes.set(element.type, count + 1);\r\n\r\n      if (element.type === 'group') {\r\n        element.children.forEach(child => analyzeElement(child, depth + 1));\r\n      }\r\n    };\r\n\r\n    document.elements.forEach(element => analyzeElement(element));\r\n\r\n    const duplicateIds: string[] = [];\r\n    const unreferencedIds: string[] = [];\r\n    const missingReferences: string[] = [];\r\n\r\n    // Calculate unreferenced IDs\r\n    for (const id of context.documentIds) {\r\n      if (!context.referencedIds.has(id)) {\r\n        unreferencedIds.push(id);\r\n      }\r\n    }\r\n\r\n    // Calculate missing references\r\n    for (const id of context.referencedIds) {\r\n      if (!context.documentIds.has(id)) {\r\n        missingReferences.push(id);\r\n      }\r\n    }\r\n\r\n    // Estimate document size and complexity\r\n    const estimatedBytes = JSON.stringify(document).length;\r\n    let complexity: 'low' | 'medium' | 'high' | 'extreme';\r\n    \r\n    if (document.elements.length < 10 && maxNestingDepth < 3) {\r\n      complexity = 'low';\r\n    } else if (document.elements.length < 100 && maxNestingDepth < 6) {\r\n      complexity = 'medium';\r\n    } else if (document.elements.length < 1000 && maxNestingDepth < 10) {\r\n      complexity = 'high';\r\n    } else {\r\n      complexity = 'extreme';\r\n    }\r\n\r\n    return {\r\n      totalElements: document.elements.length,\r\n      elementTypes,\r\n      maxNestingDepth,\r\n      totalIds: context.documentIds.size,\r\n      duplicateIds,\r\n      unreferencedIds,\r\n      missingReferences,\r\n      documentSize: {\r\n        estimatedBytes,\r\n        complexity\r\n      }\r\n    };\r\n  }\r\n\r\n  private async generateComplianceReport(document: SvgDocument, standard: string): Promise<ComplianceReport> {\r\n    const violations: ComplianceViolation[] = [];\r\n    const recommendations: string[] = [];\r\n\r\n    // SVG 2.0 compliance checks (simplified)\r\n    if (standard === 'svg20') {\r\n      // Check for deprecated elements or attributes\r\n      // Check for required attributes\r\n      // Check for proper nesting rules\r\n      \r\n      // Example checks:\r\n      if (!document.viewBox) {\r\n        violations.push({\r\n          rule: 'SVG2.0-VIEWBOX-REQUIRED',\r\n          description: 'ViewBox is recommended for SVG 2.0 documents',\r\n          elements: [],\r\n          severity: 'warning'\r\n        });\r\n      }\r\n\r\n      if (document.elements.some(el => el.type === 'group' && (!el.children || el.children.length === 0))) {\r\n        violations.push({\r\n          rule: 'SVG2.0-EMPTY-GROUPS',\r\n          description: 'Empty group elements should be avoided',\r\n          elements: document.elements.filter(el => el.type === 'group' && (!el.children || el.children.length === 0)),\r\n          severity: 'warning'\r\n        });\r\n      }\r\n\r\n      recommendations.push('Consider adding accessibility metadata (title, description)');\r\n      recommendations.push('Use semantic grouping with meaningful IDs');\r\n    }\r\n\r\n    return {\r\n      standard: 'SVG',\r\n      version: standard,\r\n      compliant: violations.filter(v => v.severity === 'error').length === 0,\r\n      violations,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  private generateAccessibilityReport(document: SvgDocument): AccessibilityReport {\r\n    let score = 100;\r\n    const colorContrastIssues: ColorContrastIssue[] = [];\r\n    const textSizeIssues: TextSizeIssue[] = [];\r\n    const recommendations: string[] = [];\r\n\r\n    // Check for accessibility metadata\r\n    const hasTitle = !!document.title;\r\n    const hasDescription = !!document.description;\r\n    \r\n    if (!hasTitle) {\r\n      score -= 20;\r\n      recommendations.push('Add a title for screen readers');\r\n    }\r\n    \r\n    if (!hasDescription) {\r\n      score -= 15;\r\n      recommendations.push('Add a description for better accessibility');\r\n    }\r\n\r\n    // Check for aria labels (simplified)\r\n    const hasAriaLabels = document.elements.some(el => \r\n      el.style && 'aria-label' in (el.style as any)\r\n    );\r\n\r\n    if (!hasAriaLabels) {\r\n      score -= 10;\r\n      recommendations.push('Consider adding aria-label attributes to important elements');\r\n    }\r\n\r\n    // Check text sizes\r\n    const textElements = document.elements.filter(el => el.type === 'text') as any[];\r\n    textElements.forEach(textEl => {\r\n      const fontSize = textEl.style?.fontSize || 16;\r\n      if (fontSize < 12) {\r\n        textSizeIssues.push({\r\n          element: textEl,\r\n          fontSize,\r\n          recommended: 12\r\n        });\r\n        score -= 5;\r\n      }\r\n    });\r\n\r\n    if (textSizeIssues.length > 0) {\r\n      recommendations.push('Increase font sizes for better readability');\r\n    }\r\n\r\n    return {\r\n      score: Math.max(0, score),\r\n      hasTitle,\r\n      hasDescription,\r\n      hasAriaLabels,\r\n      colorContrastIssues,\r\n      textSizeIssues,\r\n      recommendations\r\n    };\r\n  }\r\n\r\n  private generatePerformanceReport(document: SvgDocument, stats: DocumentStats): PerformanceReport {\r\n    let score = 100;\r\n    const issues: PerformanceIssue[] = [];\r\n    const optimizations: string[] = [];\r\n\r\n    // Analyze complexity\r\n    let renderComplexity = 0;\r\n    document.elements.forEach(element => {\r\n      switch (element.type) {\r\n        case 'circle':\r\n        case 'rect':\r\n        case 'line':\r\n          renderComplexity += 1;\r\n          break;\r\n        case 'path':\r\n          renderComplexity += 3;\r\n          break;\r\n        case 'text':\r\n          renderComplexity += 2;\r\n          break;\r\n        case 'group':\r\n          renderComplexity += 0.5;\r\n          break;\r\n      }\r\n    });\r\n\r\n    // Check for performance issues\r\n    if (stats.totalElements > 1000) {\r\n      issues.push({\r\n        type: 'complexity',\r\n        description: 'Document has many elements',\r\n        impact: 'high'\r\n      });\r\n      score -= 30;\r\n      optimizations.push('Consider grouping similar elements or using patterns');\r\n    }\r\n\r\n    if (stats.maxNestingDepth > 10) {\r\n      issues.push({\r\n        type: 'nesting',\r\n        description: 'Deep element nesting detected',\r\n        impact: 'medium'\r\n      });\r\n      score -= 15;\r\n      optimizations.push('Flatten deeply nested structures where possible');\r\n    }\r\n\r\n    if (stats.documentSize.estimatedBytes > 1000000) { // 1MB\r\n      issues.push({\r\n        type: 'size',\r\n        description: 'Document is very large',\r\n        impact: 'high'\r\n      });\r\n      score -= 25;\r\n      optimizations.push('Consider optimizing path data and removing unused elements');\r\n    }\r\n\r\n    // Estimate memory usage (simplified)\r\n    const memoryEstimate = Math.max(1, stats.documentSize.estimatedBytes / 1024); // KB\r\n\r\n    return {\r\n      score: Math.max(0, score),\r\n      renderComplexity,\r\n      memoryEstimate,\r\n      issues,\r\n      optimizations\r\n    };\r\n  }\r\n\r\n  private createEmptyComplianceReport(): ComplianceReport {\r\n    return {\r\n      standard: 'N/A',\r\n      version: 'N/A',\r\n      compliant: true,\r\n      violations: [],\r\n      recommendations: []\r\n    };\r\n  }\r\n\r\n  private createEmptyAccessibilityReport(): AccessibilityReport {\r\n    return {\r\n      score: 0,\r\n      hasTitle: false,\r\n      hasDescription: false,\r\n      hasAriaLabels: false,\r\n      colorContrastIssues: [],\r\n      textSizeIssues: [],\r\n      recommendations: []\r\n    };\r\n  }\r\n\r\n  private createEmptyPerformanceReport(): PerformanceReport {\r\n    return {\r\n      score: 0,\r\n      renderComplexity: 0,\r\n      memoryEstimate: 0,\r\n      issues: [],\r\n      optimizations: []\r\n    };\r\n  }\r\n}\r\n"],"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","ignoreList":[]}