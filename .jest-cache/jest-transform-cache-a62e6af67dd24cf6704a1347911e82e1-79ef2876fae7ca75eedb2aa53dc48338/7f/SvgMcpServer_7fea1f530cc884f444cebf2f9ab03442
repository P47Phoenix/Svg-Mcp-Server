ad343b3bf53f0b7207d56ad0ebc02a04
/* istanbul ignore next */
function cov_1ktf0pjl7m() {
  var path = "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts";
  var hash = "9fa5c4c4b6d0b37a5b9c4416529a570575016ce0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 8
        },
        end: {
          line: 19,
          column: 11
        }
      },
      "1": {
        start: {
          line: 20,
          column: 8
        },
        end: {
          line: 25,
          column: 10
        }
      },
      "2": {
        start: {
          line: 26,
          column: 8
        },
        end: {
          line: 26,
          column: 45
        }
      },
      "3": {
        start: {
          line: 27,
          column: 8
        },
        end: {
          line: 29,
          column: 9
        }
      },
      "4": {
        start: {
          line: 28,
          column: 12
        },
        end: {
          line: 28,
          column: 40
        }
      },
      "5": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 26
        }
      },
      "6": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 30
        }
      },
      "7": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 101,
          column: 11
        }
      },
      "8": {
        start: {
          line: 57,
          column: 71
        },
        end: {
          line: 57,
          column: 75
        }
      },
      "9": {
        start: {
          line: 58,
          column: 16
        },
        end: {
          line: 99,
          column: 17
        }
      },
      "10": {
        start: {
          line: 59,
          column: 20
        },
        end: {
          line: 59,
          column: 94
        }
      },
      "11": {
        start: {
          line: 61,
          column: 20
        },
        end: {
          line: 63,
          column: 21
        }
      },
      "12": {
        start: {
          line: 62,
          column: 24
        },
        end: {
          line: 62,
          column: 65
        }
      },
      "13": {
        start: {
          line: 65,
          column: 32
        },
        end: {
          line: 68,
          column: 22
        }
      },
      "14": {
        start: {
          line: 70,
          column: 20
        },
        end: {
          line: 72,
          column: 21
        }
      },
      "15": {
        start: {
          line: 71,
          column: 24
        },
        end: {
          line: 71,
          column: 137
        }
      },
      "16": {
        start: {
          line: 73,
          column: 20
        },
        end: {
          line: 76,
          column: 23
        }
      },
      "17": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 91,
          column: 22
        }
      },
      "18": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 94,
          column: 66
        }
      },
      "19": {
        start: {
          line: 95,
          column: 20
        },
        end: {
          line: 97,
          column: 21
        }
      },
      "20": {
        start: {
          line: 96,
          column: 24
        },
        end: {
          line: 96,
          column: 36
        }
      },
      "21": {
        start: {
          line: 98,
          column: 20
        },
        end: {
          line: 98,
          column: 122
        }
      },
      "22": {
        start: {
          line: 103,
          column: 8
        },
        end: {
          line: 135,
          column: 11
        }
      },
      "23": {
        start: {
          line: 118,
          column: 37
        },
        end: {
          line: 118,
          column: 41
        }
      },
      "24": {
        start: {
          line: 119,
          column: 16
        },
        end: {
          line: 133,
          column: 17
        }
      },
      "25": {
        start: {
          line: 120,
          column: 20
        },
        end: {
          line: 120,
          column: 74
        }
      },
      "26": {
        start: {
          line: 121,
          column: 45
        },
        end: {
          line: 121,
          column: 85
        }
      },
      "27": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 87
        }
      },
      "28": {
        start: {
          line: 123,
          column: 20
        },
        end: {
          line: 128,
          column: 22
        }
      },
      "29": {
        start: {
          line: 131,
          column: 20
        },
        end: {
          line: 131,
          column: 74
        }
      },
      "30": {
        start: {
          line: 132,
          column: 20
        },
        end: {
          line: 132,
          column: 32
        }
      },
      "31": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 162,
          column: 11
        }
      },
      "32": {
        start: {
          line: 141,
          column: 31
        },
        end: {
          line: 153,
          column: 17
        }
      },
      "33": {
        start: {
          line: 154,
          column: 16
        },
        end: {
          line: 154,
          column: 63
        }
      },
      "34": {
        start: {
          line: 155,
          column: 16
        },
        end: {
          line: 160,
          column: 18
        }
      },
      "35": {
        start: {
          line: 166,
          column: 8
        },
        end: {
          line: 194,
          column: 11
        }
      },
      "36": {
        start: {
          line: 172,
          column: 29
        },
        end: {
          line: 186,
          column: 17
        }
      },
      "37": {
        start: {
          line: 187,
          column: 16
        },
        end: {
          line: 187,
          column: 60
        }
      },
      "38": {
        start: {
          line: 188,
          column: 16
        },
        end: {
          line: 192,
          column: 18
        }
      },
      "39": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 245,
          column: 11
        }
      },
      "40": {
        start: {
          line: 202,
          column: 31
        },
        end: {
          line: 238,
          column: 17
        }
      },
      "41": {
        start: {
          line: 239,
          column: 16
        },
        end: {
          line: 243,
          column: 18
        }
      },
      "42": {
        start: {
          line: 248,
          column: 23
        },
        end: {
          line: 248,
          column: 25
        }
      },
      "43": {
        start: {
          line: 249,
          column: 25
        },
        end: {
          line: 249,
          column: 27
        }
      },
      "44": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 278,
          column: 9
        }
      },
      "45": {
        start: {
          line: 252,
          column: 12
        },
        end: {
          line: 252,
          column: 50
        }
      },
      "46": {
        start: {
          line: 253,
          column: 12
        },
        end: {
          line: 255,
          column: 13
        }
      },
      "47": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 75
        }
      },
      "48": {
        start: {
          line: 257,
          column: 12
        },
        end: {
          line: 259,
          column: 13
        }
      },
      "49": {
        start: {
          line: 258,
          column: 16
        },
        end: {
          line: 258,
          column: 63
        }
      },
      "50": {
        start: {
          line: 261,
          column: 12
        },
        end: {
          line: 265,
          column: 15
        }
      },
      "51": {
        start: {
          line: 262,
          column: 16
        },
        end: {
          line: 264,
          column: 17
        }
      },
      "52": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 86
        }
      },
      "53": {
        start: {
          line: 267,
          column: 12
        },
        end: {
          line: 269,
          column: 13
        }
      },
      "54": {
        start: {
          line: 268,
          column: 16
        },
        end: {
          line: 268,
          column: 108
        }
      },
      "55": {
        start: {
          line: 272,
          column: 12
        },
        end: {
          line: 277,
          column: 13
        }
      },
      "56": {
        start: {
          line: 273,
          column: 16
        },
        end: {
          line: 273,
          column: 91
        }
      },
      "57": {
        start: {
          line: 273,
          column: 53
        },
        end: {
          line: 273,
          column: 88
        }
      },
      "58": {
        start: {
          line: 276,
          column: 16
        },
        end: {
          line: 276,
          column: 109
        }
      },
      "59": {
        start: {
          line: 279,
          column: 22
        },
        end: {
          line: 279,
          column: 41
        }
      },
      "60": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 282,
          column: 9
        }
      },
      "61": {
        start: {
          line: 281,
          column: 12
        },
        end: {
          line: 281,
          column: 97
        }
      },
      "62": {
        start: {
          line: 283,
          column: 8
        },
        end: {
          line: 283,
          column: 43
        }
      },
      "63": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 289,
          column: 11
        }
      },
      "64": {
        start: {
          line: 290,
          column: 8
        },
        end: {
          line: 290,
          column: 28
        }
      },
      "65": {
        start: {
          line: 291,
          column: 8
        },
        end: {
          line: 291,
          column: 59
        }
      },
      "66": {
        start: {
          line: 294,
          column: 8
        },
        end: {
          line: 294,
          column: 47
        }
      },
      "67": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        loc: {
          start: {
            line: 15,
            column: 24
          },
          end: {
            line: 32,
            column: 5
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        loc: {
          start: {
            line: 33,
            column: 17
          },
          end: {
            line: 163,
            column: 5
          }
        },
        line: 33
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 56,
            column: 21
          },
          end: {
            line: 56,
            column: 22
          }
        },
        loc: {
          start: {
            line: 56,
            column: 37
          },
          end: {
            line: 100,
            column: 13
          }
        },
        line: 56
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 117,
            column: 21
          },
          end: {
            line: 117,
            column: 22
          }
        },
        loc: {
          start: {
            line: 117,
            column: 37
          },
          end: {
            line: 134,
            column: 13
          }
        },
        line: 117
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 140,
            column: 21
          },
          end: {
            line: 140,
            column: 22
          }
        },
        loc: {
          start: {
            line: 140,
            column: 33
          },
          end: {
            line: 161,
            column: 13
          }
        },
        line: 140
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 164,
            column: 4
          },
          end: {
            line: 164,
            column: 5
          }
        },
        loc: {
          start: {
            line: 164,
            column: 21
          },
          end: {
            line: 246,
            column: 5
          }
        },
        line: 164
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 171,
            column: 18
          },
          end: {
            line: 171,
            column: 19
          }
        },
        loc: {
          start: {
            line: 171,
            column: 30
          },
          end: {
            line: 193,
            column: 13
          }
        },
        line: 171
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 201,
            column: 18
          },
          end: {
            line: 201,
            column: 19
          }
        },
        loc: {
          start: {
            line: 201,
            column: 30
          },
          end: {
            line: 244,
            column: 13
          }
        },
        line: 201
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        loc: {
          start: {
            line: 247,
            column: 40
          },
          end: {
            line: 284,
            column: 5
          }
        },
        line: 247
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 261,
            column: 38
          },
          end: {
            line: 261,
            column: 39
          }
        },
        loc: {
          start: {
            line: 261,
            column: 58
          },
          end: {
            line: 265,
            column: 13
          }
        },
        line: 261
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 273,
            column: 48
          },
          end: {
            line: 273,
            column: 49
          }
        },
        loc: {
          start: {
            line: 273,
            column: 53
          },
          end: {
            line: 273,
            column: 88
          }
        },
        line: 273
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 285,
            column: 4
          },
          end: {
            line: 285,
            column: 5
          }
        },
        loc: {
          start: {
            line: 285,
            column: 18
          },
          end: {
            line: 292,
            column: 5
          }
        },
        line: 285
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 293,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        loc: {
          start: {
            line: 293,
            column: 17
          },
          end: {
            line: 297,
            column: 5
          }
        },
        line: 293
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 22,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 25
          },
          end: {
            line: 22,
            column: 43
          }
        }, {
          start: {
            line: 22,
            column: 47
          },
          end: {
            line: 22,
            column: 63
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 23,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 23,
            column: 24
          },
          end: {
            line: 23,
            column: 41
          }
        }, {
          start: {
            line: 23,
            column: 45
          },
          end: {
            line: 23,
            column: 50
          }
        }],
        line: 23
      },
      "2": {
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 43
          }
        }, {
          start: {
            line: 24,
            column: 47
          },
          end: {
            line: 24,
            column: 52
          }
        }],
        line: 24
      },
      "3": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 29,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "4": {
        loc: {
          start: {
            line: 57,
            column: 34
          },
          end: {
            line: 57,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 45
          },
          end: {
            line: 57,
            column: 49
          }
        }],
        line: 57
      },
      "5": {
        loc: {
          start: {
            line: 57,
            column: 51
          },
          end: {
            line: 57,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 57,
            column: 62
          },
          end: {
            line: 57,
            column: 66
          }
        }],
        line: 57
      },
      "6": {
        loc: {
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 20
          },
          end: {
            line: 63,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "7": {
        loc: {
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 72,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 70,
            column: 20
          },
          end: {
            line: 72,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 70
      },
      "8": {
        loc: {
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 20
          },
          end: {
            line: 97,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "9": {
        loc: {
          start: {
            line: 98,
            column: 62
          },
          end: {
            line: 98,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 98,
            column: 87
          },
          end: {
            line: 98,
            column: 100
          }
        }, {
          start: {
            line: 98,
            column: 103
          },
          end: {
            line: 98,
            column: 118
          }
        }],
        line: 98
      },
      "10": {
        loc: {
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 253,
            column: 12
          },
          end: {
            line: 255,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 253
      },
      "11": {
        loc: {
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 75
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 253,
            column: 16
          },
          end: {
            line: 253,
            column: 43
          }
        }, {
          start: {
            line: 253,
            column: 47
          },
          end: {
            line: 253,
            column: 75
          }
        }],
        line: 253
      },
      "12": {
        loc: {
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 257,
            column: 12
          },
          end: {
            line: 259,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 257
      },
      "13": {
        loc: {
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 257,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 257,
            column: 16
          },
          end: {
            line: 257,
            column: 34
          }
        }, {
          start: {
            line: 257,
            column: 38
          },
          end: {
            line: 257,
            column: 68
          }
        }],
        line: 257
      },
      "14": {
        loc: {
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 262,
            column: 16
          },
          end: {
            line: 264,
            column: 17
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 262
      },
      "15": {
        loc: {
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 12
          },
          end: {
            line: 269,
            column: 13
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "16": {
        loc: {
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 12
          },
          end: {
            line: 277,
            column: 13
          }
        }, {
          start: {
            line: 275,
            column: 17
          },
          end: {
            line: 277,
            column: 13
          }
        }],
        line: 272
      },
      "17": {
        loc: {
          start: {
            line: 276,
            column: 49
          },
          end: {
            line: 276,
            column: 105
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 276,
            column: 74
          },
          end: {
            line: 276,
            column: 87
          }
        }, {
          start: {
            line: 276,
            column: 90
          },
          end: {
            line: 276,
            column: 105
          }
        }],
        line: 276
      },
      "18": {
        loc: {
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 280,
            column: 8
          },
          end: {
            line: 282,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 280
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts"],
      sourcesContent: ["/**\r\n * SVG MCP Server Implementation\r\n * \r\n * This is the main server class that extends FastMCP to provide\r\n * SVG generation capabilities through the Model Context Protocol.\r\n */\r\n\r\nimport { FastMCP } from 'fastmcp';\r\nimport { z } from 'zod';\r\nimport { logger } from '../utils/logger.js';\r\nimport { SvgRenderer } from '../core/SvgRenderer.js';\r\nimport { SvgDocument, ViewBoxSchema, SvgValidationError } from '../types/svg.js';\r\n\r\nexport interface SvgMcpServerConfig {\r\n  name: string;\r\n  version: string;\r\n  description?: string;\r\n  maxSvgSize?: number;\r\n  enableDebug?: boolean;\r\n}\r\n\r\nexport class SvgMcpServer extends FastMCP {\r\n  private svgRenderer: SvgRenderer;\r\n  private config: Required<SvgMcpServerConfig>;\r\n\r\n  constructor(config: SvgMcpServerConfig) {\r\n    super({\r\n      name: config.name,\r\n      version: config.version as `${number}.${number}.${number}`,\r\n    });\r\n\r\n    this.config = {\r\n      ...config,\r\n      description: config.description || 'SVG MCP Server',\r\n      maxSvgSize: config.maxSvgSize || 10000,\r\n      enableDebug: config.enableDebug || false,\r\n    };\r\n\r\n    this.svgRenderer = new SvgRenderer();\r\n    \r\n    if (this.config.enableDebug) {\r\n      logger.setLogLevel('debug');\r\n    }\r\n\r\n    this.setupTools();\r\n    this.setupResources();\r\n  }\r\n\r\n  private setupTools(): void {\r\n    // Tool: Generate SVG\r\n    this.addTool({\r\n      name: 'generate_svg',\r\n      description: 'Generate an SVG document from a specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          width: z.number().min(0).optional(),\r\n          height: z.number().min(0).optional(),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n          style: z.string().optional(),\r\n        }),\r\n        optimize: z.boolean().default(true),\r\n        validate: z.boolean().default(true),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, optimize = true, validate = true } = args as {\r\n          document: SvgDocument;\r\n          optimize?: boolean;\r\n          validate?: boolean;\r\n        };\r\n        try {\r\n          logger.debug('Generating SVG document', { document, optimize, validate });\r\n\r\n          // Validate document if requested\r\n          if (validate) {\r\n            await this.validateSvgDocument(document);\r\n          }\r\n\r\n          // Generate SVG\r\n          const svg = await this.svgRenderer.render(document, {\r\n            optimize,\r\n            validate,\r\n          });\r\n\r\n          // Check size limits\r\n          if (svg.length > this.config.maxSvgSize) {\r\n            throw new SvgValidationError(\r\n              `Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`\r\n            );\r\n          }\r\n\r\n          logger.info('SVG generated successfully', {\r\n            size: svg.length,\r\n            elementCount: document.elements.length,\r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify({\r\n                svg,\r\n                size: svg.length,\r\n                elementCount: document.elements.length,\r\n                metadata: {\r\n                  generated: new Date().toISOString(),\r\n                  optimized: optimize,\r\n                  validated: validate,\r\n                },\r\n              }, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('Failed to generate SVG', error);\r\n          \r\n          if (error instanceof SvgValidationError) {\r\n            throw error;\r\n          }\r\n          \r\n          throw new Error(`SVG generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Validate SVG Document\r\n    this.addTool({\r\n      name: 'validate_svg_document',\r\n      description: 'Validate an SVG document specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n        }),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document } = args as { document: SvgDocument };\r\n        try {\r\n          logger.debug('Validating SVG document', { document });\r\n          \r\n          const validationResult = await this.validateSvgDocument(document);\r\n          \r\n          logger.info('SVG document validation completed', validationResult);\r\n          \r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(validationResult, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG document validation failed', error);\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Health Check\r\n    this.addTool({\r\n      name: 'health_check',\r\n      description: 'Check the health and status of the SVG MCP server',\r\n      execute: async () => {\r\n        const health = {\r\n          status: 'healthy',\r\n          timestamp: new Date().toISOString(),\r\n          version: this.config.version,\r\n          config: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n            debugEnabled: this.config.enableDebug,\r\n          },\r\n          renderer: {\r\n            status: 'operational',\r\n            capabilities: this.svgRenderer.getCapabilities(),\r\n          },\r\n        };\r\n\r\n        logger.debug('Health check performed', health);\r\n        return {\r\n          content: [{\r\n            type: 'text',\r\n            text: JSON.stringify(health, null, 2)\r\n          }]\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private setupResources(): void {\r\n    // Resource: Server Information\r\n    this.addResource({\r\n      uri: 'server://info',\r\n      name: 'Server Information',\r\n      description: 'Information about the SVG MCP server',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const info = {\r\n          name: this.config.name,\r\n          version: this.config.version,\r\n          description: this.config.description,\r\n          capabilities: {\r\n            svgGeneration: true,\r\n            validation: true,\r\n            optimization: true,\r\n            rfc7996Compliance: true,\r\n          },\r\n          limits: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n          },\r\n          supportedElements: this.svgRenderer.getSupportedElements(),\r\n        };\r\n\r\n        logger.debug('Server info requested', info);\r\n        return {\r\n          text: JSON.stringify(info, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'server://info'\r\n        };\r\n      }\r\n    });\r\n\r\n    // Resource: SVG Schema\r\n    this.addResource({\r\n      uri: 'schema://svg-document',\r\n      name: 'SVG Document Schema',\r\n      description: 'JSON schema for SVG document structure',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const schema = {\r\n          $schema: 'http://json-schema.org/draft-07/schema#',\r\n          title: 'SVG Document',\r\n          description: 'Schema for SVG document specification',\r\n          type: 'object',\r\n          required: ['viewBox', 'elements'],\r\n          properties: {\r\n            viewBox: {\r\n              type: 'object',\r\n              required: ['x', 'y', 'width', 'height'],\r\n              properties: {\r\n                x: { type: 'number' },\r\n                y: { type: 'number' },\r\n                width: { type: 'number', minimum: 0 },\r\n                height: { type: 'number', minimum: 0 },\r\n              },\r\n            },\r\n            elements: {\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/SvgElement' },\r\n            },\r\n            // Additional properties would be defined here\r\n          },\r\n          definitions: {\r\n            SvgElement: {\r\n              oneOf: [\r\n                { $ref: '#/definitions/CircleElement' },\r\n                { $ref: '#/definitions/RectElement' },\r\n                { $ref: '#/definitions/LineElement' },\r\n                { $ref: '#/definitions/PathElement' },\r\n                { $ref: '#/definitions/TextElement' },\r\n                { $ref: '#/definitions/GroupElement' },\r\n              ],\r\n            },\r\n            // Element definitions would be expanded here\r\n          },\r\n        };\r\n\r\n        return {\r\n          text: JSON.stringify(schema, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'schema://svg-document'\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private async validateSvgDocument(document: SvgDocument): Promise<{\r\n    valid: boolean;\r\n    errors: string[];\r\n    warnings: string[];\r\n  }> {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    try {\r\n      // Validate viewBox\r\n      ViewBoxSchema.parse(document.viewBox);\r\n      \r\n      if (document.viewBox.width <= 0 || document.viewBox.height <= 0) {\r\n        errors.push('ViewBox must have positive width and height');\r\n      }\r\n\r\n      // Validate elements exist\r\n      if (!document.elements || document.elements.length === 0) {\r\n        warnings.push('Document contains no elements');\r\n      }\r\n\r\n      // Validate element structure (basic validation)\r\n      document.elements.forEach((element, index) => {\r\n        if (!element.type) {\r\n          errors.push(`Element at index ${index} is missing type property`);\r\n        }\r\n      });\r\n\r\n      // Check for potential performance issues\r\n      if (document.elements.length > 1000) {\r\n        warnings.push('Document contains a large number of elements, which may impact performance');\r\n      }\r\n\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        errors.push(...error.errors.map(e => `${e.path.join('.')}: ${e.message}`));\r\n      } else {\r\n        errors.push(`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      }\r\n    }\r\n\r\n    const valid = errors.length === 0;\r\n    \r\n    if (!valid) {\r\n      throw new SvgValidationError('SVG document validation failed', { errors, warnings });\r\n    }\r\n\r\n    return { valid, errors, warnings };\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    logger.info('Starting SVG MCP Server', {\r\n      name: this.config.name,\r\n      version: this.config.version,\r\n    });\r\n\r\n    await super.start();\r\n    \r\n    logger.info('SVG MCP Server started successfully');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    logger.info('Stopping SVG MCP Server');\r\n    // Cleanup logic would go here\r\n    logger.info('SVG MCP Server stopped');\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "9fa5c4c4b6d0b37a5b9c4416529a570575016ce0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ktf0pjl7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ktf0pjl7m();
/**
 * SVG MCP Server Implementation
 *
 * This is the main server class that extends FastMCP to provide
 * SVG generation capabilities through the Model Context Protocol.
 */
import { FastMCP } from 'fastmcp';
import { z } from 'zod';
import { logger } from '../utils/logger.js';
import { SvgRenderer } from '../core/SvgRenderer.js';
import { ViewBoxSchema, SvgValidationError } from '../types/svg.js';
export class SvgMcpServer extends FastMCP {
  svgRenderer;
  config;
  constructor(config) {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[0]++;
    cov_1ktf0pjl7m().s[0]++;
    super({
      name: config.name,
      version: config.version
    });
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[1]++;
    this.config = {
      ...config,
      description:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[0][0]++, config.description) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[0][1]++, 'SVG MCP Server'),
      maxSvgSize:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[1][0]++, config.maxSvgSize) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[1][1]++, 10000),
      enableDebug:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[2][0]++, config.enableDebug) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[2][1]++, false)
    };
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[2]++;
    this.svgRenderer = new SvgRenderer();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[3]++;
    if (this.config.enableDebug) {
      /* istanbul ignore next */
      cov_1ktf0pjl7m().b[3][0]++;
      cov_1ktf0pjl7m().s[4]++;
      logger.setLogLevel('debug');
    } else
    /* istanbul ignore next */
    {
      cov_1ktf0pjl7m().b[3][1]++;
    }
    cov_1ktf0pjl7m().s[5]++;
    this.setupTools();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[6]++;
    this.setupResources();
  }
  setupTools() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[1]++;
    cov_1ktf0pjl7m().s[7]++;
    // Tool: Generate SVG
    this.addTool({
      name: 'generate_svg',
      description: 'Generate an SVG document from a specification',
      parameters: z.object({
        document: z.object({
          viewBox: z.object({
            x: z.number(),
            y: z.number(),
            width: z.number().min(0),
            height: z.number().min(0)
          }),
          elements: z.array(z.any()),
          width: z.number().min(0).optional(),
          height: z.number().min(0).optional(),
          title: z.string().optional(),
          description: z.string().optional(),
          style: z.string().optional()
        }),
        optimize: z.boolean().default(true),
        validate: z.boolean().default(true)
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[2]++;
        const {
          document,
          optimize =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[4][0]++, true),
          validate =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[5][0]++, true)
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[8]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[9]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[10]++;
          logger.debug('Generating SVG document', {
            document,
            optimize,
            validate
          });
          // Validate document if requested
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[11]++;
          if (validate) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[6][0]++;
            cov_1ktf0pjl7m().s[12]++;
            await this.validateSvgDocument(document);
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[6][1]++;
          }
          // Generate SVG
          const svg =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[13]++, await this.svgRenderer.render(document, {
            optimize,
            validate
          }));
          // Check size limits
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[14]++;
          if (svg.length > this.config.maxSvgSize) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[7][0]++;
            cov_1ktf0pjl7m().s[15]++;
            throw new SvgValidationError(`Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`);
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[7][1]++;
          }
          cov_1ktf0pjl7m().s[16]++;
          logger.info('SVG generated successfully', {
            size: svg.length,
            elementCount: document.elements.length
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[17]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify({
                svg,
                size: svg.length,
                elementCount: document.elements.length,
                metadata: {
                  generated: new Date().toISOString(),
                  optimized: optimize,
                  validated: validate
                }
              }, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[18]++;
          logger.error('Failed to generate SVG', error);
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[19]++;
          if (error instanceof SvgValidationError) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[8][0]++;
            cov_1ktf0pjl7m().s[20]++;
            throw error;
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[8][1]++;
          }
          cov_1ktf0pjl7m().s[21]++;
          throw new Error(`SVG generation failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[9][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[9][1]++, 'Unknown error')}`);
        }
      }
    });
    // Tool: Validate SVG Document
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[22]++;
    this.addTool({
      name: 'validate_svg_document',
      description: 'Validate an SVG document specification',
      parameters: z.object({
        document: z.object({
          viewBox: z.object({
            x: z.number(),
            y: z.number(),
            width: z.number().min(0),
            height: z.number().min(0)
          }),
          elements: z.array(z.any())
        })
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[3]++;
        const {
          document
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[23]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[24]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[25]++;
          logger.debug('Validating SVG document', {
            document
          });
          const validationResult =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[26]++, await this.validateSvgDocument(document));
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[27]++;
          logger.info('SVG document validation completed', validationResult);
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[28]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(validationResult, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[29]++;
          logger.error('SVG document validation failed', error);
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[30]++;
          throw error;
        }
      }
    });
    // Tool: Health Check
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[31]++;
    this.addTool({
      name: 'health_check',
      description: 'Check the health and status of the SVG MCP server',
      execute: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[4]++;
        const health =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[32]++, {
          status: 'healthy',
          timestamp: new Date().toISOString(),
          version: this.config.version,
          config: {
            maxSvgSize: this.config.maxSvgSize,
            debugEnabled: this.config.enableDebug
          },
          renderer: {
            status: 'operational',
            capabilities: this.svgRenderer.getCapabilities()
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[33]++;
        logger.debug('Health check performed', health);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[34]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify(health, null, 2)
          }]
        };
      }
    });
  }
  setupResources() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[5]++;
    cov_1ktf0pjl7m().s[35]++;
    // Resource: Server Information
    this.addResource({
      uri: 'server://info',
      name: 'Server Information',
      description: 'Information about the SVG MCP server',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[6]++;
        const info =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[36]++, {
          name: this.config.name,
          version: this.config.version,
          description: this.config.description,
          capabilities: {
            svgGeneration: true,
            validation: true,
            optimization: true,
            rfc7996Compliance: true
          },
          limits: {
            maxSvgSize: this.config.maxSvgSize
          },
          supportedElements: this.svgRenderer.getSupportedElements()
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[37]++;
        logger.debug('Server info requested', info);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[38]++;
        return {
          text: JSON.stringify(info, null, 2),
          mimeType: 'application/json',
          uri: 'server://info'
        };
      }
    });
    // Resource: SVG Schema
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[39]++;
    this.addResource({
      uri: 'schema://svg-document',
      name: 'SVG Document Schema',
      description: 'JSON schema for SVG document structure',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[7]++;
        const schema =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[40]++, {
          $schema: 'http://json-schema.org/draft-07/schema#',
          title: 'SVG Document',
          description: 'Schema for SVG document specification',
          type: 'object',
          required: ['viewBox', 'elements'],
          properties: {
            viewBox: {
              type: 'object',
              required: ['x', 'y', 'width', 'height'],
              properties: {
                x: {
                  type: 'number'
                },
                y: {
                  type: 'number'
                },
                width: {
                  type: 'number',
                  minimum: 0
                },
                height: {
                  type: 'number',
                  minimum: 0
                }
              }
            },
            elements: {
              type: 'array',
              items: {
                $ref: '#/definitions/SvgElement'
              }
            }
            // Additional properties would be defined here
          },
          definitions: {
            SvgElement: {
              oneOf: [{
                $ref: '#/definitions/CircleElement'
              }, {
                $ref: '#/definitions/RectElement'
              }, {
                $ref: '#/definitions/LineElement'
              }, {
                $ref: '#/definitions/PathElement'
              }, {
                $ref: '#/definitions/TextElement'
              }, {
                $ref: '#/definitions/GroupElement'
              }]
            }
            // Element definitions would be expanded here
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[41]++;
        return {
          text: JSON.stringify(schema, null, 2),
          mimeType: 'application/json',
          uri: 'schema://svg-document'
        };
      }
    });
  }
  async validateSvgDocument(document) {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[8]++;
    const errors =
    /* istanbul ignore next */
    (cov_1ktf0pjl7m().s[42]++, []);
    const warnings =
    /* istanbul ignore next */
    (cov_1ktf0pjl7m().s[43]++, []);
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[44]++;
    try {
      /* istanbul ignore next */
      cov_1ktf0pjl7m().s[45]++;
      // Validate viewBox
      ViewBoxSchema.parse(document.viewBox);
      /* istanbul ignore next */
      cov_1ktf0pjl7m().s[46]++;
      if (
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[11][0]++, document.viewBox.width <= 0) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[11][1]++, document.viewBox.height <= 0)) {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[10][0]++;
        cov_1ktf0pjl7m().s[47]++;
        errors.push('ViewBox must have positive width and height');
      } else
      /* istanbul ignore next */
      {
        cov_1ktf0pjl7m().b[10][1]++;
      }
      // Validate elements exist
      cov_1ktf0pjl7m().s[48]++;
      if (
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[13][0]++, !document.elements) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[13][1]++, document.elements.length === 0)) {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[12][0]++;
        cov_1ktf0pjl7m().s[49]++;
        warnings.push('Document contains no elements');
      } else
      /* istanbul ignore next */
      {
        cov_1ktf0pjl7m().b[12][1]++;
      }
      // Validate element structure (basic validation)
      cov_1ktf0pjl7m().s[50]++;
      document.elements.forEach((element, index) => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[9]++;
        cov_1ktf0pjl7m().s[51]++;
        if (!element.type) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().b[14][0]++;
          cov_1ktf0pjl7m().s[52]++;
          errors.push(`Element at index ${index} is missing type property`);
        } else
        /* istanbul ignore next */
        {
          cov_1ktf0pjl7m().b[14][1]++;
        }
      });
      // Check for potential performance issues
      /* istanbul ignore next */
      cov_1ktf0pjl7m().s[53]++;
      if (document.elements.length > 1000) {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[15][0]++;
        cov_1ktf0pjl7m().s[54]++;
        warnings.push('Document contains a large number of elements, which may impact performance');
      } else
      /* istanbul ignore next */
      {
        cov_1ktf0pjl7m().b[15][1]++;
      }
    } catch (error) {
      /* istanbul ignore next */
      cov_1ktf0pjl7m().s[55]++;
      if (error instanceof z.ZodError) {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[16][0]++;
        cov_1ktf0pjl7m().s[56]++;
        errors.push(...error.errors.map(e => {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().f[10]++;
          cov_1ktf0pjl7m().s[57]++;
          return `${e.path.join('.')}: ${e.message}`;
        }));
      } else {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[16][1]++;
        cov_1ktf0pjl7m().s[58]++;
        errors.push(`Validation error: ${error instanceof Error ?
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().b[17][0]++, error.message) :
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().b[17][1]++, 'Unknown error')}`);
      }
    }
    const valid =
    /* istanbul ignore next */
    (cov_1ktf0pjl7m().s[59]++, errors.length === 0);
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[60]++;
    if (!valid) {
      /* istanbul ignore next */
      cov_1ktf0pjl7m().b[18][0]++;
      cov_1ktf0pjl7m().s[61]++;
      throw new SvgValidationError('SVG document validation failed', {
        errors,
        warnings
      });
    } else
    /* istanbul ignore next */
    {
      cov_1ktf0pjl7m().b[18][1]++;
    }
    cov_1ktf0pjl7m().s[62]++;
    return {
      valid,
      errors,
      warnings
    };
  }
  async start() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[11]++;
    cov_1ktf0pjl7m().s[63]++;
    logger.info('Starting SVG MCP Server', {
      name: this.config.name,
      version: this.config.version
    });
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[64]++;
    await super.start();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[65]++;
    logger.info('SVG MCP Server started successfully');
  }
  async stop() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[12]++;
    cov_1ktf0pjl7m().s[66]++;
    logger.info('Stopping SVG MCP Server');
    // Cleanup logic would go here
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[67]++;
    logger.info('SVG MCP Server stopped');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,