{"version":3,"names":["cov_1ktf0pjl7m","actualCoverage","FastMCP","z","logger","SvgRenderer","ViewBoxSchema","SvgValidationError","SvgMcpServer","svgRenderer","config","constructor","f","s","name","version","description","b","maxSvgSize","enableDebug","setLogLevel","setupTools","setupResources","addTool","parameters","object","document","viewBox","x","number","y","width","min","height","elements","array","any","optional","title","string","style","optimize","boolean","default","validate","execute","args","debug","validateSvgDocument","svg","render","length","info","size","elementCount","content","type","text","JSON","stringify","metadata","generated","Date","toISOString","optimized","validated","error","Error","message","validationResult","health","status","timestamp","debugEnabled","renderer","capabilities","getCapabilities","addResource","uri","mimeType","load","svgGeneration","validation","optimization","rfc7996Compliance","limits","supportedElements","getSupportedElements","schema","$schema","required","properties","minimum","items","$ref","definitions","SvgElement","oneOf","errors","warnings","parse","push","forEach","element","index","ZodError","map","e","path","join","valid","start","stop"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts"],"sourcesContent":["/**\r\n * SVG MCP Server Implementation\r\n * \r\n * This is the main server class that extends FastMCP to provide\r\n * SVG generation capabilities through the Model Context Protocol.\r\n */\r\n\r\nimport { FastMCP } from 'fastmcp';\r\nimport { z } from 'zod';\r\nimport { logger } from '../utils/logger.js';\r\nimport { SvgRenderer } from '../core/SvgRenderer.js';\r\nimport { SvgDocument, ViewBoxSchema, SvgValidationError } from '../types/svg.js';\r\n\r\nexport interface SvgMcpServerConfig {\r\n  name: string;\r\n  version: string;\r\n  description?: string;\r\n  maxSvgSize?: number;\r\n  enableDebug?: boolean;\r\n}\r\n\r\nexport class SvgMcpServer extends FastMCP {\r\n  private svgRenderer: SvgRenderer;\r\n  private config: Required<SvgMcpServerConfig>;\r\n\r\n  constructor(config: SvgMcpServerConfig) {\r\n    super({\r\n      name: config.name,\r\n      version: config.version as `${number}.${number}.${number}`,\r\n    });\r\n\r\n    this.config = {\r\n      ...config,\r\n      description: config.description || 'SVG MCP Server',\r\n      maxSvgSize: config.maxSvgSize || 10000,\r\n      enableDebug: config.enableDebug || false,\r\n    };\r\n\r\n    this.svgRenderer = new SvgRenderer();\r\n    \r\n    if (this.config.enableDebug) {\r\n      logger.setLogLevel('debug');\r\n    }\r\n\r\n    this.setupTools();\r\n    this.setupResources();\r\n  }\r\n\r\n  private setupTools(): void {\r\n    // Tool: Generate SVG\r\n    this.addTool({\r\n      name: 'generate_svg',\r\n      description: 'Generate an SVG document from a specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          width: z.number().min(0).optional(),\r\n          height: z.number().min(0).optional(),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n          style: z.string().optional(),\r\n        }),\r\n        optimize: z.boolean().default(true),\r\n        validate: z.boolean().default(true),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, optimize = true, validate = true } = args as {\r\n          document: SvgDocument;\r\n          optimize?: boolean;\r\n          validate?: boolean;\r\n        };\r\n        try {\r\n          logger.debug('Generating SVG document', { document, optimize, validate });\r\n\r\n          // Validate document if requested\r\n          if (validate) {\r\n            await this.validateSvgDocument(document);\r\n          }\r\n\r\n          // Generate SVG\r\n          const svg = await this.svgRenderer.render(document, {\r\n            optimize,\r\n            validate,\r\n          });\r\n\r\n          // Check size limits\r\n          if (svg.length > this.config.maxSvgSize) {\r\n            throw new SvgValidationError(\r\n              `Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`\r\n            );\r\n          }\r\n\r\n          logger.info('SVG generated successfully', {\r\n            size: svg.length,\r\n            elementCount: document.elements.length,\r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify({\r\n                svg,\r\n                size: svg.length,\r\n                elementCount: document.elements.length,\r\n                metadata: {\r\n                  generated: new Date().toISOString(),\r\n                  optimized: optimize,\r\n                  validated: validate,\r\n                },\r\n              }, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('Failed to generate SVG', error);\r\n          \r\n          if (error instanceof SvgValidationError) {\r\n            throw error;\r\n          }\r\n          \r\n          throw new Error(`SVG generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Validate SVG Document\r\n    this.addTool({\r\n      name: 'validate_svg_document',\r\n      description: 'Validate an SVG document specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n        }),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document } = args as { document: SvgDocument };\r\n        try {\r\n          logger.debug('Validating SVG document', { document });\r\n          \r\n          const validationResult = await this.validateSvgDocument(document);\r\n          \r\n          logger.info('SVG document validation completed', validationResult);\r\n          \r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(validationResult, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG document validation failed', error);\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Health Check\r\n    this.addTool({\r\n      name: 'health_check',\r\n      description: 'Check the health and status of the SVG MCP server',\r\n      execute: async () => {\r\n        const health = {\r\n          status: 'healthy',\r\n          timestamp: new Date().toISOString(),\r\n          version: this.config.version,\r\n          config: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n            debugEnabled: this.config.enableDebug,\r\n          },\r\n          renderer: {\r\n            status: 'operational',\r\n            capabilities: this.svgRenderer.getCapabilities(),\r\n          },\r\n        };\r\n\r\n        logger.debug('Health check performed', health);\r\n        return {\r\n          content: [{\r\n            type: 'text',\r\n            text: JSON.stringify(health, null, 2)\r\n          }]\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private setupResources(): void {\r\n    // Resource: Server Information\r\n    this.addResource({\r\n      uri: 'server://info',\r\n      name: 'Server Information',\r\n      description: 'Information about the SVG MCP server',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const info = {\r\n          name: this.config.name,\r\n          version: this.config.version,\r\n          description: this.config.description,\r\n          capabilities: {\r\n            svgGeneration: true,\r\n            validation: true,\r\n            optimization: true,\r\n            rfc7996Compliance: true,\r\n          },\r\n          limits: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n          },\r\n          supportedElements: this.svgRenderer.getSupportedElements(),\r\n        };\r\n\r\n        logger.debug('Server info requested', info);\r\n        return {\r\n          text: JSON.stringify(info, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'server://info'\r\n        };\r\n      }\r\n    });\r\n\r\n    // Resource: SVG Schema\r\n    this.addResource({\r\n      uri: 'schema://svg-document',\r\n      name: 'SVG Document Schema',\r\n      description: 'JSON schema for SVG document structure',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const schema = {\r\n          $schema: 'http://json-schema.org/draft-07/schema#',\r\n          title: 'SVG Document',\r\n          description: 'Schema for SVG document specification',\r\n          type: 'object',\r\n          required: ['viewBox', 'elements'],\r\n          properties: {\r\n            viewBox: {\r\n              type: 'object',\r\n              required: ['x', 'y', 'width', 'height'],\r\n              properties: {\r\n                x: { type: 'number' },\r\n                y: { type: 'number' },\r\n                width: { type: 'number', minimum: 0 },\r\n                height: { type: 'number', minimum: 0 },\r\n              },\r\n            },\r\n            elements: {\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/SvgElement' },\r\n            },\r\n            // Additional properties would be defined here\r\n          },\r\n          definitions: {\r\n            SvgElement: {\r\n              oneOf: [\r\n                { $ref: '#/definitions/CircleElement' },\r\n                { $ref: '#/definitions/RectElement' },\r\n                { $ref: '#/definitions/LineElement' },\r\n                { $ref: '#/definitions/PathElement' },\r\n                { $ref: '#/definitions/TextElement' },\r\n                { $ref: '#/definitions/GroupElement' },\r\n              ],\r\n            },\r\n            // Element definitions would be expanded here\r\n          },\r\n        };\r\n\r\n        return {\r\n          text: JSON.stringify(schema, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'schema://svg-document'\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private async validateSvgDocument(document: SvgDocument): Promise<{\r\n    valid: boolean;\r\n    errors: string[];\r\n    warnings: string[];\r\n  }> {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    try {\r\n      // Validate viewBox\r\n      ViewBoxSchema.parse(document.viewBox);\r\n      \r\n      if (document.viewBox.width <= 0 || document.viewBox.height <= 0) {\r\n        errors.push('ViewBox must have positive width and height');\r\n      }\r\n\r\n      // Validate elements exist\r\n      if (!document.elements || document.elements.length === 0) {\r\n        warnings.push('Document contains no elements');\r\n      }\r\n\r\n      // Validate element structure (basic validation)\r\n      document.elements.forEach((element, index) => {\r\n        if (!element.type) {\r\n          errors.push(`Element at index ${index} is missing type property`);\r\n        }\r\n      });\r\n\r\n      // Check for potential performance issues\r\n      if (document.elements.length > 1000) {\r\n        warnings.push('Document contains a large number of elements, which may impact performance');\r\n      }\r\n\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        errors.push(...error.errors.map(e => `${e.path.join('.')}: ${e.message}`));\r\n      } else {\r\n        errors.push(`Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n      }\r\n    }\r\n\r\n    const valid = errors.length === 0;\r\n    \r\n    if (!valid) {\r\n      throw new SvgValidationError('SVG document validation failed', { errors, warnings });\r\n    }\r\n\r\n    return { valid, errors, warnings };\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    logger.info('Starting SVG MCP Server', {\r\n      name: this.config.name,\r\n      version: this.config.version,\r\n    });\r\n\r\n    await super.start();\r\n    \r\n    logger.info('SVG MCP Server started successfully');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    logger.info('Stopping SVG MCP Server');\r\n    // Cleanup logic would go here\r\n    logger.info('SVG MCP Server stopped');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}