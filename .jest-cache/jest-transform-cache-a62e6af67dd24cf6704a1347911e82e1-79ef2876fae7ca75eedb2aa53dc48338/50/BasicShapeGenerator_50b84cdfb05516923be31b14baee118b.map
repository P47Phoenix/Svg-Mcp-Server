{"version":3,"names":["cov_18wj3p7pv7","actualCoverage","BasicShapeGenerator","createCircle","options","f","s","r","b","Error","type","cx","cy","fill","stroke","strokeWidth","opacity","id","className","class","createRect","width","height","x","y","rx","ry","createLine","x1","y1","x2","y2","createText","content","trim","fontSize","fontFamily","textAnchor","createGroup","children","length","transform","createPath","commands","d","pathCommandsToString","createDefaultCircle","radius","createDefaultRect","createHorizontalLine","createVerticalLine","createSquare","size","createEllipse","rotation","largeArc","sweep","createPolygon","points","firstPoint","slice","map","point","createRegularPolygon","sides","angleStep","Math","PI","i","angle","push","cos","sin","createStar","outerRadius","innerRadius","starPoints","cmd","join","calculateBoundingBox","xs","p","ys","minX","min","maxX","max","minY","maxY"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\core\\shapes\\BasicShapeGenerator.ts"],"sourcesContent":["/**\r\n * SVG Basic Shape Generators\r\n * \r\n * Provides factory functions for creating basic SVG shapes with intelligent defaults,\r\n * parameter validation, and optimized configurations for common use cases.\r\n */\r\n\r\nimport { \r\n  CircleElement, \r\n  RectElement, \r\n  LineElement, \r\n  PathElement, \r\n  TextElement, \r\n  GroupElement,\r\n  SvgAnyElement \r\n} from '../../types/svg.js';\r\n\r\n// Common styling options for all shapes\r\nexport interface BaseShapeOptions {\r\n  fill?: string;\r\n  stroke?: string;\r\n  strokeWidth?: number;\r\n  opacity?: number;\r\n  id?: string;\r\n  className?: string;\r\n}\r\n\r\n// Shape-specific options interfaces\r\nexport interface CircleOptions extends BaseShapeOptions {\r\n  cx: number;\r\n  cy: number;\r\n  r: number;\r\n}\r\n\r\nexport interface RectOptions extends BaseShapeOptions {\r\n  x: number;\r\n  y: number;\r\n  width: number;\r\n  height: number;\r\n  rx?: number;\r\n  ry?: number;\r\n}\r\n\r\nexport interface LineOptions extends BaseShapeOptions {\r\n  x1: number;\r\n  y1: number;\r\n  x2: number;\r\n  y2: number;\r\n}\r\n\r\nexport interface TextOptions extends BaseShapeOptions {\r\n  x: number;\r\n  y: number;\r\n  content: string;\r\n  fontSize?: number;\r\n  fontFamily?: string;\r\n  textAnchor?: 'start' | 'middle' | 'end';\r\n}\r\n\r\nexport interface GroupOptions extends BaseShapeOptions {\r\n  children: SvgAnyElement[];\r\n  transform?: string;\r\n}\r\n\r\n// Path command types for path generation\r\nexport type PathCommand = \r\n  | { type: 'M', x: number, y: number }  // Move to\r\n  | { type: 'L', x: number, y: number }  // Line to\r\n  | { type: 'C', x1: number, y1: number, x2: number, y2: number, x: number, y: number }  // Cubic curve\r\n  | { type: 'Q', x1: number, y1: number, x: number, y: number }  // Quadratic curve\r\n  | { type: 'A', rx: number, ry: number, rotation: number, largeArc: boolean, sweep: boolean, x: number, y: number }  // Arc\r\n  | { type: 'Z' };  // Close path\r\n\r\nexport interface PathOptions extends BaseShapeOptions {\r\n  commands: PathCommand[];\r\n}\r\n\r\n/**\r\n * Basic Shape Generator - Factory for creating SVG elements\r\n */\r\nexport class BasicShapeGenerator {\r\n  \r\n  /**\r\n   * Create a circle element\r\n   */\r\n  static createCircle(options: CircleOptions): CircleElement {\r\n    if (options.r <= 0) {\r\n      throw new Error('Circle radius must be positive');\r\n    }\r\n\r\n    return {\r\n      type: 'circle',\r\n      cx: options.cx,\r\n      cy: options.cy,\r\n      r: options.r,\r\n      ...(options.fill && { fill: options.fill }),\r\n      ...(options.stroke && { stroke: options.stroke }),\r\n      ...(options.strokeWidth && { 'stroke-width': options.strokeWidth }),\r\n      ...(options.opacity && { opacity: options.opacity }),\r\n      ...(options.id && { id: options.id }),\r\n      ...(options.className && { class: options.className })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a rectangle element\r\n   */\r\n  static createRect(options: RectOptions): RectElement {\r\n    if (options.width <= 0 || options.height <= 0) {\r\n      throw new Error('Rectangle width and height must be positive');\r\n    }\r\n\r\n    return {\r\n      type: 'rect',\r\n      x: options.x,\r\n      y: options.y,\r\n      width: options.width,\r\n      height: options.height,\r\n      ...(options.rx && { rx: options.rx }),\r\n      ...(options.ry && { ry: options.ry }),\r\n      ...(options.fill && { fill: options.fill }),\r\n      ...(options.stroke && { stroke: options.stroke }),\r\n      ...(options.strokeWidth && { 'stroke-width': options.strokeWidth }),\r\n      ...(options.opacity && { opacity: options.opacity }),\r\n      ...(options.id && { id: options.id }),\r\n      ...(options.className && { class: options.className })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a line element\r\n   */\r\n  static createLine(options: LineOptions): LineElement {\r\n    return {\r\n      type: 'line',\r\n      x1: options.x1,\r\n      y1: options.y1,\r\n      x2: options.x2,\r\n      y2: options.y2,\r\n      ...(options.stroke && { stroke: options.stroke }),\r\n      ...(options.strokeWidth && { 'stroke-width': options.strokeWidth }),\r\n      ...(options.opacity && { opacity: options.opacity }),\r\n      ...(options.id && { id: options.id }),\r\n      ...(options.className && { class: options.className })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a text element\r\n   */\r\n  static createText(options: TextOptions): TextElement {\r\n    if (!options.content.trim()) {\r\n      throw new Error('Text content cannot be empty');\r\n    }\r\n\r\n    return {\r\n      type: 'text',\r\n      x: options.x,\r\n      y: options.y,\r\n      content: options.content,\r\n      ...(options.fontSize && { 'font-size': options.fontSize }),\r\n      ...(options.fontFamily && { 'font-family': options.fontFamily }),\r\n      ...(options.textAnchor && { 'text-anchor': options.textAnchor }),\r\n      ...(options.fill && { fill: options.fill }),\r\n      ...(options.stroke && { stroke: options.stroke }),\r\n      ...(options.strokeWidth && { 'stroke-width': options.strokeWidth }),\r\n      ...(options.opacity && { opacity: options.opacity }),\r\n      ...(options.id && { id: options.id }),\r\n      ...(options.className && { class: options.className })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a group element\r\n   */\r\n  static createGroup(options: GroupOptions): GroupElement {\r\n    if (!options.children || options.children.length === 0) {\r\n      throw new Error('Group must contain at least one child element');\r\n    }\r\n\r\n    return {\r\n      type: 'group',\r\n      children: options.children,\r\n      ...(options.transform && { transform: options.transform }),\r\n      ...(options.fill && { fill: options.fill }),\r\n      ...(options.stroke && { stroke: options.stroke }),\r\n      ...(options.strokeWidth && { 'stroke-width': options.strokeWidth }),\r\n      ...(options.opacity && { opacity: options.opacity }),\r\n      ...(options.id && { id: options.id }),\r\n      ...(options.className && { class: options.className })\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a path element from commands\r\n   */\r\n  static createPath(options: PathOptions): PathElement {\r\n    if (!options.commands || options.commands.length === 0) {\r\n      throw new Error('Path must contain at least one command');\r\n    }\r\n\r\n    const d = this.pathCommandsToString(options.commands);\r\n\r\n    return {\r\n      type: 'path',\r\n      d,\r\n      ...(options.fill && { fill: options.fill }),\r\n      ...(options.stroke && { stroke: options.stroke }),\r\n      ...(options.strokeWidth && { 'stroke-width': options.strokeWidth }),\r\n      ...(options.opacity && { opacity: options.opacity }),\r\n      ...(options.id && { id: options.id }),\r\n      ...(options.className && { class: options.className })\r\n    };\r\n  }\r\n\r\n  // Preset shape generators for common patterns\r\n\r\n  /**\r\n   * Create a circle at origin with default styling\r\n   */\r\n  static createDefaultCircle(radius: number): CircleElement {\r\n    return this.createCircle({\r\n      cx: 0,\r\n      cy: 0,\r\n      r: radius,\r\n      fill: 'none',\r\n      stroke: 'black',\r\n      strokeWidth: 1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a rectangle at origin with default styling\r\n   */\r\n  static createDefaultRect(width: number, height: number): RectElement {\r\n    return this.createRect({\r\n      x: 0,\r\n      y: 0,\r\n      width,\r\n      height,\r\n      fill: 'none',\r\n      stroke: 'black',\r\n      strokeWidth: 1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a horizontal line\r\n   */\r\n  static createHorizontalLine(x1: number, x2: number, y: number): LineElement {\r\n    return this.createLine({\r\n      x1,\r\n      y1: y,\r\n      x2,\r\n      y2: y,\r\n      stroke: 'black',\r\n      strokeWidth: 1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a vertical line\r\n   */\r\n  static createVerticalLine(x: number, y1: number, y2: number): LineElement {\r\n    return this.createLine({\r\n      x1: x,\r\n      y1,\r\n      x2: x,\r\n      y2,\r\n      stroke: 'black',\r\n      strokeWidth: 1\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a square (special case of rectangle)\r\n   */\r\n  static createSquare(x: number, y: number, size: number, options?: Partial<BaseShapeOptions>): RectElement {\r\n    return this.createRect({\r\n      x,\r\n      y,\r\n      width: size,\r\n      height: size,\r\n      fill: 'none',\r\n      stroke: 'black',\r\n      strokeWidth: 1,\r\n      ...options\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create an ellipse using path commands\r\n   */\r\n  static createEllipse(cx: number, cy: number, rx: number, ry: number, options?: Partial<BaseShapeOptions>): PathElement {\r\n    const commands: PathCommand[] = [\r\n      { type: 'M', x: cx - rx, y: cy },\r\n      { type: 'A', rx, ry, rotation: 0, largeArc: false, sweep: false, x: cx + rx, y: cy },\r\n      { type: 'A', rx, ry, rotation: 0, largeArc: false, sweep: false, x: cx - rx, y: cy },\r\n      { type: 'Z' }\r\n    ];\r\n\r\n    return this.createPath({\r\n      commands,\r\n      fill: 'none',\r\n      stroke: 'black',\r\n      strokeWidth: 1,\r\n      ...options\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a polygon using path commands\r\n   */\r\n  static createPolygon(points: Array<{x: number, y: number}>, options?: Partial<BaseShapeOptions>): PathElement {\r\n    if (points.length < 3) {\r\n      throw new Error('Polygon must have at least 3 points');\r\n    }\r\n\r\n    const firstPoint = points[0];\r\n    if (!firstPoint) {\r\n      throw new Error('Polygon must have valid points');\r\n    }\r\n\r\n    const commands: PathCommand[] = [\r\n      { type: 'M', x: firstPoint.x, y: firstPoint.y },\r\n      ...points.slice(1).map(point => ({ type: 'L' as const, x: point.x, y: point.y })),\r\n      { type: 'Z' }\r\n    ];\r\n\r\n    return this.createPath({\r\n      commands,\r\n      fill: 'none',\r\n      stroke: 'black',\r\n      strokeWidth: 1,\r\n      ...options\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create a regular polygon (e.g., triangle, pentagon, hexagon)\r\n   */\r\n  static createRegularPolygon(\r\n    cx: number, \r\n    cy: number, \r\n    radius: number, \r\n    sides: number, \r\n    options?: Partial<BaseShapeOptions>\r\n  ): PathElement {\r\n    if (sides < 3) {\r\n      throw new Error('Polygon must have at least 3 sides');\r\n    }\r\n\r\n    const points: Array<{x: number, y: number}> = [];\r\n    const angleStep = (2 * Math.PI) / sides;\r\n    \r\n    for (let i = 0; i < sides; i++) {\r\n      const angle = i * angleStep - Math.PI / 2; // Start from top\r\n      points.push({\r\n        x: cx + radius * Math.cos(angle),\r\n        y: cy + radius * Math.sin(angle)\r\n      });\r\n    }\r\n\r\n    return this.createPolygon(points, options);\r\n  }\r\n\r\n  /**\r\n   * Create a star shape\r\n   */\r\n  static createStar(\r\n    cx: number, \r\n    cy: number, \r\n    outerRadius: number, \r\n    innerRadius: number, \r\n    points: number, \r\n    options?: Partial<BaseShapeOptions>\r\n  ): PathElement {\r\n    if (points < 3) {\r\n      throw new Error('Star must have at least 3 points');\r\n    }\r\n\r\n    const starPoints: Array<{x: number, y: number}> = [];\r\n    const angleStep = Math.PI / points;\r\n    \r\n    for (let i = 0; i < points * 2; i++) {\r\n      const angle = i * angleStep - Math.PI / 2;\r\n      const radius = i % 2 === 0 ? outerRadius : innerRadius;\r\n      starPoints.push({\r\n        x: cx + radius * Math.cos(angle),\r\n        y: cy + radius * Math.sin(angle)\r\n      });\r\n    }\r\n\r\n    return this.createPolygon(starPoints, options);\r\n  }\r\n\r\n  // Helper methods\r\n\r\n  /**\r\n   * Convert path commands to SVG path string\r\n   */\r\n  private static pathCommandsToString(commands: PathCommand[]): string {\r\n    return commands.map(cmd => {\r\n      switch (cmd.type) {\r\n        case 'M':\r\n          return `M ${cmd.x} ${cmd.y}`;\r\n        case 'L':\r\n          return `L ${cmd.x} ${cmd.y}`;\r\n        case 'C':\r\n          return `C ${cmd.x1} ${cmd.y1} ${cmd.x2} ${cmd.y2} ${cmd.x} ${cmd.y}`;\r\n        case 'Q':\r\n          return `Q ${cmd.x1} ${cmd.y1} ${cmd.x} ${cmd.y}`;\r\n        case 'A':\r\n          return `A ${cmd.rx} ${cmd.ry} ${cmd.rotation} ${cmd.largeArc ? 1 : 0} ${cmd.sweep ? 1 : 0} ${cmd.x} ${cmd.y}`;\r\n        case 'Z':\r\n          return 'Z';\r\n        default:\r\n          throw new Error(`Unknown path command type: ${(cmd as any).type}`);\r\n      }\r\n    }).join(' ');\r\n  }\r\n\r\n  /**\r\n   * Calculate bounding box for a set of points\r\n   */\r\n  static calculateBoundingBox(points: Array<{x: number, y: number}>): {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n  } {\r\n    if (points.length === 0) {\r\n      return { x: 0, y: 0, width: 0, height: 0 };\r\n    }\r\n\r\n    const xs = points.map(p => p.x);\r\n    const ys = points.map(p => p.y);\r\n    \r\n    const minX = Math.min(...xs);\r\n    const maxX = Math.max(...xs);\r\n    const minY = Math.min(...ys);\r\n    const maxY = Math.max(...ys);\r\n\r\n    return {\r\n      x: minX,\r\n      y: minY,\r\n      width: maxX - minX,\r\n      height: maxY - minY\r\n    };\r\n  }\r\n}\r\n"],"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","ignoreList":[]}