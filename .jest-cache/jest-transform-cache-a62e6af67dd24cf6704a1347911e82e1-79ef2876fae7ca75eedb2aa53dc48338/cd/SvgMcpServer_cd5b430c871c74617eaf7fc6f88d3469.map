{"version":3,"names":["cov_1ktf0pjl7m","actualCoverage","FastMCP","z","logger","SvgRenderer","SvgDocumentProcessor","BasicShapeGenerator","ShapeCollections","SvgValidationError","ValidationFactory","SvgMcpServer","svgRenderer","documentProcessor","config","constructor","f","s","name","version","description","b","maxSvgSize","enableDebug","setLogLevel","setupTools","setupResources","addTool","parameters","object","document","viewBox","x","number","y","width","min","height","elements","array","any","optional","title","string","style","optimize","boolean","default","validate","execute","args","info","elementCount","length","spec","undefined","generateMetadata","result","processDocument","svg","size","processingTime","warnings","errors","content","type","text","JSON","stringify","metadata","processing","time","generated","Date","toISOString","stats","complexity","features","error","Error","message","validationResult","valid","compliance","accessibility","enum","describe","options","includeDocument","shape","createCircle","createRect","createLine","createText","createGroup","createPath","cx","cy","rx","ry","createEllipse","points","Array","isArray","createPolygon","outerRadius","innerRadius","createStar","boundingBox","calculateShapeBoundingBox","padding","charAt","toUpperCase","slice","processResult","shapeType","collection","shapeCollection","getCollection","shapes","shapeCount","health","status","timestamp","debugEnabled","renderer","capabilities","getCapabilities","processor","statistics","getProcessingStats","debug","preset","includeRecommendations","includeQuickFixes","svgDocument","validateDocument","response","overall","score","summary","documentResult","recommendations","quickFixes","reports","performance","documentStats","errorCount","warningCount","quickValidate","validateWithAutoFix","original","autoFixApplied","autoFixedDocument","appliedFixes","fixedDocument","fixedValidation","fixesApplied","originalScore","fixedScore","addResource","uri","mimeType","load","svgGeneration","documentProcessing","validation","optimization","rfc7996Compliance","metadataGeneration","transforms","limits","supportedElements","getSupportedElements","schema","$schema","required","properties","minimum","items","$ref","definitions","SvgElement","oneOf","r","Math","x1","x2","y1","y2","abs","fontSize","textLength","start","stop"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts"],"sourcesContent":["/**\r\n * SVG MCP Server Implementation\r\n * \r\n * This is the main server class that extends FastMCP to provide\r\n * SVG generation capabilities through the Model Context Protocol.\r\n */\r\n\r\nimport { FastMCP } from 'fastmcp';\r\nimport { z } from 'zod';\r\nimport { logger } from '../utils/logger.js';\r\nimport { SvgRenderer } from '../core/SvgRenderer.js';\r\nimport { SvgDocumentProcessor, SvgDocumentSpec } from '../core/SvgDocumentProcessor.js';\r\nimport { BasicShapeGenerator, ShapeCollections } from '../core/shapes/index.js';\r\nimport { SvgValidationError } from '../types/svg.js';\r\nimport { \r\n  ValidationFactory\r\n} from '../core/validation/ValidationFactory.js';\r\n\r\nexport interface SvgMcpServerConfig {\r\n  name: string;\r\n  version: string;\r\n  description?: string;\r\n  maxSvgSize?: number;\r\n  enableDebug?: boolean;\r\n}\r\n\r\nexport class SvgMcpServer extends FastMCP {\r\n  private svgRenderer: SvgRenderer;\r\n  private documentProcessor: SvgDocumentProcessor;\r\n  private config: Required<SvgMcpServerConfig>;\r\n\r\n  constructor(config: SvgMcpServerConfig) {\r\n    super({\r\n      name: config.name,\r\n      version: config.version as `${number}.${number}.${number}`,\r\n    });\r\n\r\n    this.config = {\r\n      ...config,\r\n      description: config.description || 'SVG MCP Server',\r\n      maxSvgSize: config.maxSvgSize || 10000,\r\n      enableDebug: config.enableDebug || false,\r\n    };\r\n\r\n    this.svgRenderer = new SvgRenderer();\r\n    this.documentProcessor = new SvgDocumentProcessor();\r\n    \r\n    if (this.config.enableDebug) {\r\n      logger.setLogLevel('debug');\r\n    }\r\n\r\n    this.setupTools();\r\n    this.setupResources();\r\n  }\r\n\r\n  private setupTools(): void {\r\n    // Tool: Generate SVG\r\n    this.addTool({\r\n      name: 'generate_svg',\r\n      description: 'Generate an SVG document from a specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          width: z.number().min(0).optional(),\r\n          height: z.number().min(0).optional(),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n          style: z.string().optional(),\r\n        }),\r\n        optimize: z.boolean().default(true),\r\n        validate: z.boolean().default(true),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, optimize = true, validate = true } = args;\r\n\r\n        try {\r\n          logger.info('Processing SVG document request', { \r\n            elementCount: document.elements?.length,\r\n            optimize, \r\n            validate \r\n          });\r\n\r\n          // Convert to document specification\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            ...(document.width !== undefined && { width: document.width }),\r\n            ...(document.height !== undefined && { height: document.height }),\r\n            ...(document.title && { title: document.title }),\r\n            ...(document.description && { description: document.description }),\r\n            ...(document.style && { style: document.style }),\r\n            optimize,\r\n            validate,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Process document using the document processor\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n\r\n          // Check size limits\r\n          if (result.svg.length > this.config.maxSvgSize) {\r\n            throw new SvgValidationError(\r\n              `Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`,\r\n              [`SVG size: ${result.svg.length}, limit: ${this.config.maxSvgSize}`]\r\n            );\r\n          }\r\n\r\n          logger.info('SVG document processed successfully', {\r\n            size: result.svg.length,\r\n            elementCount: result.document.elements.length,\r\n            processingTime: result.processingTime,\r\n            warnings: result.warnings.length,\r\n            errors: result.errors.length,\r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify({\r\n                svg: result.svg,\r\n                document: result.document,\r\n                metadata: result.metadata,\r\n                processing: {\r\n                  time: result.processingTime,\r\n                  warnings: result.warnings,\r\n                  errors: result.errors,\r\n                  generated: new Date().toISOString(),\r\n                },\r\n                stats: {\r\n                  size: result.svg.length,\r\n                  elementCount: result.document.elements.length,\r\n                  complexity: result.metadata.complexity,\r\n                  features: result.metadata.features,\r\n                },\r\n              }, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('Failed to generate SVG', error);\r\n          \r\n          if (error instanceof SvgValidationError) {\r\n            throw error;\r\n          }\r\n          \r\n          throw new Error(`SVG generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Validate SVG Document\r\n    this.addTool({\r\n      name: 'validate_svg_document',\r\n      description: 'Validate an SVG document specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n        }),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document } = args;\r\n        try {\r\n          logger.info('Validating SVG document', { \r\n            elementCount: document.elements?.length \r\n          });\r\n          \r\n          // Convert to document specification for validation\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            validate: true,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Use document processor for comprehensive validation\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n          \r\n          const validationResult = {\r\n            valid: result.errors.length === 0,\r\n            errors: result.errors,\r\n            warnings: result.warnings,\r\n            metadata: result.metadata,\r\n            processingTime: result.processingTime,\r\n            compliance: result.metadata.compliance,\r\n            accessibility: result.metadata.accessibility,\r\n            features: result.metadata.features,\r\n            complexity: result.metadata.complexity,\r\n          };\r\n          \r\n          logger.info('SVG document validation completed', {\r\n            valid: validationResult.valid,\r\n            errors: validationResult.errors.length,\r\n            warnings: validationResult.warnings.length,\r\n          });\r\n          \r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(validationResult, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG document validation failed', error);\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Create Shape\r\n    this.addTool({\r\n      name: 'create_shape',\r\n      description: 'Create individual SVG shapes using the shape generator',\r\n      parameters: z.object({\r\n        type: z.enum(['circle', 'rect', 'line', 'text', 'group', 'path', 'ellipse', 'polygon', 'star']).describe('Type of shape to create'),\r\n        options: z.any().describe('Shape-specific options object'),\r\n        includeDocument: z.boolean().default(false).describe('Whether to wrap the shape in a complete SVG document')\r\n      }),\r\n      execute: async (args) => {\r\n        const { type, options, includeDocument } = args;\r\n\r\n        try {\r\n          logger.info('Creating shape', { type, includeDocument });\r\n          \r\n          let shape;\r\n          \r\n          switch (type) {\r\n            case 'circle':\r\n              shape = BasicShapeGenerator.createCircle(options);\r\n              break;\r\n            case 'rect':\r\n              shape = BasicShapeGenerator.createRect(options);\r\n              break;\r\n            case 'line':\r\n              shape = BasicShapeGenerator.createLine(options);\r\n              break;\r\n            case 'text':\r\n              shape = BasicShapeGenerator.createText(options);\r\n              break;\r\n            case 'group':\r\n              shape = BasicShapeGenerator.createGroup(options);\r\n              break;\r\n            case 'path':\r\n              shape = BasicShapeGenerator.createPath(options);\r\n              break;\r\n            case 'ellipse':\r\n              if (!options.cx || !options.cy || !options.rx || !options.ry) {\r\n                throw new Error('Ellipse requires cx, cy, rx, and ry parameters');\r\n              }\r\n              shape = BasicShapeGenerator.createEllipse(options.cx, options.cy, options.rx, options.ry, options);\r\n              break;\r\n            case 'polygon':\r\n              if (!options.points || !Array.isArray(options.points)) {\r\n                throw new Error('Polygon requires points array parameter');\r\n              }\r\n              shape = BasicShapeGenerator.createPolygon(options.points, options);\r\n              break;\r\n            case 'star':\r\n              if (!options.cx || !options.cy || !options.outerRadius || !options.innerRadius || !options.points) {\r\n                throw new Error('Star requires cx, cy, outerRadius, innerRadius, and points parameters');\r\n              }\r\n              shape = BasicShapeGenerator.createStar(options.cx, options.cy, options.outerRadius, options.innerRadius, options.points, options);\r\n              break;\r\n            default:\r\n              throw new Error(`Unknown shape type: ${type}`);\r\n          }\r\n\r\n          let result = {\r\n            shape,\r\n            svg: null as string | null,\r\n            document: null as any\r\n          };\r\n\r\n          if (includeDocument) {\r\n            // Calculate appropriate viewBox based on shape\r\n            const boundingBox = this.calculateShapeBoundingBox(shape);\r\n            const padding = 10;\r\n            \r\n            const spec: SvgDocumentSpec = {\r\n              viewBox: {\r\n                x: boundingBox.x - padding,\r\n                y: boundingBox.y - padding,\r\n                width: boundingBox.width + 2 * padding,\r\n                height: boundingBox.height + 2 * padding\r\n              },\r\n              elements: [shape],\r\n              title: `${type.charAt(0).toUpperCase() + type.slice(1)} Shape`,\r\n              description: `Generated ${type} shape`\r\n            };\r\n\r\n            const processResult = await this.documentProcessor.processDocument(spec);\r\n            result.svg = processResult.svg;\r\n            result.document = processResult.document;\r\n          }\r\n\r\n          logger.info('Shape created successfully', { type, shapeType: shape.type });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(result, null, 2)\r\n            }]\r\n          };\r\n\r\n        } catch (error) {\r\n          logger.error('Shape creation failed', { error, type, options });\r\n          throw new Error(`Shape creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Create Shape Collection\r\n    this.addTool({\r\n      name: 'create_shape_collection',\r\n      description: 'Create pre-defined collections of shapes for common use cases',\r\n      parameters: z.object({\r\n        collection: z.enum(['geometric', 'flowchart', 'arrows', 'stars', 'ui']).describe('Type of shape collection to create'),\r\n        options: z.any().optional().describe('Optional styling options to apply to all shapes'),\r\n        includeDocument: z.boolean().default(true).describe('Whether to wrap the collection in a complete SVG document')\r\n      }),\r\n      execute: async (args) => {\r\n        const { collection, options, includeDocument } = args;\r\n\r\n        try {\r\n          logger.info('Creating shape collection', { collection, includeDocument });\r\n          \r\n          const shapeCollection = ShapeCollections.getCollection(collection, options);\r\n          \r\n          if (!shapeCollection) {\r\n            throw new Error(`Unknown collection type: ${collection}`);\r\n          }\r\n\r\n          let result = {\r\n            collection: shapeCollection,\r\n            svg: null as string | null,\r\n            document: null as any\r\n          };\r\n\r\n          if (includeDocument) {\r\n            const spec: SvgDocumentSpec = {\r\n              viewBox: {\r\n                x: shapeCollection.boundingBox.x - 10,\r\n                y: shapeCollection.boundingBox.y - 10,\r\n                width: shapeCollection.boundingBox.width + 20,\r\n                height: shapeCollection.boundingBox.height + 20\r\n              },\r\n              elements: shapeCollection.shapes,\r\n              title: shapeCollection.name,\r\n              description: shapeCollection.description\r\n            };\r\n\r\n            const processResult = await this.documentProcessor.processDocument(spec);\r\n            result.svg = processResult.svg;\r\n            result.document = processResult.document;\r\n          }\r\n\r\n          logger.info('Shape collection created successfully', { \r\n            collection, \r\n            shapeCount: shapeCollection.shapes.length \r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(result, null, 2)\r\n            }]\r\n          };\r\n\r\n        } catch (error) {\r\n          logger.error('Shape collection creation failed', { error, collection, options });\r\n          throw new Error(`Shape collection creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Health Check\r\n    this.addTool({\r\n      name: 'health_check',\r\n      description: 'Check the health and status of the SVG MCP server',\r\n      execute: async () => {\r\n        const health = {\r\n          status: 'healthy',\r\n          timestamp: new Date().toISOString(),\r\n          version: this.config.version,\r\n          config: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n            debugEnabled: this.config.enableDebug,\r\n          },\r\n          renderer: {\r\n            status: 'operational',\r\n            capabilities: this.svgRenderer.getCapabilities(),\r\n          },\r\n          processor: {\r\n            status: 'operational',\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n          },\r\n        };\r\n\r\n        logger.debug('Health check performed', health);\r\n        return {\r\n          content: [{\r\n            type: 'text',\r\n            text: JSON.stringify(health, null, 2)\r\n          }]\r\n        };\r\n      }\r\n    });\r\n\r\n    // Tool: Validate SVG Document\r\n    this.addTool({\r\n      name: 'validate_svg',\r\n      description: 'Validate an SVG document with comprehensive checks',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n        }),\r\n        preset: z.enum(['strict', 'standard', 'minimal', 'performance', 'accessibility']).default('standard'),\r\n        includeRecommendations: z.boolean().default(true),\r\n        includeQuickFixes: z.boolean().default(true),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, preset, includeRecommendations, includeQuickFixes } = args;\r\n\r\n        try {\r\n          logger.info('Validating SVG document', { preset, elementCount: document.elements?.length });\r\n\r\n          // Convert document args to proper SvgDocument format\r\n          const svgDocument = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            ...(document.title && { title: document.title }),\r\n            ...(document.description && { description: document.description })\r\n          };\r\n\r\n          const validationResult = await ValidationFactory.validateDocument(svgDocument, { preset });\r\n\r\n          const response: any = {\r\n            valid: validationResult.overall.valid,\r\n            score: validationResult.overall.score,\r\n            summary: validationResult.overall.summary,\r\n            errors: validationResult.documentResult?.errors || [],\r\n            warnings: validationResult.documentResult?.warnings || [],\r\n          };\r\n\r\n          if (includeRecommendations) {\r\n            response.recommendations = validationResult.recommendations;\r\n          }\r\n\r\n          if (includeQuickFixes) {\r\n            response.quickFixes = validationResult.quickFixes;\r\n          }\r\n\r\n          if (validationResult.documentResult) {\r\n            response.reports = {\r\n              accessibility: validationResult.documentResult.accessibility,\r\n              performance: validationResult.documentResult.performance,\r\n              compliance: validationResult.documentResult.compliance,\r\n              documentStats: validationResult.documentResult.documentStats,\r\n            };\r\n          }\r\n\r\n          logger.debug('Validation completed', { \r\n            valid: response.valid, \r\n            score: response.score,\r\n            errorCount: response.errors.length,\r\n            warningCount: response.warnings.length \r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(response, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG validation failed', { error, document });\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Quick Validate SVG\r\n    this.addTool({\r\n      name: 'quick_validate_svg',\r\n      description: 'Quick validation for basic structure and critical errors',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n        }),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document } = args;\r\n\r\n        try {\r\n          const result = ValidationFactory.quickValidate(document);\r\n\r\n          logger.debug('Quick validation completed', result);\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(result, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('Quick validation failed', { error, document });\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Validate with Auto-Fix\r\n    this.addTool({\r\n      name: 'validate_and_fix_svg',\r\n      description: 'Validate SVG document and apply automatic fixes where possible',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n        }),\r\n        preset: z.enum(['strict', 'standard', 'minimal', 'performance', 'accessibility']).default('standard'),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, preset } = args;\r\n\r\n        try {\r\n          logger.info('Validating SVG document with auto-fix', { preset, elementCount: document.elements?.length });\r\n\r\n          // Convert document args to proper SvgDocument format\r\n          const svgDocument = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            ...(document.title && { title: document.title }),\r\n            ...(document.description && { description: document.description })\r\n          };\r\n\r\n          const result = await ValidationFactory.validateWithAutoFix(svgDocument, preset);\r\n\r\n          const response: any = {\r\n            original: {\r\n              valid: result.validationResult.overall.valid,\r\n              score: result.validationResult.overall.score,\r\n              summary: result.validationResult.overall.summary,\r\n            },\r\n            autoFixApplied: !!result.autoFixedDocument,\r\n            appliedFixes: result.appliedFixes,\r\n            fixedDocument: result.autoFixedDocument,\r\n          };\r\n\r\n          // If fixes were applied, validate the fixed document\r\n          if (result.autoFixedDocument) {\r\n            const fixedValidation = await ValidationFactory.validateDocument(result.autoFixedDocument, { preset });\r\n            (response as any).fixedValidation = {\r\n              valid: fixedValidation.overall.valid,\r\n              score: fixedValidation.overall.score,\r\n              summary: fixedValidation.overall.summary,\r\n            };\r\n          }\r\n\r\n          logger.debug('Validation with auto-fix completed', { \r\n            fixesApplied: result.appliedFixes.length,\r\n            originalScore: response.original.score,\r\n            fixedScore: (response as any).fixedValidation?.score \r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(response, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG validation with auto-fix failed', { error, document });\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private setupResources(): void {\r\n    // Resource: Server Information\r\n    this.addResource({\r\n      uri: 'server://info',\r\n      name: 'Server Information',\r\n      description: 'Information about the SVG MCP server',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const info = {\r\n          name: this.config.name,\r\n          version: this.config.version,\r\n          description: this.config.description,\r\n          capabilities: {\r\n            svgGeneration: true,\r\n            documentProcessing: true,\r\n            validation: true,\r\n            optimization: true,\r\n            accessibility: true,\r\n            rfc7996Compliance: true,\r\n            metadataGeneration: true,\r\n            transforms: ['scale', 'translate', 'normalize', 'accessibility'],\r\n          },\r\n          limits: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n          },\r\n          supportedElements: this.svgRenderer.getSupportedElements(),\r\n          processor: {\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n            features: [\r\n              'document_validation',\r\n              'element_relationship_analysis',\r\n              'compliance_checking',\r\n              'optimization',\r\n              'metadata_generation',\r\n              'accessibility_enhancement',\r\n            ],\r\n          },\r\n        };\r\n\r\n        logger.debug('Server info requested', info);\r\n        return {\r\n          text: JSON.stringify(info, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'server://info'\r\n        };\r\n      }\r\n    });\r\n\r\n    // Resource: SVG Schema\r\n    this.addResource({\r\n      uri: 'schema://svg-document',\r\n      name: 'SVG Document Schema',\r\n      description: 'JSON schema for SVG document structure',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const schema = {\r\n          $schema: 'http://json-schema.org/draft-07/schema#',\r\n          title: 'SVG Document',\r\n          description: 'Schema for SVG document specification',\r\n          type: 'object',\r\n          required: ['viewBox', 'elements'],\r\n          properties: {\r\n            viewBox: {\r\n              type: 'object',\r\n              required: ['x', 'y', 'width', 'height'],\r\n              properties: {\r\n                x: { type: 'number' },\r\n                y: { type: 'number' },\r\n                width: { type: 'number', minimum: 0 },\r\n                height: { type: 'number', minimum: 0 },\r\n              },\r\n            },\r\n            elements: {\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/SvgElement' },\r\n            },\r\n            // Additional properties would be defined here\r\n          },\r\n          definitions: {\r\n            SvgElement: {\r\n              oneOf: [\r\n                { $ref: '#/definitions/CircleElement' },\r\n                { $ref: '#/definitions/RectElement' },\r\n                { $ref: '#/definitions/LineElement' },\r\n                { $ref: '#/definitions/PathElement' },\r\n                { $ref: '#/definitions/TextElement' },\r\n                { $ref: '#/definitions/GroupElement' },\r\n              ],\r\n            },\r\n            // Element definitions would be expanded here\r\n          },\r\n        };\r\n\r\n        return {\r\n          text: JSON.stringify(schema, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'schema://svg-document'\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate bounding box for a shape element\r\n   */\r\n  private calculateShapeBoundingBox(shape: any): { x: number; y: number; width: number; height: number } {\r\n    switch (shape.type) {\r\n      case 'circle':\r\n        return {\r\n          x: shape.cx - shape.r,\r\n          y: shape.cy - shape.r,\r\n          width: shape.r * 2,\r\n          height: shape.r * 2\r\n        };\r\n      case 'rect':\r\n        return {\r\n          x: shape.x,\r\n          y: shape.y,\r\n          width: shape.width,\r\n          height: shape.height\r\n        };\r\n      case 'line':\r\n        return {\r\n          x: Math.min(shape.x1, shape.x2),\r\n          y: Math.min(shape.y1, shape.y2),\r\n          width: Math.abs(shape.x2 - shape.x1),\r\n          height: Math.abs(shape.y2 - shape.y1)\r\n        };\r\n      case 'text':\r\n        // Estimate text bounding box\r\n        const fontSize = shape['font-size'] || 16;\r\n        const textLength = shape.content.length;\r\n        return {\r\n          x: shape.x,\r\n          y: shape.y - fontSize,\r\n          width: textLength * fontSize * 0.6, // Rough estimate\r\n          height: fontSize\r\n        };\r\n      default:\r\n        // Default bounding box for unknown shapes\r\n        return { x: 0, y: 0, width: 100, height: 100 };\r\n    }\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    logger.info('Starting SVG MCP Server', {\r\n      name: this.config.name,\r\n      version: this.config.version,\r\n    });\r\n\r\n    await super.start();\r\n    \r\n    logger.info('SVG MCP Server started successfully');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    logger.info('Stopping SVG MCP Server');\r\n    // Cleanup logic would go here\r\n    logger.info('SVG MCP Server stopped');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}