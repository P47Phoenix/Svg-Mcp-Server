{"file":"C:\\GitHub\\Svg-Mcp-Server\\tests\\setup.ts","mappings":";;AAAA,gDAAgD;AAChD,2CAAqC;AAErC,8CAA8C;AAC9C,cAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AAEvB,+CAA+C;AAC/C,MAAM,eAAe,GAAG,EAAE,GAAG,OAAO,EAAE,CAAC;AAEvC,UAAU,CAAC,GAAG,EAAE;IACd,uCAAuC;IACvC,OAAO,CAAC,GAAG,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;IACxB,OAAO,CAAC,IAAI,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;IACzB,OAAO,CAAC,KAAK,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;IAC1B,OAAO,CAAC,IAAI,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;IACzB,OAAO,CAAC,KAAK,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;AAC5B,CAAC,CAAC,CAAC;AAEH,SAAS,CAAC,GAAG,EAAE;IACb,kCAAkC;IAClC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;AAC1C,CAAC,CAAC,CAAC;AAWH,yCAAyC;AACzC,MAAM,CAAC,MAAM,CAAC;IACZ,YAAY,CAAC,QAAgB;QAC3B,MAAM,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;QACvE,MAAM,UAAU,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAChD,MAAM,YAAY,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAEhD,IAAI,KAAK,IAAI,UAAU,IAAI,YAAY,EAAE,CAAC;YACxC,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,wBAAwB;gBAC3D,IAAI,EAAE,IAAI;aACX,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,OAAO,EAAE,GAAG,EAAE,CAAC,YAAY,QAAQ,2CAA2C;gBAC9E,IAAI,EAAE,KAAK;aACZ,CAAC;QACJ,CAAC;IACH,CAAC;CACF,CAAC,CAAC;AAEH,oBAAoB;AACpB,OAAO,CAAC,GAAG,CAAC,QAAQ,GAAG,MAAM,CAAC","names":[],"sources":["C:\\GitHub\\Svg-Mcp-Server\\tests\\setup.ts"],"sourcesContent":["// Jest setup file for global test configuration\r\nimport { jest } from '@jest/globals';\r\n\r\n// Increase test timeout for longer operations\r\njest.setTimeout(30000);\r\n\r\n// Mock console methods in tests to avoid noise\r\nconst originalConsole = { ...console };\r\n\r\nbeforeEach(() => {\r\n  // Reset console mocks before each test\r\n  console.log = jest.fn();\r\n  console.warn = jest.fn();\r\n  console.error = jest.fn();\r\n  console.info = jest.fn();\r\n  console.debug = jest.fn();\r\n});\r\n\r\nafterEach(() => {\r\n  // Restore console after each test\r\n  Object.assign(console, originalConsole);\r\n});\r\n\r\n// Global test helpers\r\ndeclare global {\r\n  namespace jest {\r\n    interface Matchers<R> {\r\n      toBeValidSvg(): R;\r\n    }\r\n  }\r\n}\r\n\r\n// Custom Jest matcher for SVG validation\r\nexpect.extend({\r\n  toBeValidSvg(received: string) {\r\n    const isSvg = received.includes('<svg') && received.includes('</svg>');\r\n    const hasViewBox = received.includes('viewBox');\r\n    const hasNamespace = received.includes('xmlns');\r\n    \r\n    if (isSvg && hasViewBox && hasNamespace) {\r\n      return {\r\n        message: () => `Expected ${received} not to be a valid SVG`,\r\n        pass: true,\r\n      };\r\n    } else {\r\n      return {\r\n        message: () => `Expected ${received} to be a valid SVG with viewBox and xmlns`,\r\n        pass: false,\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\n// Environment setup\r\nprocess.env.NODE_ENV = 'test';\r\n"],"version":3}