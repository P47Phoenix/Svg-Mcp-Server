{"version":3,"names":["cov_1ktf0pjl7m","actualCoverage","FastMCP","z","logger","SvgRenderer","SvgDocumentProcessor","SvgValidationError","SvgMcpServer","svgRenderer","documentProcessor","config","constructor","f","s","name","version","description","b","maxSvgSize","enableDebug","setLogLevel","setupTools","setupResources","addTool","parameters","object","document","viewBox","x","number","y","width","min","height","elements","array","any","optional","title","string","style","optimize","boolean","default","validate","execute","args","info","elementCount","length","spec","undefined","generateMetadata","result","processDocument","svg","size","processingTime","warnings","errors","content","type","text","JSON","stringify","metadata","processing","time","generated","Date","toISOString","stats","complexity","features","error","Error","message","validationResult","valid","compliance","accessibility","health","status","timestamp","debugEnabled","renderer","capabilities","getCapabilities","processor","statistics","getProcessingStats","debug","addResource","uri","mimeType","load","svgGeneration","documentProcessing","validation","optimization","rfc7996Compliance","metadataGeneration","transforms","limits","supportedElements","getSupportedElements","schema","$schema","required","properties","minimum","items","$ref","definitions","SvgElement","oneOf","start","stop"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts"],"sourcesContent":["/**\r\n * SVG MCP Server Implementation\r\n * \r\n * This is the main server class that extends FastMCP to provide\r\n * SVG generation capabilities through the Model Context Protocol.\r\n */\r\n\r\nimport { FastMCP } from 'fastmcp';\r\nimport { z } from 'zod';\r\nimport { logger } from '../utils/logger.js';\r\nimport { SvgRenderer } from '../core/SvgRenderer.js';\r\nimport { SvgDocumentProcessor, SvgDocumentSpec } from '../core/SvgDocumentProcessor.js';\r\nimport { SvgValidationError } from '../types/svg.js';\r\n\r\nexport interface SvgMcpServerConfig {\r\n  name: string;\r\n  version: string;\r\n  description?: string;\r\n  maxSvgSize?: number;\r\n  enableDebug?: boolean;\r\n}\r\n\r\nexport class SvgMcpServer extends FastMCP {\r\n  private svgRenderer: SvgRenderer;\r\n  private documentProcessor: SvgDocumentProcessor;\r\n  private config: Required<SvgMcpServerConfig>;\r\n\r\n  constructor(config: SvgMcpServerConfig) {\r\n    super({\r\n      name: config.name,\r\n      version: config.version as `${number}.${number}.${number}`,\r\n    });\r\n\r\n    this.config = {\r\n      ...config,\r\n      description: config.description || 'SVG MCP Server',\r\n      maxSvgSize: config.maxSvgSize || 10000,\r\n      enableDebug: config.enableDebug || false,\r\n    };\r\n\r\n    this.svgRenderer = new SvgRenderer();\r\n    this.documentProcessor = new SvgDocumentProcessor();\r\n    \r\n    if (this.config.enableDebug) {\r\n      logger.setLogLevel('debug');\r\n    }\r\n\r\n    this.setupTools();\r\n    this.setupResources();\r\n  }\r\n\r\n  private setupTools(): void {\r\n    // Tool: Generate SVG\r\n    this.addTool({\r\n      name: 'generate_svg',\r\n      description: 'Generate an SVG document from a specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          width: z.number().min(0).optional(),\r\n          height: z.number().min(0).optional(),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n          style: z.string().optional(),\r\n        }),\r\n        optimize: z.boolean().default(true),\r\n        validate: z.boolean().default(true),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, optimize = true, validate = true } = args;\r\n\r\n        try {\r\n          logger.info('Processing SVG document request', { \r\n            elementCount: document.elements?.length,\r\n            optimize, \r\n            validate \r\n          });\r\n\r\n          // Convert to document specification\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            ...(document.width !== undefined && { width: document.width }),\r\n            ...(document.height !== undefined && { height: document.height }),\r\n            ...(document.title && { title: document.title }),\r\n            ...(document.description && { description: document.description }),\r\n            ...(document.style && { style: document.style }),\r\n            optimize,\r\n            validate,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Process document using the document processor\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n\r\n          // Check size limits\r\n          if (result.svg.length > this.config.maxSvgSize) {\r\n            throw new SvgValidationError(\r\n              `Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`,\r\n              [`SVG size: ${result.svg.length}, limit: ${this.config.maxSvgSize}`]\r\n            );\r\n          }\r\n\r\n          logger.info('SVG document processed successfully', {\r\n            size: result.svg.length,\r\n            elementCount: result.document.elements.length,\r\n            processingTime: result.processingTime,\r\n            warnings: result.warnings.length,\r\n            errors: result.errors.length,\r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify({\r\n                svg: result.svg,\r\n                document: result.document,\r\n                metadata: result.metadata,\r\n                processing: {\r\n                  time: result.processingTime,\r\n                  warnings: result.warnings,\r\n                  errors: result.errors,\r\n                  generated: new Date().toISOString(),\r\n                },\r\n                stats: {\r\n                  size: result.svg.length,\r\n                  elementCount: result.document.elements.length,\r\n                  complexity: result.metadata.complexity,\r\n                  features: result.metadata.features,\r\n                },\r\n              }, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('Failed to generate SVG', error);\r\n          \r\n          if (error instanceof SvgValidationError) {\r\n            throw error;\r\n          }\r\n          \r\n          throw new Error(`SVG generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Validate SVG Document\r\n    this.addTool({\r\n      name: 'validate_svg_document',\r\n      description: 'Validate an SVG document specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n        }),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document } = args;\r\n        try {\r\n          logger.info('Validating SVG document', { \r\n            elementCount: document.elements?.length \r\n          });\r\n          \r\n          // Convert to document specification for validation\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            validate: true,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Use document processor for comprehensive validation\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n          \r\n          const validationResult = {\r\n            valid: result.errors.length === 0,\r\n            errors: result.errors,\r\n            warnings: result.warnings,\r\n            metadata: result.metadata,\r\n            processingTime: result.processingTime,\r\n            compliance: result.metadata.compliance,\r\n            accessibility: result.metadata.accessibility,\r\n            features: result.metadata.features,\r\n            complexity: result.metadata.complexity,\r\n          };\r\n          \r\n          logger.info('SVG document validation completed', {\r\n            valid: validationResult.valid,\r\n            errors: validationResult.errors.length,\r\n            warnings: validationResult.warnings.length,\r\n          });\r\n          \r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(validationResult, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG document validation failed', error);\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Health Check\r\n    this.addTool({\r\n      name: 'health_check',\r\n      description: 'Check the health and status of the SVG MCP server',\r\n      execute: async () => {\r\n        const health = {\r\n          status: 'healthy',\r\n          timestamp: new Date().toISOString(),\r\n          version: this.config.version,\r\n          config: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n            debugEnabled: this.config.enableDebug,\r\n          },\r\n          renderer: {\r\n            status: 'operational',\r\n            capabilities: this.svgRenderer.getCapabilities(),\r\n          },\r\n          processor: {\r\n            status: 'operational',\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n          },\r\n        };\r\n\r\n        logger.debug('Health check performed', health);\r\n        return {\r\n          content: [{\r\n            type: 'text',\r\n            text: JSON.stringify(health, null, 2)\r\n          }]\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private setupResources(): void {\r\n    // Resource: Server Information\r\n    this.addResource({\r\n      uri: 'server://info',\r\n      name: 'Server Information',\r\n      description: 'Information about the SVG MCP server',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const info = {\r\n          name: this.config.name,\r\n          version: this.config.version,\r\n          description: this.config.description,\r\n          capabilities: {\r\n            svgGeneration: true,\r\n            documentProcessing: true,\r\n            validation: true,\r\n            optimization: true,\r\n            accessibility: true,\r\n            rfc7996Compliance: true,\r\n            metadataGeneration: true,\r\n            transforms: ['scale', 'translate', 'normalize', 'accessibility'],\r\n          },\r\n          limits: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n          },\r\n          supportedElements: this.svgRenderer.getSupportedElements(),\r\n          processor: {\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n            features: [\r\n              'document_validation',\r\n              'element_relationship_analysis',\r\n              'compliance_checking',\r\n              'optimization',\r\n              'metadata_generation',\r\n              'accessibility_enhancement',\r\n            ],\r\n          },\r\n        };\r\n\r\n        logger.debug('Server info requested', info);\r\n        return {\r\n          text: JSON.stringify(info, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'server://info'\r\n        };\r\n      }\r\n    });\r\n\r\n    // Resource: SVG Schema\r\n    this.addResource({\r\n      uri: 'schema://svg-document',\r\n      name: 'SVG Document Schema',\r\n      description: 'JSON schema for SVG document structure',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const schema = {\r\n          $schema: 'http://json-schema.org/draft-07/schema#',\r\n          title: 'SVG Document',\r\n          description: 'Schema for SVG document specification',\r\n          type: 'object',\r\n          required: ['viewBox', 'elements'],\r\n          properties: {\r\n            viewBox: {\r\n              type: 'object',\r\n              required: ['x', 'y', 'width', 'height'],\r\n              properties: {\r\n                x: { type: 'number' },\r\n                y: { type: 'number' },\r\n                width: { type: 'number', minimum: 0 },\r\n                height: { type: 'number', minimum: 0 },\r\n              },\r\n            },\r\n            elements: {\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/SvgElement' },\r\n            },\r\n            // Additional properties would be defined here\r\n          },\r\n          definitions: {\r\n            SvgElement: {\r\n              oneOf: [\r\n                { $ref: '#/definitions/CircleElement' },\r\n                { $ref: '#/definitions/RectElement' },\r\n                { $ref: '#/definitions/LineElement' },\r\n                { $ref: '#/definitions/PathElement' },\r\n                { $ref: '#/definitions/TextElement' },\r\n                { $ref: '#/definitions/GroupElement' },\r\n              ],\r\n            },\r\n            // Element definitions would be expanded here\r\n          },\r\n        };\r\n\r\n        return {\r\n          text: JSON.stringify(schema, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'schema://svg-document'\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    logger.info('Starting SVG MCP Server', {\r\n      name: this.config.name,\r\n      version: this.config.version,\r\n    });\r\n\r\n    await super.start();\r\n    \r\n    logger.info('SVG MCP Server started successfully');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    logger.info('Stopping SVG MCP Server');\r\n    // Cleanup logic would go here\r\n    logger.info('SVG MCP Server stopped');\r\n  }\r\n}\r\n"],"mappingsyB+C;IAAAA,cAAA,YAAAA,CAAA;MAAA,OAAAC,cAAA;IAAA;EAAA;EAAA,OAAAA,cAAA;AAAA;AAAAD,cAAA;AAzB/C;;;;;;AAOA,SAASE,OAAO,QAAQ,SAAS;AACjC,SAASC,CAAC,QAAQ,KAAK;AACvB,SAASC,MAAM,QAAQ,oBAAoB;AAC3C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,SAASC,oBAAoB,QAAyB,iCAAiC;AACvF,SAASC,kBAAkB,QAAQ,iBAAiB;AAUpD,OAAM,MAAOC,YAAa,SAAQN,OAAO;EAC/BO,WAAW;EACXC,iBAAiB;EACjBC,MAAM;EAEdC,YAAYD,MAA0B;IAAA;IAAAX,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAc,CAAA;IACpC,KAAK,CAAC;MACJC,IAAI,EAAEJ,MAAM,CAACI,IAAI;MACjBC,OAAO,EAAEL,MAAM,CAACK;KACjB,CAAC;IAAC;IAAAhB,cAAA,GAAAc,CAAA;IAEH,IAAI,CAACH,MAAM,GAAG;MACZ,GAAGA,MAAM;MACTM,WAAW;MAAE;MAAA,CAAAjB,cAAA,GAAAkB,CAAA,UAAAP,MAAM,CAACM,WAAW;MAAA;MAAA,CAAAjB,cAAA,GAAAkB,CAAA,UAAI,gBAAgB;MACnDC,UAAU;MAAE;MAAA,CAAAnB,cAAA,GAAAkB,CAAA,UAAAP,MAAM,CAACQ,UAAU;MAAA;MAAA,CAAAnB,cAAA,GAAAkB,CAAA,UAAI,KAAK;MACtCE,WAAW;MAAE;MAAA,CAAApB,cAAA,GAAAkB,CAAA,UAAAP,MAAM,CAACS,WAAW;MAAA;MAAA,CAAApB,cAAA,GAAAkB,CAAA,UAAI,KAAK;KACzC;IAAC;IAAAlB,cAAA,GAAAc,CAAA;IAEF,IAAI,CAACL,WAAW,GAAG,IAAIJ,WAAW,EAAE;IAAC;IAAAL,cAAA,GAAAc,CAAA;IACrC,IAAI,CAACJ,iBAAiB,GAAG,IAAIJ,oBAAoB,EAAE;IAAC;IAAAN,cAAA,GAAAc,CAAA;IAEpD,IAAI,IAAI,CAACH,MAAM,CAACS,WAAW,EAAE;MAAA;MAAApB,cAAA,GAAAkB,CAAA;MAAAlB,cAAA,GAAAc,CAAA;MAC3BV,MAAM,CAACiB,WAAW,CAAC,OAAO,CAAC;IAC7B,CAAC;IAAA;IAAA;MAAArB,cAAA,GAAAkB,CAAA;IAAA;IAAAlB,cAAA,GAAAc,CAAA;IAED,IAAI,CAACQ,UAAU,EAAE;IAAC;IAAAtB,cAAA,GAAAc,CAAA;IAClB,IAAI,CAACS,cAAc,EAAE;EACvB;EAEQD,UAAUA,CAAA;IAAA;IAAAtB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAc,CAAA;IAChB;IACA,IAAI,CAACU,OAAO,CAAC;MACXT,IAAI,EAAE,cAAc;MACpBE,WAAW,EAAE,+CAA+C;MAC5DQ,UAAU,EAAEtB,CAAC,CAACuB,MAAM,CAAC;QACnBC,QAAQ,EAAExB,CAAC,CAACuB,MAAM,CAAC;UACjBE,OAAO,EAAEzB,CAAC,CAACuB,MAAM,CAAC;YAChBG,CAAC,EAAE1B,CAAC,CAAC2B,MAAM,EAAE;YACbC,CAAC,EAAE5B,CAAC,CAAC2B,MAAM,EAAE;YACbE,KAAK,EAAE7B,CAAC,CAAC2B,MAAM,EAAE,CAACG,GAAG,CAAC,CAAC,CAAC;YACxBC,MAAM,EAAE/B,CAAC,CAAC2B,MAAM,EAAE,CAACG,GAAG,CAAC,CAAC;WACzB,CAAC;UACFE,QAAQ,EAAEhC,CAAC,CAACiC,KAAK,CAACjC,CAAC,CAACkC,GAAG,EAAE,CAAC;UAC1BL,KAAK,EAAE7B,CAAC,CAAC2B,MAAM,EAAE,CAACG,GAAG,CAAC,CAAC,CAAC,CAACK,QAAQ,EAAE;UACnCJ,MAAM,EAAE/B,CAAC,CAAC2B,MAAM,EAAE,CAACG,GAAG,CAAC,CAAC,CAAC,CAACK,QAAQ,EAAE;UACpCC,KAAK,EAAEpC,CAAC,CAACqC,MAAM,EAAE,CAACF,QAAQ,EAAE;UAC5BrB,WAAW,EAAEd,CAAC,CAACqC,MAAM,EAAE,CAACF,QAAQ,EAAE;UAClCG,KAAK,EAAEtC,CAAC,CAACqC,MAAM,EAAE,CAACF,QAAQ;SAC3B,CAAC;QACFI,QAAQ,EAAEvC,CAAC,CAACwC,OAAO,EAAE,CAACC,OAAO,CAAC,IAAI,CAAC;QACnCC,QAAQ,EAAE1C,CAAC,CAACwC,OAAO,EAAE,CAACC,OAAO,CAAC,IAAI;OACnC,CAAC;MACFE,OAAO,EAAE,MAAOC,IAAI,IAAI;QAAA;QAAA/C,cAAA,GAAAa,CAAA;QACtB,MAAM;UAAEc,QAAQ;UAAEe,QAAQ;UAAA;UAAA,CAAA1C,cAAA,GAAAkB,CAAA,UAAG,IAAI;UAAE2B,QAAQ;UAAA;UAAA,CAAA7C,cAAA,GAAAkB,CAAA,UAAG,IAAI;QAAA,CAAE;QAAA;QAAA,CAAAlB,cAAA,GAAAc,CAAA,OAAGiC,IAAI;QAAC;QAAA/C,cAAA,GAAAc,CAAA;QAE5D,IAAI;UAAA;UAAAd,cAAA,GAAAc,CAAA;UACFV,MAAM,CAAC4C,IAAI,CAAC,iCAAiC,EAAE;YAC7CC,YAAY,EAAEtB,QAAQ,CAACQ,QAAQ,EAAEe,MAAM;YACvCR,QAAQ;YACRG;WACD,CAAC;UAEF;UACA,MAAMM,IAAI;UAAA;UAAA,CAAAnD,cAAA,GAAAc,CAAA,QAAoB;YAC5Bc,OAAO,EAAED,QAAQ,CAACC,OAAO;YACzBO,QAAQ;YAAE;YAAA,CAAAnC,cAAA,GAAAkB,CAAA,UAAAS,QAAQ,CAACQ,QAAQ;YAAA;YAAA,CAAAnC,cAAA,GAAAkB,CAAA,UAAI,EAAE;YACjC;YAAI;YAAA,CAAAlB,cAAA,GAAAkB,CAAA,UAAAS,QAAQ,CAACK,KAAK,KAAKoB,SAAS;YAAA;YAAA,CAAApD,cAAA,GAAAkB,CAAA,UAAI;cAAEc,KAAK,EAAEL,QAAQ,CAACK;YAAK,CAAE,EAAC;YAC9D;YAAI;YAAA,CAAAhC,cAAA,GAAAkB,CAAA,UAAAS,QAAQ,CAACO,MAAM,KAAKkB,SAAS;YAAA;YAAA,CAAApD,cAAA,GAAAkB,CAAA,UAAI;cAAEgB,MAAM,EAAEP,QAAQ,CAACO;YAAM,CAAE,EAAC;YACjE;YAAI;YAAA,CAAAlC,cAAA,GAAAkB,CAAA,UAAAS,QAAQ,CAACY,KAAK;YAAA;YAAA,CAAAvC,cAAA,GAAAkB,CAAA,UAAI;cAAEqB,KAAK,EAAEZ,QAAQ,CAACY;YAAK,CAAE,EAAC;YAChD;YAAI;YAAA,CAAAvC,cAAA,GAAAkB,CAAA,WAAAS,QAAQ,CAACV,WAAW;YAAA;YAAA,CAAAjB,cAAA,GAAAkB,CAAA,WAAI;cAAED,WAAW,EAAEU,QAAQ,CAACV;YAAW,CAAE,EAAC;YAClE;YAAI;YAAA,CAAAjB,cAAA,GAAAkB,CAAA,WAAAS,QAAQ,CAACc,KAAK;YAAA;YAAA,CAAAzC,cAAA,GAAAkB,CAAA,WAAI;cAAEuB,KAAK,EAAEd,QAAQ,CAACc;YAAK,CAAE,EAAC;YAChDC,QAAQ;YACRG,QAAQ;YACRQ,gBAAgB,EAAE;WACnB;UAED;UACA,MAAMC,MAAM;UAAA;UAAA,CAAAtD,cAAA,GAAAc,CAAA,QAAG,MAAM,IAAI,CAACJ,iBAAiB,CAAC6C,eAAe,CAACJ,IAAI,CAAC;UAEjE;UAAA;UAAAnD,cAAA,GAAAc,CAAA;UACA,IAAIwC,MAAM,CAACE,GAAG,CAACN,MAAM,GAAG,IAAI,CAACvC,MAAM,CAACQ,UAAU,EAAE;YAAA;YAAAnB,cAAA,GAAAkB,CAAA;YAAAlB,cAAA,GAAAc,CAAA;YAC9C,MAAM,IAAIP,kBAAkB,CAC1B,+CAA+C,IAAI,CAACI,MAAM,CAACQ,UAAU,aAAa,EAClF,CAAC,aAAamC,MAAM,CAACE,GAAG,CAACN,MAAM,YAAY,IAAI,CAACvC,MAAM,CAACQ,UAAU,EAAE,CAAC,CACrE;UACH,CAAC;UAAA;UAAA;YAAAnB,cAAA,GAAAkB,CAAA;UAAA;UAAAlB,cAAA,GAAAc,CAAA;UAEDV,MAAM,CAAC4C,IAAI,CAAC,qCAAqC,EAAE;YACjDS,IAAI,EAAEH,MAAM,CAACE,GAAG,CAACN,MAAM;YACvBD,YAAY,EAAEK,MAAM,CAAC3B,QAAQ,CAACQ,QAAQ,CAACe,MAAM;YAC7CQ,cAAc,EAAEJ,MAAM,CAACI,cAAc;YACrCC,QAAQ,EAAEL,MAAM,CAACK,QAAQ,CAACT,MAAM;YAChCU,MAAM,EAAEN,MAAM,CAACM,MAAM,CAACV;WACvB,CAAC;UAAC;UAAAlD,cAAA,GAAAc,CAAA;UAEH,OAAO;YACL+C,OAAO,EAAE,CAAC;cACRC,IAAI,EAAE,MAAM;cACZC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;gBACnBT,GAAG,EAAEF,MAAM,CAACE,GAAG;gBACf7B,QAAQ,EAAE2B,MAAM,CAAC3B,QAAQ;gBACzBuC,QAAQ,EAAEZ,MAAM,CAACY,QAAQ;gBACzBC,UAAU,EAAE;kBACVC,IAAI,EAAEd,MAAM,CAACI,cAAc;kBAC3BC,QAAQ,EAAEL,MAAM,CAACK,QAAQ;kBACzBC,MAAM,EAAEN,MAAM,CAACM,MAAM;kBACrBS,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;iBAClC;gBACDC,KAAK,EAAE;kBACLf,IAAI,EAAEH,MAAM,CAACE,GAAG,CAACN,MAAM;kBACvBD,YAAY,EAAEK,MAAM,CAAC3B,QAAQ,CAACQ,QAAQ,CAACe,MAAM;kBAC7CuB,UAAU,EAAEnB,MAAM,CAACY,QAAQ,CAACO,UAAU;kBACtCC,QAAQ,EAAEpB,MAAM,CAACY,QAAQ,CAACQ;;eAE7B,EAAE,IAAI,EAAE,CAAC;aACX;WACF;QACH,CAAC,CAAC,OAAOC,KAAK,EAAE;UAAA;UAAA3E,cAAA,GAAAc,CAAA;UACdV,MAAM,CAACuE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;UAAC;UAAA3E,cAAA,GAAAc,CAAA;UAE9C,IAAI6D,KAAK,YAAYpE,kBAAkB,EAAE;YAAA;YAAAP,cAAA,GAAAkB,CAAA;YAAAlB,cAAA,GAAAc,CAAA;YACvC,MAAM6D,KAAK;UACb,CAAC;UAAA;UAAA;YAAA3E,cAAA,GAAAkB,CAAA;UAAA;UAAAlB,cAAA,GAAAc,CAAA;UAED,MAAM,IAAI8D,KAAK,CAAC,0BAA0BD,KAAK,YAAYC,KAAK;UAAA;UAAA,CAAA5E,cAAA,GAAAkB,CAAA,WAAGyD,KAAK,CAACE,OAAO;UAAA;UAAA,CAAA7E,cAAA,GAAAkB,CAAA,WAAG,eAAe,GAAE,CAAC;QACvG;MACF;KACD,CAAC;IAEF;IAAA;IAAAlB,cAAA,GAAAc,CAAA;IACA,IAAI,CAACU,OAAO,CAAC;MACXT,IAAI,EAAE,uBAAuB;MAC7BE,WAAW,EAAE,wCAAwC;MACrDQ,UAAU,EAAEtB,CAAC,CAACuB,MAAM,CAAC;QACnBC,QAAQ,EAAExB,CAAC,CAACuB,MAAM,CAAC;UACjBE,OAAO,EAAEzB,CAAC,CAACuB,MAAM,CAAC;YAChBG,CAAC,EAAE1B,CAAC,CAAC2B,MAAM,EAAE;YACbC,CAAC,EAAE5B,CAAC,CAAC2B,MAAM,EAAE;YACbE,KAAK,EAAE7B,CAAC,CAAC2B,MAAM,EAAE,CAACG,GAAG,CAAC,CAAC,CAAC;YACxBC,MAAM,EAAE/B,CAAC,CAAC2B,MAAM,EAAE,CAACG,GAAG,CAAC,CAAC;WACzB,CAAC;UACFE,QAAQ,EAAEhC,CAAC,CAACiC,KAAK,CAACjC,CAAC,CAACkC,GAAG,EAAE;SAC1B;OACF,CAAC;MACFS,OAAO,EAAE,MAAOC,IAAI,IAAI;QAAA;QAAA/C,cAAA,GAAAa,CAAA;QACtB,MAAM;UAAEc;QAAQ,CAAE;QAAA;QAAA,CAAA3B,cAAA,GAAAc,CAAA,QAAGiC,IAAI;QAAC;QAAA/C,cAAA,GAAAc,CAAA;QAC1B,IAAI;UAAA;UAAAd,cAAA,GAAAc,CAAA;UACFV,MAAM,CAAC4C,IAAI,CAAC,yBAAyB,EAAE;YACrCC,YAAY,EAAEtB,QAAQ,CAACQ,QAAQ,EAAEe;WAClC,CAAC;UAEF;UACA,MAAMC,IAAI;UAAA;UAAA,CAAAnD,cAAA,GAAAc,CAAA,QAAoB;YAC5Bc,OAAO,EAAED,QAAQ,CAACC,OAAO;YACzBO,QAAQ;YAAE;YAAA,CAAAnC,cAAA,GAAAkB,CAAA,WAAAS,QAAQ,CAACQ,QAAQ;YAAA;YAAA,CAAAnC,cAAA,GAAAkB,CAAA,WAAI,EAAE;YACjC2B,QAAQ,EAAE,IAAI;YACdQ,gBAAgB,EAAE;WACnB;UAED;UACA,MAAMC,MAAM;UAAA;UAAA,CAAAtD,cAAA,GAAAc,CAAA,QAAG,MAAM,IAAI,CAACJ,iBAAiB,CAAC6C,eAAe,CAACJ,IAAI,CAAC;UAEjE,MAAM2B,gBAAgB;UAAA;UAAA,CAAA9E,cAAA,GAAAc,CAAA,QAAG;YACvBiE,KAAK,EAAEzB,MAAM,CAACM,MAAM,CAACV,MAAM,KAAK,CAAC;YACjCU,MAAM,EAAEN,MAAM,CAACM,MAAM;YACrBD,QAAQ,EAAEL,MAAM,CAACK,QAAQ;YACzBO,QAAQ,EAAEZ,MAAM,CAACY,QAAQ;YACzBR,cAAc,EAAEJ,MAAM,CAACI,cAAc;YACrCsB,UAAU,EAAE1B,MAAM,CAACY,QAAQ,CAACc,UAAU;YACtCC,aAAa,EAAE3B,MAAM,CAACY,QAAQ,CAACe,aAAa;YAC5CP,QAAQ,EAAEpB,MAAM,CAACY,QAAQ,CAACQ,QAAQ;YAClCD,UAAU,EAAEnB,MAAM,CAACY,QAAQ,CAACO;WAC7B;UAAC;UAAAzE,cAAA,GAAAc,CAAA;UAEFV,MAAM,CAAC4C,IAAI,CAAC,mCAAmC,EAAE;YAC/C+B,KAAK,EAAED,gBAAgB,CAACC,KAAK;YAC7BnB,MAAM,EAAEkB,gBAAgB,CAAClB,MAAM,CAACV,MAAM;YACtCS,QAAQ,EAAEmB,gBAAgB,CAACnB,QAAQ,CAACT;WACrC,CAAC;UAAC;UAAAlD,cAAA,GAAAc,CAAA;UAEH,OAAO;YACL+C,OAAO,EAAE,CAAC;cACRC,IAAI,EAAE,MAAM;cACZC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACa,gBAAgB,EAAE,IAAI,EAAE,CAAC;aAC/C;WACF;QACH,CAAC,CAAC,OAAOH,KAAK,EAAE;UAAA;UAAA3E,cAAA,GAAAc,CAAA;UACdV,MAAM,CAACuE,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;UAAC;UAAA3E,cAAA,GAAAc,CAAA;UACtD,MAAM6D,KAAK;QACb;MACF;KACD,CAAC;IAEF;IAAA;IAAA3E,cAAA,GAAAc,CAAA;IACA,IAAI,CAACU,OAAO,CAAC;MACXT,IAAI,EAAE,cAAc;MACpBE,WAAW,EAAE,mDAAmD;MAChE6B,OAAO,EAAE,MAAAA,CAAA,KAAW;QAAA;QAAA9C,cAAA,GAAAa,CAAA;QAClB,MAAMqE,MAAM;QAAA;QAAA,CAAAlF,cAAA,GAAAc,CAAA,QAAG;UACbqE,MAAM,EAAE,SAAS;UACjBC,SAAS,EAAE,IAAId,IAAI,EAAE,CAACC,WAAW,EAAE;UACnCvD,OAAO,EAAE,IAAI,CAACL,MAAM,CAACK,OAAO;UAC5BL,MAAM,EAAE;YACNQ,UAAU,EAAE,IAAI,CAACR,MAAM,CAACQ,UAAU;YAClCkE,YAAY,EAAE,IAAI,CAAC1E,MAAM,CAACS;WAC3B;UACDkE,QAAQ,EAAE;YACRH,MAAM,EAAE,aAAa;YACrBI,YAAY,EAAE,IAAI,CAAC9E,WAAW,CAAC+E,eAAe;WAC/C;UACDC,SAAS,EAAE;YACTN,MAAM,EAAE,aAAa;YACrBO,UAAU,EAAE,IAAI,CAAChF,iBAAiB,CAACiF,kBAAkB;;SAExD;QAAC;QAAA3F,cAAA,GAAAc,CAAA;QAEFV,MAAM,CAACwF,KAAK,CAAC,wBAAwB,EAAEV,MAAM,CAAC;QAAC;QAAAlF,cAAA,GAAAc,CAAA;QAC/C,OAAO;UACL+C,OAAO,EAAE,CAAC;YACRC,IAAI,EAAE,MAAM;YACZC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACiB,MAAM,EAAE,IAAI,EAAE,CAAC;WACrC;SACF;MACH;KACD,CAAC;EACJ;EAEQ3D,cAAcA,CAAA;IAAA;IAAAvB,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAc,CAAA;IACpB;IACA,IAAI,CAAC+E,WAAW,CAAC;MACfC,GAAG,EAAE,eAAe;MACpB/E,IAAI,EAAE,oBAAoB;MAC1BE,WAAW,EAAE,sCAAsC;MACnD8E,QAAQ,EAAE,kBAAkB;MAC5BC,IAAI,EAAE,MAAAA,CAAA,KAAW;QAAA;QAAAhG,cAAA,GAAAa,CAAA;QACf,MAAMmC,IAAI;QAAA;QAAA,CAAAhD,cAAA,GAAAc,CAAA,QAAG;UACXC,IAAI,EAAE,IAAI,CAACJ,MAAM,CAACI,IAAI;UACtBC,OAAO,EAAE,IAAI,CAACL,MAAM,CAACK,OAAO;UAC5BC,WAAW,EAAE,IAAI,CAACN,MAAM,CAACM,WAAW;UACpCsE,YAAY,EAAE;YACZU,aAAa,EAAE,IAAI;YACnBC,kBAAkB,EAAE,IAAI;YACxBC,UAAU,EAAE,IAAI;YAChBC,YAAY,EAAE,IAAI;YAClBnB,aAAa,EAAE,IAAI;YACnBoB,iBAAiB,EAAE,IAAI;YACvBC,kBAAkB,EAAE,IAAI;YACxBC,UAAU,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,eAAe;WAChE;UACDC,MAAM,EAAE;YACNrF,UAAU,EAAE,IAAI,CAACR,MAAM,CAACQ;WACzB;UACDsF,iBAAiB,EAAE,IAAI,CAAChG,WAAW,CAACiG,oBAAoB,EAAE;UAC1DjB,SAAS,EAAE;YACTC,UAAU,EAAE,IAAI,CAAChF,iBAAiB,CAACiF,kBAAkB,EAAE;YACvDjB,QAAQ,EAAE,CACR,qBAAqB,EACrB,+BAA+B,EAC/B,qBAAqB,EACrB,cAAc,EACd,qBAAqB,EACrB,2BAA2B;;SAGhC;QAAC;QAAA1E,cAAA,GAAAc,CAAA;QAEFV,MAAM,CAACwF,KAAK,CAAC,uBAAuB,EAAE5C,IAAI,CAAC;QAAC;QAAAhD,cAAA,GAAAc,CAAA;QAC5C,OAAO;UACLiD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACjB,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;UACnC+C,QAAQ,EAAE,kBAAkB;UAC5BD,GAAG,EAAE;SACN;MACH;KACD,CAAC;IAEF;IAAA;IAAA9F,cAAA,GAAAc,CAAA;IACA,IAAI,CAAC+E,WAAW,CAAC;MACfC,GAAG,EAAE,uBAAuB;MAC5B/E,IAAI,EAAE,qBAAqB;MAC3BE,WAAW,EAAE,wCAAwC;MACrD8E,QAAQ,EAAE,kBAAkB;MAC5BC,IAAI,EAAE,MAAAA,CAAA,KAAW;QAAA;QAAAhG,cAAA,GAAAa,CAAA;QACf,MAAM8F,MAAM;QAAA;QAAA,CAAA3G,cAAA,GAAAc,CAAA,QAAG;UACb8F,OAAO,EAAE,yCAAyC;UAClDrE,KAAK,EAAE,cAAc;UACrBtB,WAAW,EAAE,uCAAuC;UACpD6C,IAAI,EAAE,QAAQ;UACd+C,QAAQ,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC;UACjCC,UAAU,EAAE;YACVlF,OAAO,EAAE;cACPkC,IAAI,EAAE,QAAQ;cACd+C,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC;cACvCC,UAAU,EAAE;gBACVjF,CAAC,EAAE;kBAAEiC,IAAI,EAAE;gBAAQ,CAAE;gBACrB/B,CAAC,EAAE;kBAAE+B,IAAI,EAAE;gBAAQ,CAAE;gBACrB9B,KAAK,EAAE;kBAAE8B,IAAI,EAAE,QAAQ;kBAAEiD,OAAO,EAAE;gBAAC,CAAE;gBACrC7E,MAAM,EAAE;kBAAE4B,IAAI,EAAE,QAAQ;kBAAEiD,OAAO,EAAE;gBAAC;;aAEvC;YACD5E,QAAQ,EAAE;cACR2B,IAAI,EAAE,OAAO;cACbkD,KAAK,EAAE;gBAAEC,IAAI,EAAE;cAA0B;;YAE3C;WACD;UACDC,WAAW,EAAE;YACXC,UAAU,EAAE;cACVC,KAAK,EAAE,CACL;gBAAEH,IAAI,EAAE;cAA6B,CAAE,EACvC;gBAAEA,IAAI,EAAE;cAA2B,CAAE,EACrC;gBAAEA,IAAI,EAAE;cAA2B,CAAE,EACrC;gBAAEA,IAAI,EAAE;cAA2B,CAAE,EACrC;gBAAEA,IAAI,EAAE;cAA2B,CAAE,EACrC;gBAAEA,IAAI,EAAE;cAA4B,CAAE;;YAG1C;;SAEH;QAAC;QAAAjH,cAAA,GAAAc,CAAA;QAEF,OAAO;UACLiD,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC0C,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;UACrCZ,QAAQ,EAAE,kBAAkB;UAC5BD,GAAG,EAAE;SACN;MACH;KACD,CAAC;EACJ;EAEA,MAAMuB,KAAKA,CAAA;IAAA;IAAArH,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAc,CAAA;IACTV,MAAM,CAAC4C,IAAI,CAAC,yBAAyB,EAAE;MACrCjC,IAAI,EAAE,IAAI,CAACJ,MAAM,CAACI,IAAI;MACtBC,OAAO,EAAE,IAAI,CAACL,MAAM,CAACK;KACtB,CAAC;IAAC;IAAAhB,cAAA,GAAAc,CAAA;IAEH,MAAM,KAAK,CAACuG,KAAK,EAAE;IAAC;IAAArH,cAAA,GAAAc,CAAA;IAEpBV,MAAM,CAAC4C,IAAI,CAAC,qCAAqC,CAAC;EACpD;EAEA,MAAMsE,IAAIA,CAAA;IAAA;IAAAtH,cAAA,GAAAa,CAAA;IAAAb,cAAA,GAAAc,CAAA;IACRV,MAAM,CAAC4C,IAAI,CAAC,yBAAyB,CAAC;IACtC;IAAA;IAAAhD,cAAA,GAAAc,CAAA;IACAV,MAAM,CAAC4C,IAAI,CAAC,wBAAwB,CAAC;EACvC","ignoreList":[]}