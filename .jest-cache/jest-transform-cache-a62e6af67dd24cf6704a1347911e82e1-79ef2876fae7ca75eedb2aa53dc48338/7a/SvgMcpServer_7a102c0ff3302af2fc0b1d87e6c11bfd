06c484496344e996f93bd587f25f3b2f
/* istanbul ignore next */
function cov_1ktf0pjl7m() {
  var path = "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts";
  var hash = "fc573463f8a0eeab0875f2e2ba1600799565fc68";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 8
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "1": {
        start: {
          line: 22,
          column: 8
        },
        end: {
          line: 27,
          column: 10
        }
      },
      "2": {
        start: {
          line: 28,
          column: 8
        },
        end: {
          line: 28,
          column: 45
        }
      },
      "3": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 60
        }
      },
      "4": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 32,
          column: 9
        }
      },
      "5": {
        start: {
          line: 31,
          column: 12
        },
        end: {
          line: 31,
          column: 40
        }
      },
      "6": {
        start: {
          line: 33,
          column: 8
        },
        end: {
          line: 33,
          column: 26
        }
      },
      "7": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 30
        }
      },
      "8": {
        start: {
          line: 38,
          column: 8
        },
        end: {
          line: 124,
          column: 11
        }
      },
      "9": {
        start: {
          line: 60,
          column: 71
        },
        end: {
          line: 60,
          column: 75
        }
      },
      "10": {
        start: {
          line: 61,
          column: 16
        },
        end: {
          line: 122,
          column: 17
        }
      },
      "11": {
        start: {
          line: 62,
          column: 20
        },
        end: {
          line: 66,
          column: 23
        }
      },
      "12": {
        start: {
          line: 68,
          column: 33
        },
        end: {
          line: 79,
          column: 21
        }
      },
      "13": {
        start: {
          line: 81,
          column: 35
        },
        end: {
          line: 81,
          column: 85
        }
      },
      "14": {
        start: {
          line: 83,
          column: 20
        },
        end: {
          line: 85,
          column: 21
        }
      },
      "15": {
        start: {
          line: 84,
          column: 24
        },
        end: {
          line: 84,
          column: 207
        }
      },
      "16": {
        start: {
          line: 86,
          column: 20
        },
        end: {
          line: 92,
          column: 23
        }
      },
      "17": {
        start: {
          line: 93,
          column: 20
        },
        end: {
          line: 114,
          column: 22
        }
      },
      "18": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 117,
          column: 66
        }
      },
      "19": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 120,
          column: 21
        }
      },
      "20": {
        start: {
          line: 119,
          column: 24
        },
        end: {
          line: 119,
          column: 36
        }
      },
      "21": {
        start: {
          line: 121,
          column: 20
        },
        end: {
          line: 121,
          column: 122
        }
      },
      "22": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 183,
          column: 11
        }
      },
      "23": {
        start: {
          line: 141,
          column: 37
        },
        end: {
          line: 141,
          column: 41
        }
      },
      "24": {
        start: {
          line: 142,
          column: 16
        },
        end: {
          line: 181,
          column: 17
        }
      },
      "25": {
        start: {
          line: 143,
          column: 20
        },
        end: {
          line: 145,
          column: 23
        }
      },
      "26": {
        start: {
          line: 147,
          column: 33
        },
        end: {
          line: 152,
          column: 21
        }
      },
      "27": {
        start: {
          line: 154,
          column: 35
        },
        end: {
          line: 154,
          column: 85
        }
      },
      "28": {
        start: {
          line: 155,
          column: 45
        },
        end: {
          line: 165,
          column: 21
        }
      },
      "29": {
        start: {
          line: 166,
          column: 20
        },
        end: {
          line: 170,
          column: 23
        }
      },
      "30": {
        start: {
          line: 171,
          column: 20
        },
        end: {
          line: 176,
          column: 22
        }
      },
      "31": {
        start: {
          line: 179,
          column: 20
        },
        end: {
          line: 179,
          column: 74
        }
      },
      "32": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 32
        }
      },
      "33": {
        start: {
          line: 185,
          column: 8
        },
        end: {
          line: 214,
          column: 11
        }
      },
      "34": {
        start: {
          line: 189,
          column: 31
        },
        end: {
          line: 205,
          column: 17
        }
      },
      "35": {
        start: {
          line: 206,
          column: 16
        },
        end: {
          line: 206,
          column: 63
        }
      },
      "36": {
        start: {
          line: 207,
          column: 16
        },
        end: {
          line: 212,
          column: 18
        }
      },
      "37": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 261,
          column: 11
        }
      },
      "38": {
        start: {
          line: 224,
          column: 29
        },
        end: {
          line: 253,
          column: 17
        }
      },
      "39": {
        start: {
          line: 254,
          column: 16
        },
        end: {
          line: 254,
          column: 60
        }
      },
      "40": {
        start: {
          line: 255,
          column: 16
        },
        end: {
          line: 259,
          column: 18
        }
      },
      "41": {
        start: {
          line: 263,
          column: 8
        },
        end: {
          line: 312,
          column: 11
        }
      },
      "42": {
        start: {
          line: 269,
          column: 31
        },
        end: {
          line: 305,
          column: 17
        }
      },
      "43": {
        start: {
          line: 306,
          column: 16
        },
        end: {
          line: 310,
          column: 18
        }
      },
      "44": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 318,
          column: 11
        }
      },
      "45": {
        start: {
          line: 319,
          column: 8
        },
        end: {
          line: 319,
          column: 28
        }
      },
      "46": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 59
        }
      },
      "47": {
        start: {
          line: 323,
          column: 8
        },
        end: {
          line: 323,
          column: 47
        }
      },
      "48": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 17,
            column: 4
          },
          end: {
            line: 17,
            column: 5
          }
        },
        loc: {
          start: {
            line: 17,
            column: 24
          },
          end: {
            line: 35,
            column: 5
          }
        },
        line: 17
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        loc: {
          start: {
            line: 36,
            column: 17
          },
          end: {
            line: 215,
            column: 5
          }
        },
        line: 36
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 59,
            column: 21
          },
          end: {
            line: 59,
            column: 22
          }
        },
        loc: {
          start: {
            line: 59,
            column: 37
          },
          end: {
            line: 123,
            column: 13
          }
        },
        line: 59
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 140,
            column: 21
          },
          end: {
            line: 140,
            column: 22
          }
        },
        loc: {
          start: {
            line: 140,
            column: 37
          },
          end: {
            line: 182,
            column: 13
          }
        },
        line: 140
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 188,
            column: 21
          },
          end: {
            line: 188,
            column: 22
          }
        },
        loc: {
          start: {
            line: 188,
            column: 33
          },
          end: {
            line: 213,
            column: 13
          }
        },
        line: 188
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 216,
            column: 4
          },
          end: {
            line: 216,
            column: 5
          }
        },
        loc: {
          start: {
            line: 216,
            column: 21
          },
          end: {
            line: 313,
            column: 5
          }
        },
        line: 216
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 223,
            column: 18
          },
          end: {
            line: 223,
            column: 19
          }
        },
        loc: {
          start: {
            line: 223,
            column: 30
          },
          end: {
            line: 260,
            column: 13
          }
        },
        line: 223
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 268,
            column: 18
          },
          end: {
            line: 268,
            column: 19
          }
        },
        loc: {
          start: {
            line: 268,
            column: 30
          },
          end: {
            line: 311,
            column: 13
          }
        },
        line: 268
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 314,
            column: 4
          },
          end: {
            line: 314,
            column: 5
          }
        },
        loc: {
          start: {
            line: 314,
            column: 18
          },
          end: {
            line: 321,
            column: 5
          }
        },
        line: 314
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 322,
            column: 4
          },
          end: {
            line: 322,
            column: 5
          }
        },
        loc: {
          start: {
            line: 322,
            column: 17
          },
          end: {
            line: 326,
            column: 5
          }
        },
        line: 322
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 25
          },
          end: {
            line: 24,
            column: 43
          }
        }, {
          start: {
            line: 24,
            column: 47
          },
          end: {
            line: 24,
            column: 63
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 24
          },
          end: {
            line: 25,
            column: 41
          }
        }, {
          start: {
            line: 25,
            column: 45
          },
          end: {
            line: 25,
            column: 50
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 25
          },
          end: {
            line: 26,
            column: 43
          }
        }, {
          start: {
            line: 26,
            column: 47
          },
          end: {
            line: 26,
            column: 52
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 8
          },
          end: {
            line: 32,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      },
      "4": {
        loc: {
          start: {
            line: 60,
            column: 34
          },
          end: {
            line: 60,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 60,
            column: 45
          },
          end: {
            line: 60,
            column: 49
          }
        }],
        line: 60
      },
      "5": {
        loc: {
          start: {
            line: 60,
            column: 51
          },
          end: {
            line: 60,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 60,
            column: 62
          },
          end: {
            line: 60,
            column: 66
          }
        }],
        line: 60
      },
      "6": {
        loc: {
          start: {
            line: 70,
            column: 34
          },
          end: {
            line: 70,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 70,
            column: 34
          },
          end: {
            line: 70,
            column: 51
          }
        }, {
          start: {
            line: 70,
            column: 55
          },
          end: {
            line: 70,
            column: 57
          }
        }],
        line: 70
      },
      "7": {
        loc: {
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 71,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 28
          },
          end: {
            line: 71,
            column: 56
          }
        }, {
          start: {
            line: 71,
            column: 60
          },
          end: {
            line: 71,
            column: 85
          }
        }],
        line: 71
      },
      "8": {
        loc: {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 57
          }
        }, {
          start: {
            line: 72,
            column: 61
          },
          end: {
            line: 72,
            column: 88
          }
        }],
        line: 72
      },
      "9": {
        loc: {
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 42
          }
        }, {
          start: {
            line: 73,
            column: 46
          },
          end: {
            line: 73,
            column: 71
          }
        }],
        line: 73
      },
      "10": {
        loc: {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 48
          }
        }, {
          start: {
            line: 74,
            column: 52
          },
          end: {
            line: 74,
            column: 89
          }
        }],
        line: 74
      },
      "11": {
        loc: {
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 42
          }
        }, {
          start: {
            line: 75,
            column: 46
          },
          end: {
            line: 75,
            column: 71
          }
        }],
        line: 75
      },
      "12": {
        loc: {
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 20
          },
          end: {
            line: 85,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "13": {
        loc: {
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 120,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 20
          },
          end: {
            line: 120,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "14": {
        loc: {
          start: {
            line: 121,
            column: 62
          },
          end: {
            line: 121,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 121,
            column: 87
          },
          end: {
            line: 121,
            column: 100
          }
        }, {
          start: {
            line: 121,
            column: 103
          },
          end: {
            line: 121,
            column: 118
          }
        }],
        line: 121
      },
      "15": {
        loc: {
          start: {
            line: 149,
            column: 34
          },
          end: {
            line: 149,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 149,
            column: 34
          },
          end: {
            line: 149,
            column: 51
          }
        }, {
          start: {
            line: 149,
            column: 55
          },
          end: {
            line: 149,
            column: 57
          }
        }],
        line: 149
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts"],
      sourcesContent: ["/**\r\n * SVG MCP Server Implementation\r\n * \r\n * This is the main server class that extends FastMCP to provide\r\n * SVG generation capabilities through the Model Context Protocol.\r\n */\r\n\r\nimport { FastMCP } from 'fastmcp';\r\nimport { z } from 'zod';\r\nimport { logger } from '../utils/logger.js';\r\nimport { SvgRenderer } from '../core/SvgRenderer.js';\r\nimport { SvgDocumentProcessor, SvgDocumentSpec } from '../core/SvgDocumentProcessor.js';\r\nimport { SvgValidationError } from '../types/svg.js';\r\n\r\nexport interface SvgMcpServerConfig {\r\n  name: string;\r\n  version: string;\r\n  description?: string;\r\n  maxSvgSize?: number;\r\n  enableDebug?: boolean;\r\n}\r\n\r\nexport class SvgMcpServer extends FastMCP {\r\n  private svgRenderer: SvgRenderer;\r\n  private documentProcessor: SvgDocumentProcessor;\r\n  private config: Required<SvgMcpServerConfig>;\r\n\r\n  constructor(config: SvgMcpServerConfig) {\r\n    super({\r\n      name: config.name,\r\n      version: config.version as `${number}.${number}.${number}`,\r\n    });\r\n\r\n    this.config = {\r\n      ...config,\r\n      description: config.description || 'SVG MCP Server',\r\n      maxSvgSize: config.maxSvgSize || 10000,\r\n      enableDebug: config.enableDebug || false,\r\n    };\r\n\r\n    this.svgRenderer = new SvgRenderer();\r\n    this.documentProcessor = new SvgDocumentProcessor();\r\n    \r\n    if (this.config.enableDebug) {\r\n      logger.setLogLevel('debug');\r\n    }\r\n\r\n    this.setupTools();\r\n    this.setupResources();\r\n  }\r\n\r\n  private setupTools(): void {\r\n    // Tool: Generate SVG\r\n    this.addTool({\r\n      name: 'generate_svg',\r\n      description: 'Generate an SVG document from a specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          width: z.number().min(0).optional(),\r\n          height: z.number().min(0).optional(),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n          style: z.string().optional(),\r\n        }),\r\n        optimize: z.boolean().default(true),\r\n        validate: z.boolean().default(true),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, optimize = true, validate = true } = args;\r\n\r\n        try {\r\n          logger.info('Processing SVG document request', { \r\n            elementCount: document.elements?.length,\r\n            optimize, \r\n            validate \r\n          });\r\n\r\n          // Convert to document specification\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            ...(document.width !== undefined && { width: document.width }),\r\n            ...(document.height !== undefined && { height: document.height }),\r\n            ...(document.title && { title: document.title }),\r\n            ...(document.description && { description: document.description }),\r\n            ...(document.style && { style: document.style }),\r\n            optimize,\r\n            validate,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Process document using the document processor\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n\r\n          // Check size limits\r\n          if (result.svg.length > this.config.maxSvgSize) {\r\n            throw new SvgValidationError(\r\n              `Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`,\r\n              [`SVG size: ${result.svg.length}, limit: ${this.config.maxSvgSize}`]\r\n            );\r\n          }\r\n\r\n          logger.info('SVG document processed successfully', {\r\n            size: result.svg.length,\r\n            elementCount: result.document.elements.length,\r\n            processingTime: result.processingTime,\r\n            warnings: result.warnings.length,\r\n            errors: result.errors.length,\r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify({\r\n                svg: result.svg,\r\n                document: result.document,\r\n                metadata: result.metadata,\r\n                processing: {\r\n                  time: result.processingTime,\r\n                  warnings: result.warnings,\r\n                  errors: result.errors,\r\n                  generated: new Date().toISOString(),\r\n                },\r\n                stats: {\r\n                  size: result.svg.length,\r\n                  elementCount: result.document.elements.length,\r\n                  complexity: result.metadata.complexity,\r\n                  features: result.metadata.features,\r\n                },\r\n              }, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('Failed to generate SVG', error);\r\n          \r\n          if (error instanceof SvgValidationError) {\r\n            throw error;\r\n          }\r\n          \r\n          throw new Error(`SVG generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Validate SVG Document\r\n    this.addTool({\r\n      name: 'validate_svg_document',\r\n      description: 'Validate an SVG document specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n        }),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document } = args;\r\n        try {\r\n          logger.info('Validating SVG document', { \r\n            elementCount: document.elements?.length \r\n          });\r\n          \r\n          // Convert to document specification for validation\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            validate: true,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Use document processor for comprehensive validation\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n          \r\n          const validationResult = {\r\n            valid: result.errors.length === 0,\r\n            errors: result.errors,\r\n            warnings: result.warnings,\r\n            metadata: result.metadata,\r\n            processingTime: result.processingTime,\r\n            compliance: result.metadata.compliance,\r\n            accessibility: result.metadata.accessibility,\r\n            features: result.metadata.features,\r\n            complexity: result.metadata.complexity,\r\n          };\r\n          \r\n          logger.info('SVG document validation completed', {\r\n            valid: validationResult.valid,\r\n            errors: validationResult.errors.length,\r\n            warnings: validationResult.warnings.length,\r\n          });\r\n          \r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(validationResult, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG document validation failed', error);\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Health Check\r\n    this.addTool({\r\n      name: 'health_check',\r\n      description: 'Check the health and status of the SVG MCP server',\r\n      execute: async () => {\r\n        const health = {\r\n          status: 'healthy',\r\n          timestamp: new Date().toISOString(),\r\n          version: this.config.version,\r\n          config: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n            debugEnabled: this.config.enableDebug,\r\n          },\r\n          renderer: {\r\n            status: 'operational',\r\n            capabilities: this.svgRenderer.getCapabilities(),\r\n          },\r\n          processor: {\r\n            status: 'operational',\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n          },\r\n        };\r\n\r\n        logger.debug('Health check performed', health);\r\n        return {\r\n          content: [{\r\n            type: 'text',\r\n            text: JSON.stringify(health, null, 2)\r\n          }]\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private setupResources(): void {\r\n    // Resource: Server Information\r\n    this.addResource({\r\n      uri: 'server://info',\r\n      name: 'Server Information',\r\n      description: 'Information about the SVG MCP server',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const info = {\r\n          name: this.config.name,\r\n          version: this.config.version,\r\n          description: this.config.description,\r\n          capabilities: {\r\n            svgGeneration: true,\r\n            documentProcessing: true,\r\n            validation: true,\r\n            optimization: true,\r\n            accessibility: true,\r\n            rfc7996Compliance: true,\r\n            metadataGeneration: true,\r\n            transforms: ['scale', 'translate', 'normalize', 'accessibility'],\r\n          },\r\n          limits: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n          },\r\n          supportedElements: this.svgRenderer.getSupportedElements(),\r\n          processor: {\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n            features: [\r\n              'document_validation',\r\n              'element_relationship_analysis',\r\n              'compliance_checking',\r\n              'optimization',\r\n              'metadata_generation',\r\n              'accessibility_enhancement',\r\n            ],\r\n          },\r\n        };\r\n\r\n        logger.debug('Server info requested', info);\r\n        return {\r\n          text: JSON.stringify(info, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'server://info'\r\n        };\r\n      }\r\n    });\r\n\r\n    // Resource: SVG Schema\r\n    this.addResource({\r\n      uri: 'schema://svg-document',\r\n      name: 'SVG Document Schema',\r\n      description: 'JSON schema for SVG document structure',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const schema = {\r\n          $schema: 'http://json-schema.org/draft-07/schema#',\r\n          title: 'SVG Document',\r\n          description: 'Schema for SVG document specification',\r\n          type: 'object',\r\n          required: ['viewBox', 'elements'],\r\n          properties: {\r\n            viewBox: {\r\n              type: 'object',\r\n              required: ['x', 'y', 'width', 'height'],\r\n              properties: {\r\n                x: { type: 'number' },\r\n                y: { type: 'number' },\r\n                width: { type: 'number', minimum: 0 },\r\n                height: { type: 'number', minimum: 0 },\r\n              },\r\n            },\r\n            elements: {\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/SvgElement' },\r\n            },\r\n            // Additional properties would be defined here\r\n          },\r\n          definitions: {\r\n            SvgElement: {\r\n              oneOf: [\r\n                { $ref: '#/definitions/CircleElement' },\r\n                { $ref: '#/definitions/RectElement' },\r\n                { $ref: '#/definitions/LineElement' },\r\n                { $ref: '#/definitions/PathElement' },\r\n                { $ref: '#/definitions/TextElement' },\r\n                { $ref: '#/definitions/GroupElement' },\r\n              ],\r\n            },\r\n            // Element definitions would be expanded here\r\n          },\r\n        };\r\n\r\n        return {\r\n          text: JSON.stringify(schema, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'schema://svg-document'\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    logger.info('Starting SVG MCP Server', {\r\n      name: this.config.name,\r\n      version: this.config.version,\r\n    });\r\n\r\n    await super.start();\r\n    \r\n    logger.info('SVG MCP Server started successfully');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    logger.info('Stopping SVG MCP Server');\r\n    // Cleanup logic would go here\r\n    logger.info('SVG MCP Server stopped');\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "fc573463f8a0eeab0875f2e2ba1600799565fc68"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ktf0pjl7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ktf0pjl7m();
/**
 * SVG MCP Server Implementation
 *
 * This is the main server class that extends FastMCP to provide
 * SVG generation capabilities through the Model Context Protocol.
 */
import { FastMCP } from 'fastmcp';
import { z } from 'zod';
import { logger } from '../utils/logger.js';
import { SvgRenderer } from '../core/SvgRenderer.js';
import { SvgDocumentProcessor } from '../core/SvgDocumentProcessor.js';
import { SvgValidationError } from '../types/svg.js';
export class SvgMcpServer extends FastMCP {
  svgRenderer;
  documentProcessor;
  config;
  constructor(config) {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[0]++;
    cov_1ktf0pjl7m().s[0]++;
    super({
      name: config.name,
      version: config.version
    });
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[1]++;
    this.config = {
      ...config,
      description:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[0][0]++, config.description) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[0][1]++, 'SVG MCP Server'),
      maxSvgSize:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[1][0]++, config.maxSvgSize) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[1][1]++, 10000),
      enableDebug:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[2][0]++, config.enableDebug) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[2][1]++, false)
    };
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[2]++;
    this.svgRenderer = new SvgRenderer();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[3]++;
    this.documentProcessor = new SvgDocumentProcessor();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[4]++;
    if (this.config.enableDebug) {
      /* istanbul ignore next */
      cov_1ktf0pjl7m().b[3][0]++;
      cov_1ktf0pjl7m().s[5]++;
      logger.setLogLevel('debug');
    } else
    /* istanbul ignore next */
    {
      cov_1ktf0pjl7m().b[3][1]++;
    }
    cov_1ktf0pjl7m().s[6]++;
    this.setupTools();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[7]++;
    this.setupResources();
  }
  setupTools() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[1]++;
    cov_1ktf0pjl7m().s[8]++;
    // Tool: Generate SVG
    this.addTool({
      name: 'generate_svg',
      description: 'Generate an SVG document from a specification',
      parameters: z.object({
        document: z.object({
          viewBox: z.object({
            x: z.number(),
            y: z.number(),
            width: z.number().min(0),
            height: z.number().min(0)
          }),
          elements: z.array(z.any()),
          width: z.number().min(0).optional(),
          height: z.number().min(0).optional(),
          title: z.string().optional(),
          description: z.string().optional(),
          style: z.string().optional()
        }),
        optimize: z.boolean().default(true),
        validate: z.boolean().default(true)
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[2]++;
        const {
          document,
          optimize =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[4][0]++, true),
          validate =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[5][0]++, true)
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[9]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[10]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[11]++;
          logger.info('Processing SVG document request', {
            elementCount: document.elements?.length,
            optimize,
            validate
          });
          // Convert to document specification
          const spec =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[12]++, {
            viewBox: document.viewBox,
            elements:
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[6][0]++, document.elements) ||
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[6][1]++, []),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[7][0]++, document.width !== undefined) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[7][1]++, {
              width: document.width
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[8][0]++, document.height !== undefined) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[8][1]++, {
              height: document.height
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[9][0]++, document.title) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[9][1]++, {
              title: document.title
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[10][0]++, document.description) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[10][1]++, {
              description: document.description
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[11][0]++, document.style) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[11][1]++, {
              style: document.style
            })),
            optimize,
            validate,
            generateMetadata: true
          });
          // Process document using the document processor
          const result =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[13]++, await this.documentProcessor.processDocument(spec));
          // Check size limits
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[14]++;
          if (result.svg.length > this.config.maxSvgSize) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[12][0]++;
            cov_1ktf0pjl7m().s[15]++;
            throw new SvgValidationError(`Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`, [`SVG size: ${result.svg.length}, limit: ${this.config.maxSvgSize}`]);
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[12][1]++;
          }
          cov_1ktf0pjl7m().s[16]++;
          logger.info('SVG document processed successfully', {
            size: result.svg.length,
            elementCount: result.document.elements.length,
            processingTime: result.processingTime,
            warnings: result.warnings.length,
            errors: result.errors.length
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[17]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify({
                svg: result.svg,
                document: result.document,
                metadata: result.metadata,
                processing: {
                  time: result.processingTime,
                  warnings: result.warnings,
                  errors: result.errors,
                  generated: new Date().toISOString()
                },
                stats: {
                  size: result.svg.length,
                  elementCount: result.document.elements.length,
                  complexity: result.metadata.complexity,
                  features: result.metadata.features
                }
              }, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[18]++;
          logger.error('Failed to generate SVG', error);
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[19]++;
          if (error instanceof SvgValidationError) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[13][0]++;
            cov_1ktf0pjl7m().s[20]++;
            throw error;
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[13][1]++;
          }
          cov_1ktf0pjl7m().s[21]++;
          throw new Error(`SVG generation failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[14][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[14][1]++, 'Unknown error')}`);
        }
      }
    });
    // Tool: Validate SVG Document
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[22]++;
    this.addTool({
      name: 'validate_svg_document',
      description: 'Validate an SVG document specification',
      parameters: z.object({
        document: z.object({
          viewBox: z.object({
            x: z.number(),
            y: z.number(),
            width: z.number().min(0),
            height: z.number().min(0)
          }),
          elements: z.array(z.any())
        })
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[3]++;
        const {
          document
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[23]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[24]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[25]++;
          logger.info('Validating SVG document', {
            elementCount: document.elements?.length
          });
          // Convert to document specification for validation
          const spec =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[26]++, {
            viewBox: document.viewBox,
            elements:
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[15][0]++, document.elements) ||
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[15][1]++, []),
            validate: true,
            generateMetadata: true
          });
          // Use document processor for comprehensive validation
          const result =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[27]++, await this.documentProcessor.processDocument(spec));
          const validationResult =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[28]++, {
            valid: result.errors.length === 0,
            errors: result.errors,
            warnings: result.warnings,
            metadata: result.metadata,
            processingTime: result.processingTime,
            compliance: result.metadata.compliance,
            accessibility: result.metadata.accessibility,
            features: result.metadata.features,
            complexity: result.metadata.complexity
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[29]++;
          logger.info('SVG document validation completed', {
            valid: validationResult.valid,
            errors: validationResult.errors.length,
            warnings: validationResult.warnings.length
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[30]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(validationResult, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[31]++;
          logger.error('SVG document validation failed', error);
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[32]++;
          throw error;
        }
      }
    });
    // Tool: Health Check
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[33]++;
    this.addTool({
      name: 'health_check',
      description: 'Check the health and status of the SVG MCP server',
      execute: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[4]++;
        const health =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[34]++, {
          status: 'healthy',
          timestamp: new Date().toISOString(),
          version: this.config.version,
          config: {
            maxSvgSize: this.config.maxSvgSize,
            debugEnabled: this.config.enableDebug
          },
          renderer: {
            status: 'operational',
            capabilities: this.svgRenderer.getCapabilities()
          },
          processor: {
            status: 'operational',
            statistics: this.documentProcessor.getProcessingStats()
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[35]++;
        logger.debug('Health check performed', health);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[36]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify(health, null, 2)
          }]
        };
      }
    });
  }
  setupResources() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[5]++;
    cov_1ktf0pjl7m().s[37]++;
    // Resource: Server Information
    this.addResource({
      uri: 'server://info',
      name: 'Server Information',
      description: 'Information about the SVG MCP server',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[6]++;
        const info =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[38]++, {
          name: this.config.name,
          version: this.config.version,
          description: this.config.description,
          capabilities: {
            svgGeneration: true,
            documentProcessing: true,
            validation: true,
            optimization: true,
            accessibility: true,
            rfc7996Compliance: true,
            metadataGeneration: true,
            transforms: ['scale', 'translate', 'normalize', 'accessibility']
          },
          limits: {
            maxSvgSize: this.config.maxSvgSize
          },
          supportedElements: this.svgRenderer.getSupportedElements(),
          processor: {
            statistics: this.documentProcessor.getProcessingStats(),
            features: ['document_validation', 'element_relationship_analysis', 'compliance_checking', 'optimization', 'metadata_generation', 'accessibility_enhancement']
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[39]++;
        logger.debug('Server info requested', info);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[40]++;
        return {
          text: JSON.stringify(info, null, 2),
          mimeType: 'application/json',
          uri: 'server://info'
        };
      }
    });
    // Resource: SVG Schema
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[41]++;
    this.addResource({
      uri: 'schema://svg-document',
      name: 'SVG Document Schema',
      description: 'JSON schema for SVG document structure',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[7]++;
        const schema =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[42]++, {
          $schema: 'http://json-schema.org/draft-07/schema#',
          title: 'SVG Document',
          description: 'Schema for SVG document specification',
          type: 'object',
          required: ['viewBox', 'elements'],
          properties: {
            viewBox: {
              type: 'object',
              required: ['x', 'y', 'width', 'height'],
              properties: {
                x: {
                  type: 'number'
                },
                y: {
                  type: 'number'
                },
                width: {
                  type: 'number',
                  minimum: 0
                },
                height: {
                  type: 'number',
                  minimum: 0
                }
              }
            },
            elements: {
              type: 'array',
              items: {
                $ref: '#/definitions/SvgElement'
              }
            }
            // Additional properties would be defined here
          },
          definitions: {
            SvgElement: {
              oneOf: [{
                $ref: '#/definitions/CircleElement'
              }, {
                $ref: '#/definitions/RectElement'
              }, {
                $ref: '#/definitions/LineElement'
              }, {
                $ref: '#/definitions/PathElement'
              }, {
                $ref: '#/definitions/TextElement'
              }, {
                $ref: '#/definitions/GroupElement'
              }]
            }
            // Element definitions would be expanded here
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[43]++;
        return {
          text: JSON.stringify(schema, null, 2),
          mimeType: 'application/json',
          uri: 'schema://svg-document'
        };
      }
    });
  }
  async start() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[8]++;
    cov_1ktf0pjl7m().s[44]++;
    logger.info('Starting SVG MCP Server', {
      name: this.config.name,
      version: this.config.version
    });
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[45]++;
    await super.start();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[46]++;
    logger.info('SVG MCP Server started successfully');
  }
  async stop() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[9]++;
    cov_1ktf0pjl7m().s[47]++;
    logger.info('Stopping SVG MCP Server');
    // Cleanup logic would go here
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[48]++;
    logger.info('SVG MCP Server stopped');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,