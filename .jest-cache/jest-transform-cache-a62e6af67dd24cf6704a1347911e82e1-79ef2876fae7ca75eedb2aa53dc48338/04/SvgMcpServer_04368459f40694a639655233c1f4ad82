0a4ea1566752c705adafa1fadc9687e3
/* istanbul ignore next */
function cov_1ktf0pjl7m() {
  var path = "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts";
  var hash = "3ae1b76476360652231831aecbbb12be5200a31b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 8
        },
        end: {
          line: 22,
          column: 11
        }
      },
      "1": {
        start: {
          line: 23,
          column: 8
        },
        end: {
          line: 28,
          column: 10
        }
      },
      "2": {
        start: {
          line: 29,
          column: 8
        },
        end: {
          line: 29,
          column: 45
        }
      },
      "3": {
        start: {
          line: 30,
          column: 8
        },
        end: {
          line: 30,
          column: 60
        }
      },
      "4": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 33,
          column: 9
        }
      },
      "5": {
        start: {
          line: 32,
          column: 12
        },
        end: {
          line: 32,
          column: 40
        }
      },
      "6": {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 26
        }
      },
      "7": {
        start: {
          line: 35,
          column: 8
        },
        end: {
          line: 35,
          column: 30
        }
      },
      "8": {
        start: {
          line: 39,
          column: 8
        },
        end: {
          line: 125,
          column: 11
        }
      },
      "9": {
        start: {
          line: 61,
          column: 71
        },
        end: {
          line: 61,
          column: 75
        }
      },
      "10": {
        start: {
          line: 62,
          column: 16
        },
        end: {
          line: 123,
          column: 17
        }
      },
      "11": {
        start: {
          line: 63,
          column: 20
        },
        end: {
          line: 67,
          column: 23
        }
      },
      "12": {
        start: {
          line: 69,
          column: 33
        },
        end: {
          line: 80,
          column: 21
        }
      },
      "13": {
        start: {
          line: 82,
          column: 35
        },
        end: {
          line: 82,
          column: 85
        }
      },
      "14": {
        start: {
          line: 84,
          column: 20
        },
        end: {
          line: 86,
          column: 21
        }
      },
      "15": {
        start: {
          line: 85,
          column: 24
        },
        end: {
          line: 85,
          column: 207
        }
      },
      "16": {
        start: {
          line: 87,
          column: 20
        },
        end: {
          line: 93,
          column: 23
        }
      },
      "17": {
        start: {
          line: 94,
          column: 20
        },
        end: {
          line: 115,
          column: 22
        }
      },
      "18": {
        start: {
          line: 118,
          column: 20
        },
        end: {
          line: 118,
          column: 66
        }
      },
      "19": {
        start: {
          line: 119,
          column: 20
        },
        end: {
          line: 121,
          column: 21
        }
      },
      "20": {
        start: {
          line: 120,
          column: 24
        },
        end: {
          line: 120,
          column: 36
        }
      },
      "21": {
        start: {
          line: 122,
          column: 20
        },
        end: {
          line: 122,
          column: 122
        }
      },
      "22": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 184,
          column: 11
        }
      },
      "23": {
        start: {
          line: 142,
          column: 37
        },
        end: {
          line: 142,
          column: 41
        }
      },
      "24": {
        start: {
          line: 143,
          column: 16
        },
        end: {
          line: 182,
          column: 17
        }
      },
      "25": {
        start: {
          line: 144,
          column: 20
        },
        end: {
          line: 146,
          column: 23
        }
      },
      "26": {
        start: {
          line: 148,
          column: 33
        },
        end: {
          line: 153,
          column: 21
        }
      },
      "27": {
        start: {
          line: 155,
          column: 35
        },
        end: {
          line: 155,
          column: 85
        }
      },
      "28": {
        start: {
          line: 156,
          column: 45
        },
        end: {
          line: 166,
          column: 21
        }
      },
      "29": {
        start: {
          line: 167,
          column: 20
        },
        end: {
          line: 171,
          column: 23
        }
      },
      "30": {
        start: {
          line: 172,
          column: 20
        },
        end: {
          line: 177,
          column: 22
        }
      },
      "31": {
        start: {
          line: 180,
          column: 20
        },
        end: {
          line: 180,
          column: 74
        }
      },
      "32": {
        start: {
          line: 181,
          column: 20
        },
        end: {
          line: 181,
          column: 32
        }
      },
      "33": {
        start: {
          line: 186,
          column: 8
        },
        end: {
          line: 276,
          column: 11
        }
      },
      "34": {
        start: {
          line: 195,
          column: 59
        },
        end: {
          line: 195,
          column: 63
        }
      },
      "35": {
        start: {
          line: 196,
          column: 16
        },
        end: {
          line: 274,
          column: 17
        }
      },
      "36": {
        start: {
          line: 197,
          column: 20
        },
        end: {
          line: 197,
          column: 77
        }
      },
      "37": {
        start: {
          line: 199,
          column: 20
        },
        end: {
          line: 238,
          column: 21
        }
      },
      "38": {
        start: {
          line: 201,
          column: 28
        },
        end: {
          line: 201,
          column: 78
        }
      },
      "39": {
        start: {
          line: 202,
          column: 28
        },
        end: {
          line: 202,
          column: 34
        }
      },
      "40": {
        start: {
          line: 204,
          column: 28
        },
        end: {
          line: 204,
          column: 76
        }
      },
      "41": {
        start: {
          line: 205,
          column: 28
        },
        end: {
          line: 205,
          column: 34
        }
      },
      "42": {
        start: {
          line: 207,
          column: 28
        },
        end: {
          line: 207,
          column: 76
        }
      },
      "43": {
        start: {
          line: 208,
          column: 28
        },
        end: {
          line: 208,
          column: 34
        }
      },
      "44": {
        start: {
          line: 210,
          column: 28
        },
        end: {
          line: 210,
          column: 76
        }
      },
      "45": {
        start: {
          line: 211,
          column: 28
        },
        end: {
          line: 211,
          column: 34
        }
      },
      "46": {
        start: {
          line: 213,
          column: 28
        },
        end: {
          line: 213,
          column: 77
        }
      },
      "47": {
        start: {
          line: 214,
          column: 28
        },
        end: {
          line: 214,
          column: 34
        }
      },
      "48": {
        start: {
          line: 216,
          column: 28
        },
        end: {
          line: 216,
          column: 76
        }
      },
      "49": {
        start: {
          line: 217,
          column: 28
        },
        end: {
          line: 217,
          column: 34
        }
      },
      "50": {
        start: {
          line: 219,
          column: 28
        },
        end: {
          line: 221,
          column: 29
        }
      },
      "51": {
        start: {
          line: 220,
          column: 32
        },
        end: {
          line: 220,
          column: 98
        }
      },
      "52": {
        start: {
          line: 222,
          column: 28
        },
        end: {
          line: 222,
          column: 127
        }
      },
      "53": {
        start: {
          line: 223,
          column: 28
        },
        end: {
          line: 223,
          column: 34
        }
      },
      "54": {
        start: {
          line: 225,
          column: 28
        },
        end: {
          line: 227,
          column: 29
        }
      },
      "55": {
        start: {
          line: 226,
          column: 32
        },
        end: {
          line: 226,
          column: 91
        }
      },
      "56": {
        start: {
          line: 228,
          column: 28
        },
        end: {
          line: 228,
          column: 95
        }
      },
      "57": {
        start: {
          line: 229,
          column: 28
        },
        end: {
          line: 229,
          column: 34
        }
      },
      "58": {
        start: {
          line: 231,
          column: 28
        },
        end: {
          line: 233,
          column: 29
        }
      },
      "59": {
        start: {
          line: 232,
          column: 32
        },
        end: {
          line: 232,
          column: 121
        }
      },
      "60": {
        start: {
          line: 234,
          column: 28
        },
        end: {
          line: 234,
          column: 158
        }
      },
      "61": {
        start: {
          line: 235,
          column: 28
        },
        end: {
          line: 235,
          column: 34
        }
      },
      "62": {
        start: {
          line: 237,
          column: 28
        },
        end: {
          line: 237,
          column: 75
        }
      },
      "63": {
        start: {
          line: 239,
          column: 33
        },
        end: {
          line: 243,
          column: 21
        }
      },
      "64": {
        start: {
          line: 244,
          column: 20
        },
        end: {
          line: 262,
          column: 21
        }
      },
      "65": {
        start: {
          line: 246,
          column: 44
        },
        end: {
          line: 246,
          column: 81
        }
      },
      "66": {
        start: {
          line: 247,
          column: 40
        },
        end: {
          line: 247,
          column: 42
        }
      },
      "67": {
        start: {
          line: 248,
          column: 37
        },
        end: {
          line: 258,
          column: 25
        }
      },
      "68": {
        start: {
          line: 259,
          column: 46
        },
        end: {
          line: 259,
          column: 96
        }
      },
      "69": {
        start: {
          line: 260,
          column: 24
        },
        end: {
          line: 260,
          column: 55
        }
      },
      "70": {
        start: {
          line: 261,
          column: 24
        },
        end: {
          line: 261,
          column: 65
        }
      },
      "71": {
        start: {
          line: 263,
          column: 20
        },
        end: {
          line: 263,
          column: 95
        }
      },
      "72": {
        start: {
          line: 264,
          column: 20
        },
        end: {
          line: 269,
          column: 22
        }
      },
      "73": {
        start: {
          line: 272,
          column: 20
        },
        end: {
          line: 272,
          column: 84
        }
      },
      "74": {
        start: {
          line: 273,
          column: 20
        },
        end: {
          line: 273,
          column: 122
        }
      },
      "75": {
        start: {
          line: 278,
          column: 8
        },
        end: {
          line: 331,
          column: 11
        }
      },
      "76": {
        start: {
          line: 287,
          column: 65
        },
        end: {
          line: 287,
          column: 69
        }
      },
      "77": {
        start: {
          line: 288,
          column: 16
        },
        end: {
          line: 329,
          column: 17
        }
      },
      "78": {
        start: {
          line: 289,
          column: 20
        },
        end: {
          line: 289,
          column: 94
        }
      },
      "79": {
        start: {
          line: 290,
          column: 44
        },
        end: {
          line: 290,
          column: 95
        }
      },
      "80": {
        start: {
          line: 291,
          column: 20
        },
        end: {
          line: 293,
          column: 21
        }
      },
      "81": {
        start: {
          line: 292,
          column: 24
        },
        end: {
          line: 292,
          column: 82
        }
      },
      "82": {
        start: {
          line: 294,
          column: 33
        },
        end: {
          line: 298,
          column: 21
        }
      },
      "83": {
        start: {
          line: 299,
          column: 20
        },
        end: {
          line: 314,
          column: 21
        }
      },
      "84": {
        start: {
          line: 300,
          column: 37
        },
        end: {
          line: 310,
          column: 25
        }
      },
      "85": {
        start: {
          line: 311,
          column: 46
        },
        end: {
          line: 311,
          column: 96
        }
      },
      "86": {
        start: {
          line: 312,
          column: 24
        },
        end: {
          line: 312,
          column: 55
        }
      },
      "87": {
        start: {
          line: 313,
          column: 24
        },
        end: {
          line: 313,
          column: 65
        }
      },
      "88": {
        start: {
          line: 315,
          column: 20
        },
        end: {
          line: 318,
          column: 23
        }
      },
      "89": {
        start: {
          line: 319,
          column: 20
        },
        end: {
          line: 324,
          column: 22
        }
      },
      "90": {
        start: {
          line: 327,
          column: 20
        },
        end: {
          line: 327,
          column: 101
        }
      },
      "91": {
        start: {
          line: 328,
          column: 20
        },
        end: {
          line: 328,
          column: 133
        }
      },
      "92": {
        start: {
          line: 333,
          column: 8
        },
        end: {
          line: 362,
          column: 11
        }
      },
      "93": {
        start: {
          line: 337,
          column: 31
        },
        end: {
          line: 353,
          column: 17
        }
      },
      "94": {
        start: {
          line: 354,
          column: 16
        },
        end: {
          line: 354,
          column: 63
        }
      },
      "95": {
        start: {
          line: 355,
          column: 16
        },
        end: {
          line: 360,
          column: 18
        }
      },
      "96": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 409,
          column: 11
        }
      },
      "97": {
        start: {
          line: 372,
          column: 29
        },
        end: {
          line: 401,
          column: 17
        }
      },
      "98": {
        start: {
          line: 402,
          column: 16
        },
        end: {
          line: 402,
          column: 60
        }
      },
      "99": {
        start: {
          line: 403,
          column: 16
        },
        end: {
          line: 407,
          column: 18
        }
      },
      "100": {
        start: {
          line: 411,
          column: 8
        },
        end: {
          line: 460,
          column: 11
        }
      },
      "101": {
        start: {
          line: 417,
          column: 31
        },
        end: {
          line: 453,
          column: 17
        }
      },
      "102": {
        start: {
          line: 454,
          column: 16
        },
        end: {
          line: 458,
          column: 18
        }
      },
      "103": {
        start: {
          line: 466,
          column: 8
        },
        end: {
          line: 501,
          column: 9
        }
      },
      "104": {
        start: {
          line: 468,
          column: 16
        },
        end: {
          line: 473,
          column: 18
        }
      },
      "105": {
        start: {
          line: 475,
          column: 16
        },
        end: {
          line: 480,
          column: 18
        }
      },
      "106": {
        start: {
          line: 482,
          column: 16
        },
        end: {
          line: 487,
          column: 18
        }
      },
      "107": {
        start: {
          line: 490,
          column: 33
        },
        end: {
          line: 490,
          column: 57
        }
      },
      "108": {
        start: {
          line: 491,
          column: 35
        },
        end: {
          line: 491,
          column: 55
        }
      },
      "109": {
        start: {
          line: 492,
          column: 16
        },
        end: {
          line: 497,
          column: 18
        }
      },
      "110": {
        start: {
          line: 500,
          column: 16
        },
        end: {
          line: 500,
          column: 63
        }
      },
      "111": {
        start: {
          line: 504,
          column: 8
        },
        end: {
          line: 507,
          column: 11
        }
      },
      "112": {
        start: {
          line: 508,
          column: 8
        },
        end: {
          line: 508,
          column: 28
        }
      },
      "113": {
        start: {
          line: 509,
          column: 8
        },
        end: {
          line: 509,
          column: 59
        }
      },
      "114": {
        start: {
          line: 512,
          column: 8
        },
        end: {
          line: 512,
          column: 47
        }
      },
      "115": {
        start: {
          line: 514,
          column: 8
        },
        end: {
          line: 514,
          column: 46
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        loc: {
          start: {
            line: 18,
            column: 24
          },
          end: {
            line: 36,
            column: 5
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        loc: {
          start: {
            line: 37,
            column: 17
          },
          end: {
            line: 363,
            column: 5
          }
        },
        line: 37
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 60,
            column: 21
          },
          end: {
            line: 60,
            column: 22
          }
        },
        loc: {
          start: {
            line: 60,
            column: 37
          },
          end: {
            line: 124,
            column: 13
          }
        },
        line: 60
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 141,
            column: 21
          },
          end: {
            line: 141,
            column: 22
          }
        },
        loc: {
          start: {
            line: 141,
            column: 37
          },
          end: {
            line: 183,
            column: 13
          }
        },
        line: 141
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 194,
            column: 21
          },
          end: {
            line: 194,
            column: 22
          }
        },
        loc: {
          start: {
            line: 194,
            column: 37
          },
          end: {
            line: 275,
            column: 13
          }
        },
        line: 194
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 286,
            column: 21
          },
          end: {
            line: 286,
            column: 22
          }
        },
        loc: {
          start: {
            line: 286,
            column: 37
          },
          end: {
            line: 330,
            column: 13
          }
        },
        line: 286
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 336,
            column: 21
          },
          end: {
            line: 336,
            column: 22
          }
        },
        loc: {
          start: {
            line: 336,
            column: 33
          },
          end: {
            line: 361,
            column: 13
          }
        },
        line: 336
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 364,
            column: 4
          },
          end: {
            line: 364,
            column: 5
          }
        },
        loc: {
          start: {
            line: 364,
            column: 21
          },
          end: {
            line: 461,
            column: 5
          }
        },
        line: 364
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 371,
            column: 18
          },
          end: {
            line: 371,
            column: 19
          }
        },
        loc: {
          start: {
            line: 371,
            column: 30
          },
          end: {
            line: 408,
            column: 13
          }
        },
        line: 371
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 416,
            column: 18
          },
          end: {
            line: 416,
            column: 19
          }
        },
        loc: {
          start: {
            line: 416,
            column: 30
          },
          end: {
            line: 459,
            column: 13
          }
        },
        line: 416
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 465,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        loc: {
          start: {
            line: 465,
            column: 37
          },
          end: {
            line: 502,
            column: 5
          }
        },
        line: 465
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 503,
            column: 4
          },
          end: {
            line: 503,
            column: 5
          }
        },
        loc: {
          start: {
            line: 503,
            column: 18
          },
          end: {
            line: 510,
            column: 5
          }
        },
        line: 503
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 511,
            column: 4
          },
          end: {
            line: 511,
            column: 5
          }
        },
        loc: {
          start: {
            line: 511,
            column: 17
          },
          end: {
            line: 515,
            column: 5
          }
        },
        line: 511
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 25,
            column: 25
          },
          end: {
            line: 25,
            column: 43
          }
        }, {
          start: {
            line: 25,
            column: 47
          },
          end: {
            line: 25,
            column: 63
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 24
          },
          end: {
            line: 26,
            column: 50
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 24
          },
          end: {
            line: 26,
            column: 41
          }
        }, {
          start: {
            line: 26,
            column: 45
          },
          end: {
            line: 26,
            column: 50
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 25
          },
          end: {
            line: 27,
            column: 43
          }
        }, {
          start: {
            line: 27,
            column: 47
          },
          end: {
            line: 27,
            column: 52
          }
        }],
        line: 27
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 61,
            column: 34
          },
          end: {
            line: 61,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 61,
            column: 45
          },
          end: {
            line: 61,
            column: 49
          }
        }],
        line: 61
      },
      "5": {
        loc: {
          start: {
            line: 61,
            column: 51
          },
          end: {
            line: 61,
            column: 66
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 61,
            column: 62
          },
          end: {
            line: 61,
            column: 66
          }
        }],
        line: 61
      },
      "6": {
        loc: {
          start: {
            line: 71,
            column: 34
          },
          end: {
            line: 71,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 71,
            column: 34
          },
          end: {
            line: 71,
            column: 51
          }
        }, {
          start: {
            line: 71,
            column: 55
          },
          end: {
            line: 71,
            column: 57
          }
        }],
        line: 71
      },
      "7": {
        loc: {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 85
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 72,
            column: 56
          }
        }, {
          start: {
            line: 72,
            column: 60
          },
          end: {
            line: 72,
            column: 85
          }
        }],
        line: 72
      },
      "8": {
        loc: {
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 57
          }
        }, {
          start: {
            line: 73,
            column: 61
          },
          end: {
            line: 73,
            column: 88
          }
        }],
        line: 73
      },
      "9": {
        loc: {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 74,
            column: 42
          }
        }, {
          start: {
            line: 74,
            column: 46
          },
          end: {
            line: 74,
            column: 71
          }
        }],
        line: 74
      },
      "10": {
        loc: {
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 89
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 75,
            column: 28
          },
          end: {
            line: 75,
            column: 48
          }
        }, {
          start: {
            line: 75,
            column: 52
          },
          end: {
            line: 75,
            column: 89
          }
        }],
        line: 75
      },
      "11": {
        loc: {
          start: {
            line: 76,
            column: 28
          },
          end: {
            line: 76,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 76,
            column: 28
          },
          end: {
            line: 76,
            column: 42
          }
        }, {
          start: {
            line: 76,
            column: 46
          },
          end: {
            line: 76,
            column: 71
          }
        }],
        line: 76
      },
      "12": {
        loc: {
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 86,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 84,
            column: 20
          },
          end: {
            line: 86,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 84
      },
      "13": {
        loc: {
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 121,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 20
          },
          end: {
            line: 121,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "14": {
        loc: {
          start: {
            line: 122,
            column: 62
          },
          end: {
            line: 122,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 122,
            column: 87
          },
          end: {
            line: 122,
            column: 100
          }
        }, {
          start: {
            line: 122,
            column: 103
          },
          end: {
            line: 122,
            column: 118
          }
        }],
        line: 122
      },
      "15": {
        loc: {
          start: {
            line: 150,
            column: 34
          },
          end: {
            line: 150,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 150,
            column: 34
          },
          end: {
            line: 150,
            column: 51
          }
        }, {
          start: {
            line: 150,
            column: 55
          },
          end: {
            line: 150,
            column: 57
          }
        }],
        line: 150
      },
      "16": {
        loc: {
          start: {
            line: 199,
            column: 20
          },
          end: {
            line: 238,
            column: 21
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 200,
            column: 24
          },
          end: {
            line: 202,
            column: 34
          }
        }, {
          start: {
            line: 203,
            column: 24
          },
          end: {
            line: 205,
            column: 34
          }
        }, {
          start: {
            line: 206,
            column: 24
          },
          end: {
            line: 208,
            column: 34
          }
        }, {
          start: {
            line: 209,
            column: 24
          },
          end: {
            line: 211,
            column: 34
          }
        }, {
          start: {
            line: 212,
            column: 24
          },
          end: {
            line: 214,
            column: 34
          }
        }, {
          start: {
            line: 215,
            column: 24
          },
          end: {
            line: 217,
            column: 34
          }
        }, {
          start: {
            line: 218,
            column: 24
          },
          end: {
            line: 223,
            column: 34
          }
        }, {
          start: {
            line: 224,
            column: 24
          },
          end: {
            line: 229,
            column: 34
          }
        }, {
          start: {
            line: 230,
            column: 24
          },
          end: {
            line: 235,
            column: 34
          }
        }, {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 237,
            column: 75
          }
        }],
        line: 199
      },
      "17": {
        loc: {
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 221,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 28
          },
          end: {
            line: 221,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 219
      },
      "18": {
        loc: {
          start: {
            line: 219,
            column: 32
          },
          end: {
            line: 219,
            column: 88
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 219,
            column: 32
          },
          end: {
            line: 219,
            column: 43
          }
        }, {
          start: {
            line: 219,
            column: 47
          },
          end: {
            line: 219,
            column: 58
          }
        }, {
          start: {
            line: 219,
            column: 62
          },
          end: {
            line: 219,
            column: 73
          }
        }, {
          start: {
            line: 219,
            column: 77
          },
          end: {
            line: 219,
            column: 88
          }
        }],
        line: 219
      },
      "19": {
        loc: {
          start: {
            line: 225,
            column: 28
          },
          end: {
            line: 227,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 225,
            column: 28
          },
          end: {
            line: 227,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 225
      },
      "20": {
        loc: {
          start: {
            line: 225,
            column: 32
          },
          end: {
            line: 225,
            column: 81
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 225,
            column: 32
          },
          end: {
            line: 225,
            column: 47
          }
        }, {
          start: {
            line: 225,
            column: 51
          },
          end: {
            line: 225,
            column: 81
          }
        }],
        line: 225
      },
      "21": {
        loc: {
          start: {
            line: 231,
            column: 28
          },
          end: {
            line: 233,
            column: 29
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 28
          },
          end: {
            line: 233,
            column: 29
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "22": {
        loc: {
          start: {
            line: 231,
            column: 32
          },
          end: {
            line: 231,
            column: 125
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 231,
            column: 32
          },
          end: {
            line: 231,
            column: 43
          }
        }, {
          start: {
            line: 231,
            column: 47
          },
          end: {
            line: 231,
            column: 58
          }
        }, {
          start: {
            line: 231,
            column: 62
          },
          end: {
            line: 231,
            column: 82
          }
        }, {
          start: {
            line: 231,
            column: 86
          },
          end: {
            line: 231,
            column: 106
          }
        }, {
          start: {
            line: 231,
            column: 110
          },
          end: {
            line: 231,
            column: 125
          }
        }],
        line: 231
      },
      "23": {
        loc: {
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 262,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 20
          },
          end: {
            line: 262,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "24": {
        loc: {
          start: {
            line: 273,
            column: 62
          },
          end: {
            line: 273,
            column: 118
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 273,
            column: 87
          },
          end: {
            line: 273,
            column: 100
          }
        }, {
          start: {
            line: 273,
            column: 103
          },
          end: {
            line: 273,
            column: 118
          }
        }],
        line: 273
      },
      "25": {
        loc: {
          start: {
            line: 291,
            column: 20
          },
          end: {
            line: 293,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 20
          },
          end: {
            line: 293,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 291
      },
      "26": {
        loc: {
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 314,
            column: 21
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 299,
            column: 20
          },
          end: {
            line: 314,
            column: 21
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 299
      },
      "27": {
        loc: {
          start: {
            line: 328,
            column: 73
          },
          end: {
            line: 328,
            column: 129
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 328,
            column: 98
          },
          end: {
            line: 328,
            column: 111
          }
        }, {
          start: {
            line: 328,
            column: 114
          },
          end: {
            line: 328,
            column: 129
          }
        }],
        line: 328
      },
      "28": {
        loc: {
          start: {
            line: 466,
            column: 8
          },
          end: {
            line: 501,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 467,
            column: 12
          },
          end: {
            line: 473,
            column: 18
          }
        }, {
          start: {
            line: 474,
            column: 12
          },
          end: {
            line: 480,
            column: 18
          }
        }, {
          start: {
            line: 481,
            column: 12
          },
          end: {
            line: 487,
            column: 18
          }
        }, {
          start: {
            line: 488,
            column: 12
          },
          end: {
            line: 497,
            column: 18
          }
        }, {
          start: {
            line: 498,
            column: 12
          },
          end: {
            line: 500,
            column: 63
          }
        }],
        line: 466
      },
      "29": {
        loc: {
          start: {
            line: 490,
            column: 33
          },
          end: {
            line: 490,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 490,
            column: 33
          },
          end: {
            line: 490,
            column: 51
          }
        }, {
          start: {
            line: 490,
            column: 55
          },
          end: {
            line: 490,
            column: 57
          }
        }],
        line: 490
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0],
      "5": [0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "17": [0, 0],
      "18": [0, 0, 0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0, 0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0, 0, 0, 0],
      "29": [0, 0]
    },
    inputSourceMap: {
      file: "C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts",
      mappings: "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",
      names: [],
      sources: ["C:\\GitHub\\Svg-Mcp-Server\\src\\server\\SvgMcpServer.ts"],
      sourcesContent: ["/**\r\n * SVG MCP Server Implementation\r\n * \r\n * This is the main server class that extends FastMCP to provide\r\n * SVG generation capabilities through the Model Context Protocol.\r\n */\r\n\r\nimport { FastMCP } from 'fastmcp';\r\nimport { z } from 'zod';\r\nimport { logger } from '../utils/logger.js';\r\nimport { SvgRenderer } from '../core/SvgRenderer.js';\r\nimport { SvgDocumentProcessor, SvgDocumentSpec } from '../core/SvgDocumentProcessor.js';\r\nimport { BasicShapeGenerator, ShapeCollections } from '../core/shapes/index.js';\r\nimport { SvgValidationError } from '../types/svg.js';\r\n\r\nexport interface SvgMcpServerConfig {\r\n  name: string;\r\n  version: string;\r\n  description?: string;\r\n  maxSvgSize?: number;\r\n  enableDebug?: boolean;\r\n}\r\n\r\nexport class SvgMcpServer extends FastMCP {\r\n  private svgRenderer: SvgRenderer;\r\n  private documentProcessor: SvgDocumentProcessor;\r\n  private config: Required<SvgMcpServerConfig>;\r\n\r\n  constructor(config: SvgMcpServerConfig) {\r\n    super({\r\n      name: config.name,\r\n      version: config.version as `${number}.${number}.${number}`,\r\n    });\r\n\r\n    this.config = {\r\n      ...config,\r\n      description: config.description || 'SVG MCP Server',\r\n      maxSvgSize: config.maxSvgSize || 10000,\r\n      enableDebug: config.enableDebug || false,\r\n    };\r\n\r\n    this.svgRenderer = new SvgRenderer();\r\n    this.documentProcessor = new SvgDocumentProcessor();\r\n    \r\n    if (this.config.enableDebug) {\r\n      logger.setLogLevel('debug');\r\n    }\r\n\r\n    this.setupTools();\r\n    this.setupResources();\r\n  }\r\n\r\n  private setupTools(): void {\r\n    // Tool: Generate SVG\r\n    this.addTool({\r\n      name: 'generate_svg',\r\n      description: 'Generate an SVG document from a specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n          width: z.number().min(0).optional(),\r\n          height: z.number().min(0).optional(),\r\n          title: z.string().optional(),\r\n          description: z.string().optional(),\r\n          style: z.string().optional(),\r\n        }),\r\n        optimize: z.boolean().default(true),\r\n        validate: z.boolean().default(true),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document, optimize = true, validate = true } = args;\r\n\r\n        try {\r\n          logger.info('Processing SVG document request', { \r\n            elementCount: document.elements?.length,\r\n            optimize, \r\n            validate \r\n          });\r\n\r\n          // Convert to document specification\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            ...(document.width !== undefined && { width: document.width }),\r\n            ...(document.height !== undefined && { height: document.height }),\r\n            ...(document.title && { title: document.title }),\r\n            ...(document.description && { description: document.description }),\r\n            ...(document.style && { style: document.style }),\r\n            optimize,\r\n            validate,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Process document using the document processor\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n\r\n          // Check size limits\r\n          if (result.svg.length > this.config.maxSvgSize) {\r\n            throw new SvgValidationError(\r\n              `Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`,\r\n              [`SVG size: ${result.svg.length}, limit: ${this.config.maxSvgSize}`]\r\n            );\r\n          }\r\n\r\n          logger.info('SVG document processed successfully', {\r\n            size: result.svg.length,\r\n            elementCount: result.document.elements.length,\r\n            processingTime: result.processingTime,\r\n            warnings: result.warnings.length,\r\n            errors: result.errors.length,\r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify({\r\n                svg: result.svg,\r\n                document: result.document,\r\n                metadata: result.metadata,\r\n                processing: {\r\n                  time: result.processingTime,\r\n                  warnings: result.warnings,\r\n                  errors: result.errors,\r\n                  generated: new Date().toISOString(),\r\n                },\r\n                stats: {\r\n                  size: result.svg.length,\r\n                  elementCount: result.document.elements.length,\r\n                  complexity: result.metadata.complexity,\r\n                  features: result.metadata.features,\r\n                },\r\n              }, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('Failed to generate SVG', error);\r\n          \r\n          if (error instanceof SvgValidationError) {\r\n            throw error;\r\n          }\r\n          \r\n          throw new Error(`SVG generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Validate SVG Document\r\n    this.addTool({\r\n      name: 'validate_svg_document',\r\n      description: 'Validate an SVG document specification',\r\n      parameters: z.object({\r\n        document: z.object({\r\n          viewBox: z.object({\r\n            x: z.number(),\r\n            y: z.number(),\r\n            width: z.number().min(0),\r\n            height: z.number().min(0),\r\n          }),\r\n          elements: z.array(z.any()),\r\n        }),\r\n      }),\r\n      execute: async (args) => {\r\n        const { document } = args;\r\n        try {\r\n          logger.info('Validating SVG document', { \r\n            elementCount: document.elements?.length \r\n          });\r\n          \r\n          // Convert to document specification for validation\r\n          const spec: SvgDocumentSpec = {\r\n            viewBox: document.viewBox,\r\n            elements: document.elements || [],\r\n            validate: true,\r\n            generateMetadata: true,\r\n          };\r\n\r\n          // Use document processor for comprehensive validation\r\n          const result = await this.documentProcessor.processDocument(spec);\r\n          \r\n          const validationResult = {\r\n            valid: result.errors.length === 0,\r\n            errors: result.errors,\r\n            warnings: result.warnings,\r\n            metadata: result.metadata,\r\n            processingTime: result.processingTime,\r\n            compliance: result.metadata.compliance,\r\n            accessibility: result.metadata.accessibility,\r\n            features: result.metadata.features,\r\n            complexity: result.metadata.complexity,\r\n          };\r\n          \r\n          logger.info('SVG document validation completed', {\r\n            valid: validationResult.valid,\r\n            errors: validationResult.errors.length,\r\n            warnings: validationResult.warnings.length,\r\n          });\r\n          \r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(validationResult, null, 2)\r\n            }]\r\n          };\r\n        } catch (error) {\r\n          logger.error('SVG document validation failed', error);\r\n          throw error;\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Create Shape\r\n    this.addTool({\r\n      name: 'create_shape',\r\n      description: 'Create individual SVG shapes using the shape generator',\r\n      parameters: z.object({\r\n        type: z.enum(['circle', 'rect', 'line', 'text', 'group', 'path', 'ellipse', 'polygon', 'star']).describe('Type of shape to create'),\r\n        options: z.any().describe('Shape-specific options object'),\r\n        includeDocument: z.boolean().default(false).describe('Whether to wrap the shape in a complete SVG document')\r\n      }),\r\n      execute: async (args) => {\r\n        const { type, options, includeDocument } = args;\r\n\r\n        try {\r\n          logger.info('Creating shape', { type, includeDocument });\r\n          \r\n          let shape;\r\n          \r\n          switch (type) {\r\n            case 'circle':\r\n              shape = BasicShapeGenerator.createCircle(options);\r\n              break;\r\n            case 'rect':\r\n              shape = BasicShapeGenerator.createRect(options);\r\n              break;\r\n            case 'line':\r\n              shape = BasicShapeGenerator.createLine(options);\r\n              break;\r\n            case 'text':\r\n              shape = BasicShapeGenerator.createText(options);\r\n              break;\r\n            case 'group':\r\n              shape = BasicShapeGenerator.createGroup(options);\r\n              break;\r\n            case 'path':\r\n              shape = BasicShapeGenerator.createPath(options);\r\n              break;\r\n            case 'ellipse':\r\n              if (!options.cx || !options.cy || !options.rx || !options.ry) {\r\n                throw new Error('Ellipse requires cx, cy, rx, and ry parameters');\r\n              }\r\n              shape = BasicShapeGenerator.createEllipse(options.cx, options.cy, options.rx, options.ry, options);\r\n              break;\r\n            case 'polygon':\r\n              if (!options.points || !Array.isArray(options.points)) {\r\n                throw new Error('Polygon requires points array parameter');\r\n              }\r\n              shape = BasicShapeGenerator.createPolygon(options.points, options);\r\n              break;\r\n            case 'star':\r\n              if (!options.cx || !options.cy || !options.outerRadius || !options.innerRadius || !options.points) {\r\n                throw new Error('Star requires cx, cy, outerRadius, innerRadius, and points parameters');\r\n              }\r\n              shape = BasicShapeGenerator.createStar(options.cx, options.cy, options.outerRadius, options.innerRadius, options.points, options);\r\n              break;\r\n            default:\r\n              throw new Error(`Unknown shape type: ${type}`);\r\n          }\r\n\r\n          let result = {\r\n            shape,\r\n            svg: null as string | null,\r\n            document: null as any\r\n          };\r\n\r\n          if (includeDocument) {\r\n            // Calculate appropriate viewBox based on shape\r\n            const boundingBox = this.calculateShapeBoundingBox(shape);\r\n            const padding = 10;\r\n            \r\n            const spec: SvgDocumentSpec = {\r\n              viewBox: {\r\n                x: boundingBox.x - padding,\r\n                y: boundingBox.y - padding,\r\n                width: boundingBox.width + 2 * padding,\r\n                height: boundingBox.height + 2 * padding\r\n              },\r\n              elements: [shape],\r\n              title: `${type.charAt(0).toUpperCase() + type.slice(1)} Shape`,\r\n              description: `Generated ${type} shape`\r\n            };\r\n\r\n            const processResult = await this.documentProcessor.processDocument(spec);\r\n            result.svg = processResult.svg;\r\n            result.document = processResult.document;\r\n          }\r\n\r\n          logger.info('Shape created successfully', { type, shapeType: shape.type });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(result, null, 2)\r\n            }]\r\n          };\r\n\r\n        } catch (error) {\r\n          logger.error('Shape creation failed', { error, type, options });\r\n          throw new Error(`Shape creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Create Shape Collection\r\n    this.addTool({\r\n      name: 'create_shape_collection',\r\n      description: 'Create pre-defined collections of shapes for common use cases',\r\n      parameters: z.object({\r\n        collection: z.enum(['geometric', 'flowchart', 'arrows', 'stars', 'ui']).describe('Type of shape collection to create'),\r\n        options: z.any().optional().describe('Optional styling options to apply to all shapes'),\r\n        includeDocument: z.boolean().default(true).describe('Whether to wrap the collection in a complete SVG document')\r\n      }),\r\n      execute: async (args) => {\r\n        const { collection, options, includeDocument } = args;\r\n\r\n        try {\r\n          logger.info('Creating shape collection', { collection, includeDocument });\r\n          \r\n          const shapeCollection = ShapeCollections.getCollection(collection, options);\r\n          \r\n          if (!shapeCollection) {\r\n            throw new Error(`Unknown collection type: ${collection}`);\r\n          }\r\n\r\n          let result = {\r\n            collection: shapeCollection,\r\n            svg: null as string | null,\r\n            document: null as any\r\n          };\r\n\r\n          if (includeDocument) {\r\n            const spec: SvgDocumentSpec = {\r\n              viewBox: {\r\n                x: shapeCollection.boundingBox.x - 10,\r\n                y: shapeCollection.boundingBox.y - 10,\r\n                width: shapeCollection.boundingBox.width + 20,\r\n                height: shapeCollection.boundingBox.height + 20\r\n              },\r\n              elements: shapeCollection.shapes,\r\n              title: shapeCollection.name,\r\n              description: shapeCollection.description\r\n            };\r\n\r\n            const processResult = await this.documentProcessor.processDocument(spec);\r\n            result.svg = processResult.svg;\r\n            result.document = processResult.document;\r\n          }\r\n\r\n          logger.info('Shape collection created successfully', { \r\n            collection, \r\n            shapeCount: shapeCollection.shapes.length \r\n          });\r\n\r\n          return {\r\n            content: [{\r\n              type: 'text',\r\n              text: JSON.stringify(result, null, 2)\r\n            }]\r\n          };\r\n\r\n        } catch (error) {\r\n          logger.error('Shape collection creation failed', { error, collection, options });\r\n          throw new Error(`Shape collection creation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n        }\r\n      }\r\n    });\r\n\r\n    // Tool: Health Check\r\n    this.addTool({\r\n      name: 'health_check',\r\n      description: 'Check the health and status of the SVG MCP server',\r\n      execute: async () => {\r\n        const health = {\r\n          status: 'healthy',\r\n          timestamp: new Date().toISOString(),\r\n          version: this.config.version,\r\n          config: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n            debugEnabled: this.config.enableDebug,\r\n          },\r\n          renderer: {\r\n            status: 'operational',\r\n            capabilities: this.svgRenderer.getCapabilities(),\r\n          },\r\n          processor: {\r\n            status: 'operational',\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n          },\r\n        };\r\n\r\n        logger.debug('Health check performed', health);\r\n        return {\r\n          content: [{\r\n            type: 'text',\r\n            text: JSON.stringify(health, null, 2)\r\n          }]\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  private setupResources(): void {\r\n    // Resource: Server Information\r\n    this.addResource({\r\n      uri: 'server://info',\r\n      name: 'Server Information',\r\n      description: 'Information about the SVG MCP server',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const info = {\r\n          name: this.config.name,\r\n          version: this.config.version,\r\n          description: this.config.description,\r\n          capabilities: {\r\n            svgGeneration: true,\r\n            documentProcessing: true,\r\n            validation: true,\r\n            optimization: true,\r\n            accessibility: true,\r\n            rfc7996Compliance: true,\r\n            metadataGeneration: true,\r\n            transforms: ['scale', 'translate', 'normalize', 'accessibility'],\r\n          },\r\n          limits: {\r\n            maxSvgSize: this.config.maxSvgSize,\r\n          },\r\n          supportedElements: this.svgRenderer.getSupportedElements(),\r\n          processor: {\r\n            statistics: this.documentProcessor.getProcessingStats(),\r\n            features: [\r\n              'document_validation',\r\n              'element_relationship_analysis',\r\n              'compliance_checking',\r\n              'optimization',\r\n              'metadata_generation',\r\n              'accessibility_enhancement',\r\n            ],\r\n          },\r\n        };\r\n\r\n        logger.debug('Server info requested', info);\r\n        return {\r\n          text: JSON.stringify(info, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'server://info'\r\n        };\r\n      }\r\n    });\r\n\r\n    // Resource: SVG Schema\r\n    this.addResource({\r\n      uri: 'schema://svg-document',\r\n      name: 'SVG Document Schema',\r\n      description: 'JSON schema for SVG document structure',\r\n      mimeType: 'application/json',\r\n      load: async () => {\r\n        const schema = {\r\n          $schema: 'http://json-schema.org/draft-07/schema#',\r\n          title: 'SVG Document',\r\n          description: 'Schema for SVG document specification',\r\n          type: 'object',\r\n          required: ['viewBox', 'elements'],\r\n          properties: {\r\n            viewBox: {\r\n              type: 'object',\r\n              required: ['x', 'y', 'width', 'height'],\r\n              properties: {\r\n                x: { type: 'number' },\r\n                y: { type: 'number' },\r\n                width: { type: 'number', minimum: 0 },\r\n                height: { type: 'number', minimum: 0 },\r\n              },\r\n            },\r\n            elements: {\r\n              type: 'array',\r\n              items: { $ref: '#/definitions/SvgElement' },\r\n            },\r\n            // Additional properties would be defined here\r\n          },\r\n          definitions: {\r\n            SvgElement: {\r\n              oneOf: [\r\n                { $ref: '#/definitions/CircleElement' },\r\n                { $ref: '#/definitions/RectElement' },\r\n                { $ref: '#/definitions/LineElement' },\r\n                { $ref: '#/definitions/PathElement' },\r\n                { $ref: '#/definitions/TextElement' },\r\n                { $ref: '#/definitions/GroupElement' },\r\n              ],\r\n            },\r\n            // Element definitions would be expanded here\r\n          },\r\n        };\r\n\r\n        return {\r\n          text: JSON.stringify(schema, null, 2),\r\n          mimeType: 'application/json',\r\n          uri: 'schema://svg-document'\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calculate bounding box for a shape element\r\n   */\r\n  private calculateShapeBoundingBox(shape: any): { x: number; y: number; width: number; height: number } {\r\n    switch (shape.type) {\r\n      case 'circle':\r\n        return {\r\n          x: shape.cx - shape.r,\r\n          y: shape.cy - shape.r,\r\n          width: shape.r * 2,\r\n          height: shape.r * 2\r\n        };\r\n      case 'rect':\r\n        return {\r\n          x: shape.x,\r\n          y: shape.y,\r\n          width: shape.width,\r\n          height: shape.height\r\n        };\r\n      case 'line':\r\n        return {\r\n          x: Math.min(shape.x1, shape.x2),\r\n          y: Math.min(shape.y1, shape.y2),\r\n          width: Math.abs(shape.x2 - shape.x1),\r\n          height: Math.abs(shape.y2 - shape.y1)\r\n        };\r\n      case 'text':\r\n        // Estimate text bounding box\r\n        const fontSize = shape['font-size'] || 16;\r\n        const textLength = shape.content.length;\r\n        return {\r\n          x: shape.x,\r\n          y: shape.y - fontSize,\r\n          width: textLength * fontSize * 0.6, // Rough estimate\r\n          height: fontSize\r\n        };\r\n      default:\r\n        // Default bounding box for unknown shapes\r\n        return { x: 0, y: 0, width: 100, height: 100 };\r\n    }\r\n  }\r\n\r\n  async start(): Promise<void> {\r\n    logger.info('Starting SVG MCP Server', {\r\n      name: this.config.name,\r\n      version: this.config.version,\r\n    });\r\n\r\n    await super.start();\r\n    \r\n    logger.info('SVG MCP Server started successfully');\r\n  }\r\n\r\n  async stop(): Promise<void> {\r\n    logger.info('Stopping SVG MCP Server');\r\n    // Cleanup logic would go here\r\n    logger.info('SVG MCP Server stopped');\r\n  }\r\n}\r\n"],
      version: 3
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3ae1b76476360652231831aecbbb12be5200a31b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ktf0pjl7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ktf0pjl7m();
/**
 * SVG MCP Server Implementation
 *
 * This is the main server class that extends FastMCP to provide
 * SVG generation capabilities through the Model Context Protocol.
 */
import { FastMCP } from 'fastmcp';
import { z } from 'zod';
import { logger } from '../utils/logger.js';
import { SvgRenderer } from '../core/SvgRenderer.js';
import { SvgDocumentProcessor } from '../core/SvgDocumentProcessor.js';
import { BasicShapeGenerator, ShapeCollections } from '../core/shapes/index.js';
import { SvgValidationError } from '../types/svg.js';
export class SvgMcpServer extends FastMCP {
  svgRenderer;
  documentProcessor;
  config;
  constructor(config) {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[0]++;
    cov_1ktf0pjl7m().s[0]++;
    super({
      name: config.name,
      version: config.version
    });
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[1]++;
    this.config = {
      ...config,
      description:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[0][0]++, config.description) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[0][1]++, 'SVG MCP Server'),
      maxSvgSize:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[1][0]++, config.maxSvgSize) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[1][1]++, 10000),
      enableDebug:
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[2][0]++, config.enableDebug) ||
      /* istanbul ignore next */
      (cov_1ktf0pjl7m().b[2][1]++, false)
    };
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[2]++;
    this.svgRenderer = new SvgRenderer();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[3]++;
    this.documentProcessor = new SvgDocumentProcessor();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[4]++;
    if (this.config.enableDebug) {
      /* istanbul ignore next */
      cov_1ktf0pjl7m().b[3][0]++;
      cov_1ktf0pjl7m().s[5]++;
      logger.setLogLevel('debug');
    } else
    /* istanbul ignore next */
    {
      cov_1ktf0pjl7m().b[3][1]++;
    }
    cov_1ktf0pjl7m().s[6]++;
    this.setupTools();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[7]++;
    this.setupResources();
  }
  setupTools() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[1]++;
    cov_1ktf0pjl7m().s[8]++;
    // Tool: Generate SVG
    this.addTool({
      name: 'generate_svg',
      description: 'Generate an SVG document from a specification',
      parameters: z.object({
        document: z.object({
          viewBox: z.object({
            x: z.number(),
            y: z.number(),
            width: z.number().min(0),
            height: z.number().min(0)
          }),
          elements: z.array(z.any()),
          width: z.number().min(0).optional(),
          height: z.number().min(0).optional(),
          title: z.string().optional(),
          description: z.string().optional(),
          style: z.string().optional()
        }),
        optimize: z.boolean().default(true),
        validate: z.boolean().default(true)
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[2]++;
        const {
          document,
          optimize =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[4][0]++, true),
          validate =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[5][0]++, true)
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[9]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[10]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[11]++;
          logger.info('Processing SVG document request', {
            elementCount: document.elements?.length,
            optimize,
            validate
          });
          // Convert to document specification
          const spec =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[12]++, {
            viewBox: document.viewBox,
            elements:
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[6][0]++, document.elements) ||
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[6][1]++, []),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[7][0]++, document.width !== undefined) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[7][1]++, {
              width: document.width
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[8][0]++, document.height !== undefined) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[8][1]++, {
              height: document.height
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[9][0]++, document.title) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[9][1]++, {
              title: document.title
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[10][0]++, document.description) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[10][1]++, {
              description: document.description
            })),
            ...(
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[11][0]++, document.style) &&
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[11][1]++, {
              style: document.style
            })),
            optimize,
            validate,
            generateMetadata: true
          });
          // Process document using the document processor
          const result =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[13]++, await this.documentProcessor.processDocument(spec));
          // Check size limits
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[14]++;
          if (result.svg.length > this.config.maxSvgSize) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[12][0]++;
            cov_1ktf0pjl7m().s[15]++;
            throw new SvgValidationError(`Generated SVG exceeds maximum size limit of ${this.config.maxSvgSize} characters`, [`SVG size: ${result.svg.length}, limit: ${this.config.maxSvgSize}`]);
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[12][1]++;
          }
          cov_1ktf0pjl7m().s[16]++;
          logger.info('SVG document processed successfully', {
            size: result.svg.length,
            elementCount: result.document.elements.length,
            processingTime: result.processingTime,
            warnings: result.warnings.length,
            errors: result.errors.length
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[17]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify({
                svg: result.svg,
                document: result.document,
                metadata: result.metadata,
                processing: {
                  time: result.processingTime,
                  warnings: result.warnings,
                  errors: result.errors,
                  generated: new Date().toISOString()
                },
                stats: {
                  size: result.svg.length,
                  elementCount: result.document.elements.length,
                  complexity: result.metadata.complexity,
                  features: result.metadata.features
                }
              }, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[18]++;
          logger.error('Failed to generate SVG', error);
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[19]++;
          if (error instanceof SvgValidationError) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[13][0]++;
            cov_1ktf0pjl7m().s[20]++;
            throw error;
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[13][1]++;
          }
          cov_1ktf0pjl7m().s[21]++;
          throw new Error(`SVG generation failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[14][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[14][1]++, 'Unknown error')}`);
        }
      }
    });
    // Tool: Validate SVG Document
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[22]++;
    this.addTool({
      name: 'validate_svg_document',
      description: 'Validate an SVG document specification',
      parameters: z.object({
        document: z.object({
          viewBox: z.object({
            x: z.number(),
            y: z.number(),
            width: z.number().min(0),
            height: z.number().min(0)
          }),
          elements: z.array(z.any())
        })
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[3]++;
        const {
          document
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[23]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[24]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[25]++;
          logger.info('Validating SVG document', {
            elementCount: document.elements?.length
          });
          // Convert to document specification for validation
          const spec =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[26]++, {
            viewBox: document.viewBox,
            elements:
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[15][0]++, document.elements) ||
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().b[15][1]++, []),
            validate: true,
            generateMetadata: true
          });
          // Use document processor for comprehensive validation
          const result =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[27]++, await this.documentProcessor.processDocument(spec));
          const validationResult =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[28]++, {
            valid: result.errors.length === 0,
            errors: result.errors,
            warnings: result.warnings,
            metadata: result.metadata,
            processingTime: result.processingTime,
            compliance: result.metadata.compliance,
            accessibility: result.metadata.accessibility,
            features: result.metadata.features,
            complexity: result.metadata.complexity
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[29]++;
          logger.info('SVG document validation completed', {
            valid: validationResult.valid,
            errors: validationResult.errors.length,
            warnings: validationResult.warnings.length
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[30]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(validationResult, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[31]++;
          logger.error('SVG document validation failed', error);
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[32]++;
          throw error;
        }
      }
    });
    // Tool: Create Shape
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[33]++;
    this.addTool({
      name: 'create_shape',
      description: 'Create individual SVG shapes using the shape generator',
      parameters: z.object({
        type: z.enum(['circle', 'rect', 'line', 'text', 'group', 'path', 'ellipse', 'polygon', 'star']).describe('Type of shape to create'),
        options: z.any().describe('Shape-specific options object'),
        includeDocument: z.boolean().default(false).describe('Whether to wrap the shape in a complete SVG document')
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[4]++;
        const {
          type,
          options,
          includeDocument
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[34]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[35]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[36]++;
          logger.info('Creating shape', {
            type,
            includeDocument
          });
          let shape;
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[37]++;
          switch (type) {
            case 'circle':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][0]++;
              cov_1ktf0pjl7m().s[38]++;
              shape = BasicShapeGenerator.createCircle(options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[39]++;
              break;
            case 'rect':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][1]++;
              cov_1ktf0pjl7m().s[40]++;
              shape = BasicShapeGenerator.createRect(options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[41]++;
              break;
            case 'line':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][2]++;
              cov_1ktf0pjl7m().s[42]++;
              shape = BasicShapeGenerator.createLine(options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[43]++;
              break;
            case 'text':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][3]++;
              cov_1ktf0pjl7m().s[44]++;
              shape = BasicShapeGenerator.createText(options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[45]++;
              break;
            case 'group':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][4]++;
              cov_1ktf0pjl7m().s[46]++;
              shape = BasicShapeGenerator.createGroup(options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[47]++;
              break;
            case 'path':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][5]++;
              cov_1ktf0pjl7m().s[48]++;
              shape = BasicShapeGenerator.createPath(options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[49]++;
              break;
            case 'ellipse':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][6]++;
              cov_1ktf0pjl7m().s[50]++;
              if (
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[18][0]++, !options.cx) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[18][1]++, !options.cy) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[18][2]++, !options.rx) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[18][3]++, !options.ry)) {
                /* istanbul ignore next */
                cov_1ktf0pjl7m().b[17][0]++;
                cov_1ktf0pjl7m().s[51]++;
                throw new Error('Ellipse requires cx, cy, rx, and ry parameters');
              } else
              /* istanbul ignore next */
              {
                cov_1ktf0pjl7m().b[17][1]++;
              }
              cov_1ktf0pjl7m().s[52]++;
              shape = BasicShapeGenerator.createEllipse(options.cx, options.cy, options.rx, options.ry, options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[53]++;
              break;
            case 'polygon':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][7]++;
              cov_1ktf0pjl7m().s[54]++;
              if (
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[20][0]++, !options.points) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[20][1]++, !Array.isArray(options.points))) {
                /* istanbul ignore next */
                cov_1ktf0pjl7m().b[19][0]++;
                cov_1ktf0pjl7m().s[55]++;
                throw new Error('Polygon requires points array parameter');
              } else
              /* istanbul ignore next */
              {
                cov_1ktf0pjl7m().b[19][1]++;
              }
              cov_1ktf0pjl7m().s[56]++;
              shape = BasicShapeGenerator.createPolygon(options.points, options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[57]++;
              break;
            case 'star':
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][8]++;
              cov_1ktf0pjl7m().s[58]++;
              if (
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[22][0]++, !options.cx) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[22][1]++, !options.cy) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[22][2]++, !options.outerRadius) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[22][3]++, !options.innerRadius) ||
              /* istanbul ignore next */
              (cov_1ktf0pjl7m().b[22][4]++, !options.points)) {
                /* istanbul ignore next */
                cov_1ktf0pjl7m().b[21][0]++;
                cov_1ktf0pjl7m().s[59]++;
                throw new Error('Star requires cx, cy, outerRadius, innerRadius, and points parameters');
              } else
              /* istanbul ignore next */
              {
                cov_1ktf0pjl7m().b[21][1]++;
              }
              cov_1ktf0pjl7m().s[60]++;
              shape = BasicShapeGenerator.createStar(options.cx, options.cy, options.outerRadius, options.innerRadius, options.points, options);
              /* istanbul ignore next */
              cov_1ktf0pjl7m().s[61]++;
              break;
            default:
              /* istanbul ignore next */
              cov_1ktf0pjl7m().b[16][9]++;
              cov_1ktf0pjl7m().s[62]++;
              throw new Error(`Unknown shape type: ${type}`);
          }
          let result =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[63]++, {
            shape,
            svg: null,
            document: null
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[64]++;
          if (includeDocument) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[23][0]++;
            // Calculate appropriate viewBox based on shape
            const boundingBox =
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().s[65]++, this.calculateShapeBoundingBox(shape));
            const padding =
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().s[66]++, 10);
            const spec =
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().s[67]++, {
              viewBox: {
                x: boundingBox.x - padding,
                y: boundingBox.y - padding,
                width: boundingBox.width + 2 * padding,
                height: boundingBox.height + 2 * padding
              },
              elements: [shape],
              title: `${type.charAt(0).toUpperCase() + type.slice(1)} Shape`,
              description: `Generated ${type} shape`
            });
            const processResult =
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().s[68]++, await this.documentProcessor.processDocument(spec));
            /* istanbul ignore next */
            cov_1ktf0pjl7m().s[69]++;
            result.svg = processResult.svg;
            /* istanbul ignore next */
            cov_1ktf0pjl7m().s[70]++;
            result.document = processResult.document;
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[23][1]++;
          }
          cov_1ktf0pjl7m().s[71]++;
          logger.info('Shape created successfully', {
            type,
            shapeType: shape.type
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[72]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(result, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[73]++;
          logger.error('Shape creation failed', {
            error,
            type,
            options
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[74]++;
          throw new Error(`Shape creation failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[24][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[24][1]++, 'Unknown error')}`);
        }
      }
    });
    // Tool: Create Shape Collection
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[75]++;
    this.addTool({
      name: 'create_shape_collection',
      description: 'Create pre-defined collections of shapes for common use cases',
      parameters: z.object({
        collection: z.enum(['geometric', 'flowchart', 'arrows', 'stars', 'ui']).describe('Type of shape collection to create'),
        options: z.any().optional().describe('Optional styling options to apply to all shapes'),
        includeDocument: z.boolean().default(true).describe('Whether to wrap the collection in a complete SVG document')
      }),
      execute: async args => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[5]++;
        const {
          collection,
          options,
          includeDocument
        } =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[76]++, args);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[77]++;
        try {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[78]++;
          logger.info('Creating shape collection', {
            collection,
            includeDocument
          });
          const shapeCollection =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[79]++, ShapeCollections.getCollection(collection, options));
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[80]++;
          if (!shapeCollection) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[25][0]++;
            cov_1ktf0pjl7m().s[81]++;
            throw new Error(`Unknown collection type: ${collection}`);
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[25][1]++;
          }
          let result =
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().s[82]++, {
            collection: shapeCollection,
            svg: null,
            document: null
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[83]++;
          if (includeDocument) {
            /* istanbul ignore next */
            cov_1ktf0pjl7m().b[26][0]++;
            const spec =
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().s[84]++, {
              viewBox: {
                x: shapeCollection.boundingBox.x - 10,
                y: shapeCollection.boundingBox.y - 10,
                width: shapeCollection.boundingBox.width + 20,
                height: shapeCollection.boundingBox.height + 20
              },
              elements: shapeCollection.shapes,
              title: shapeCollection.name,
              description: shapeCollection.description
            });
            const processResult =
            /* istanbul ignore next */
            (cov_1ktf0pjl7m().s[85]++, await this.documentProcessor.processDocument(spec));
            /* istanbul ignore next */
            cov_1ktf0pjl7m().s[86]++;
            result.svg = processResult.svg;
            /* istanbul ignore next */
            cov_1ktf0pjl7m().s[87]++;
            result.document = processResult.document;
          } else
          /* istanbul ignore next */
          {
            cov_1ktf0pjl7m().b[26][1]++;
          }
          cov_1ktf0pjl7m().s[88]++;
          logger.info('Shape collection created successfully', {
            collection,
            shapeCount: shapeCollection.shapes.length
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[89]++;
          return {
            content: [{
              type: 'text',
              text: JSON.stringify(result, null, 2)
            }]
          };
        } catch (error) {
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[90]++;
          logger.error('Shape collection creation failed', {
            error,
            collection,
            options
          });
          /* istanbul ignore next */
          cov_1ktf0pjl7m().s[91]++;
          throw new Error(`Shape collection creation failed: ${error instanceof Error ?
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[27][0]++, error.message) :
          /* istanbul ignore next */
          (cov_1ktf0pjl7m().b[27][1]++, 'Unknown error')}`);
        }
      }
    });
    // Tool: Health Check
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[92]++;
    this.addTool({
      name: 'health_check',
      description: 'Check the health and status of the SVG MCP server',
      execute: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[6]++;
        const health =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[93]++, {
          status: 'healthy',
          timestamp: new Date().toISOString(),
          version: this.config.version,
          config: {
            maxSvgSize: this.config.maxSvgSize,
            debugEnabled: this.config.enableDebug
          },
          renderer: {
            status: 'operational',
            capabilities: this.svgRenderer.getCapabilities()
          },
          processor: {
            status: 'operational',
            statistics: this.documentProcessor.getProcessingStats()
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[94]++;
        logger.debug('Health check performed', health);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[95]++;
        return {
          content: [{
            type: 'text',
            text: JSON.stringify(health, null, 2)
          }]
        };
      }
    });
  }
  setupResources() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[7]++;
    cov_1ktf0pjl7m().s[96]++;
    // Resource: Server Information
    this.addResource({
      uri: 'server://info',
      name: 'Server Information',
      description: 'Information about the SVG MCP server',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[8]++;
        const info =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[97]++, {
          name: this.config.name,
          version: this.config.version,
          description: this.config.description,
          capabilities: {
            svgGeneration: true,
            documentProcessing: true,
            validation: true,
            optimization: true,
            accessibility: true,
            rfc7996Compliance: true,
            metadataGeneration: true,
            transforms: ['scale', 'translate', 'normalize', 'accessibility']
          },
          limits: {
            maxSvgSize: this.config.maxSvgSize
          },
          supportedElements: this.svgRenderer.getSupportedElements(),
          processor: {
            statistics: this.documentProcessor.getProcessingStats(),
            features: ['document_validation', 'element_relationship_analysis', 'compliance_checking', 'optimization', 'metadata_generation', 'accessibility_enhancement']
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[98]++;
        logger.debug('Server info requested', info);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[99]++;
        return {
          text: JSON.stringify(info, null, 2),
          mimeType: 'application/json',
          uri: 'server://info'
        };
      }
    });
    // Resource: SVG Schema
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[100]++;
    this.addResource({
      uri: 'schema://svg-document',
      name: 'SVG Document Schema',
      description: 'JSON schema for SVG document structure',
      mimeType: 'application/json',
      load: async () => {
        /* istanbul ignore next */
        cov_1ktf0pjl7m().f[9]++;
        const schema =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[101]++, {
          $schema: 'http://json-schema.org/draft-07/schema#',
          title: 'SVG Document',
          description: 'Schema for SVG document specification',
          type: 'object',
          required: ['viewBox', 'elements'],
          properties: {
            viewBox: {
              type: 'object',
              required: ['x', 'y', 'width', 'height'],
              properties: {
                x: {
                  type: 'number'
                },
                y: {
                  type: 'number'
                },
                width: {
                  type: 'number',
                  minimum: 0
                },
                height: {
                  type: 'number',
                  minimum: 0
                }
              }
            },
            elements: {
              type: 'array',
              items: {
                $ref: '#/definitions/SvgElement'
              }
            }
            // Additional properties would be defined here
          },
          definitions: {
            SvgElement: {
              oneOf: [{
                $ref: '#/definitions/CircleElement'
              }, {
                $ref: '#/definitions/RectElement'
              }, {
                $ref: '#/definitions/LineElement'
              }, {
                $ref: '#/definitions/PathElement'
              }, {
                $ref: '#/definitions/TextElement'
              }, {
                $ref: '#/definitions/GroupElement'
              }]
            }
            // Element definitions would be expanded here
          }
        });
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[102]++;
        return {
          text: JSON.stringify(schema, null, 2),
          mimeType: 'application/json',
          uri: 'schema://svg-document'
        };
      }
    });
  }
  /**
   * Calculate bounding box for a shape element
   */
  calculateShapeBoundingBox(shape) {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[10]++;
    cov_1ktf0pjl7m().s[103]++;
    switch (shape.type) {
      case 'circle':
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[28][0]++;
        cov_1ktf0pjl7m().s[104]++;
        return {
          x: shape.cx - shape.r,
          y: shape.cy - shape.r,
          width: shape.r * 2,
          height: shape.r * 2
        };
      case 'rect':
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[28][1]++;
        cov_1ktf0pjl7m().s[105]++;
        return {
          x: shape.x,
          y: shape.y,
          width: shape.width,
          height: shape.height
        };
      case 'line':
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[28][2]++;
        cov_1ktf0pjl7m().s[106]++;
        return {
          x: Math.min(shape.x1, shape.x2),
          y: Math.min(shape.y1, shape.y2),
          width: Math.abs(shape.x2 - shape.x1),
          height: Math.abs(shape.y2 - shape.y1)
        };
      case 'text':
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[28][3]++;
        // Estimate text bounding box
        const fontSize =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[107]++,
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().b[29][0]++, shape['font-size']) ||
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().b[29][1]++, 16));
        const textLength =
        /* istanbul ignore next */
        (cov_1ktf0pjl7m().s[108]++, shape.content.length);
        /* istanbul ignore next */
        cov_1ktf0pjl7m().s[109]++;
        return {
          x: shape.x,
          y: shape.y - fontSize,
          width: textLength * fontSize * 0.6,
          // Rough estimate
          height: fontSize
        };
      default:
        /* istanbul ignore next */
        cov_1ktf0pjl7m().b[28][4]++;
        cov_1ktf0pjl7m().s[110]++;
        // Default bounding box for unknown shapes
        return {
          x: 0,
          y: 0,
          width: 100,
          height: 100
        };
    }
  }
  async start() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[11]++;
    cov_1ktf0pjl7m().s[111]++;
    logger.info('Starting SVG MCP Server', {
      name: this.config.name,
      version: this.config.version
    });
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[112]++;
    await super.start();
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[113]++;
    logger.info('SVG MCP Server started successfully');
  }
  async stop() {
    /* istanbul ignore next */
    cov_1ktf0pjl7m().f[12]++;
    cov_1ktf0pjl7m().s[114]++;
    logger.info('Stopping SVG MCP Server');
    // Cleanup logic would go here
    /* istanbul ignore next */
    cov_1ktf0pjl7m().s[115]++;
    logger.info('SVG MCP Server stopped');
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,