{"version":3,"names":["cov_2fi51es89t","actualCoverage","SvgValidationError","SvgRenderer","logger","ValidationFactory","SvgDocumentProcessor","renderer","constructor","f","s","processDocument","spec","startTime","Date","now","errors","warnings","document","viewBox","elements","b","width","undefined","height","title","description","validate","validationPreset","validation","validateDocument","push","valid","svg","render","metadata","generateMetadata","complexity","length","features","Set","map","el","type","accessibility","hasTitle","hasDescription","compliance","processingTime","error","preset","validationResult","documentResult","e","message","w","elementResults","elementResult","values","overall","documentValidation","elementValidation","stats","documentStats","documentSize","Array","from","elementTypes","keys","compliant","warn","getProcessingStats","totalDocuments","totalProcessingTime","averageProcessingTime"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\core\\SvgDocumentProcessor.ts"],"sourcesContent":["/**\n * SVG Document Processor\n */\n\nimport { SvgDocument, SvgAnyElement, ViewBox, SvgValidationError } from '../types/svg.js';\nimport { SvgRenderer } from './SvgRenderer.js';\nimport { logger } from '../utils/logger.js';\nimport { \n  ValidationFactory, \n  ValidationSuiteResult, \n  ValidationPreset\n} from './validation/ValidationFactory.js';\n\nexport interface SvgDocumentSpec {\n  viewBox: ViewBox;\n  elements: SvgAnyElement[];\n  width?: number;\n  height?: number;\n  title?: string;\n  description?: string;\n  optimize?: boolean;\n  validate?: boolean | ValidationPreset;\n  generateMetadata?: boolean;\n}\n\nexport interface ProcessingResult {\n  document: SvgDocument;\n  svg: string;\n  warnings: string[];\n  errors: string[];\n  metadata: DocumentMetadata;\n  processingTime: number;\n}\n\nexport interface DocumentMetadata {\n  complexity: 'low' | 'medium' | 'high' | 'extreme';\n  features: string[];\n  accessibility: {\n    hasTitle: boolean;\n    hasDescription: boolean;\n  };\n  compliance?: string;\n}\n\nexport class SvgDocumentProcessor {\n  private readonly renderer: SvgRenderer;\n\n  constructor() {\n    this.renderer = new SvgRenderer();\n  }\n\n  async processDocument(spec: SvgDocumentSpec): Promise<ProcessingResult> {\n    const startTime = Date.now();\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    try {\n      const document: SvgDocument = {\n        viewBox: spec.viewBox,\n        elements: spec.elements,\n        ...(spec.width !== undefined && { width: spec.width }),\n        ...(spec.height !== undefined && { height: spec.height }),\n        ...(spec.title && { title: spec.title }),\n        ...(spec.description && { description: spec.description })\n      };\n\n      if (spec.validate !== false) {\n        const validationPreset = typeof spec.validate === 'string' ? spec.validate : 'standard';\n        const validation = await this.validateDocument(document, validationPreset);\n        errors.push(...validation.errors);\n        warnings.push(...validation.warnings);\n        \n        if (!validation.valid) {\n          throw new SvgValidationError('Document validation failed', { errors, warnings });\n        }\n      }\n\n      const svg = await this.renderer.render(document);\n      \n      // Enhanced metadata generation using validation results\n      let metadata: DocumentMetadata;\n      if (spec.generateMetadata !== false) {\n        metadata = await this.generateMetadata(document);\n      } else {\n        metadata = {\n          complexity: document.elements.length < 10 ? 'low' : document.elements.length < 100 ? 'medium' : 'high',\n          features: [...new Set(document.elements.map(el => el.type))],\n          accessibility: {\n            hasTitle: !!document.title,\n            hasDescription: !!document.description\n          },\n          compliance: 'svg20'\n        };\n      }\n\n      const processingTime = Date.now() - startTime;\n\n      return { document, svg, warnings, errors, metadata, processingTime };\n\n    } catch (error) {\n      logger.error('Document processing failed', { error, spec });\n      throw error;\n    }\n  }\n\n  async validateDocument(document: SvgDocument, preset: ValidationPreset = 'standard'): Promise<{\n    valid: boolean;\n    errors: string[];\n    warnings: string[];\n    validationResult?: ValidationSuiteResult;\n  }> {\n    try {\n      const validationResult = await ValidationFactory.validateDocument(document, { preset });\n      \n      const errors = validationResult.documentResult?.errors.map(e => e.message) || [];\n      const warnings = validationResult.documentResult?.warnings.map(w => w.message) || [];\n\n      // Add element-level errors and warnings\n      if (validationResult.elementResults) {\n        for (const elementResult of validationResult.elementResults.values()) {\n          errors.push(...elementResult.errors.map(e => e.message));\n          warnings.push(...elementResult.warnings.map(w => w.message));\n        }\n      }\n\n      return {\n        valid: validationResult.overall.valid,\n        errors,\n        warnings,\n        validationResult\n      };\n    } catch (error) {\n      logger.error('Validation failed', { error, document });\n      return {\n        valid: false,\n        errors: ['Validation system error: ' + (error as Error).message],\n        warnings: []\n      };\n    }\n  }\n\n  async generateMetadata(document: SvgDocument): Promise<DocumentMetadata> {\n    try {\n      // Use performance validation to get detailed stats\n      const validationResult = await ValidationFactory.validateDocument(document, { \n        preset: 'performance',\n        documentValidation: true,\n        elementValidation: false\n      });\n\n      const stats = validationResult.documentResult?.documentStats;\n      const accessibility = validationResult.documentResult?.accessibility;\n\n      return {\n        complexity: stats?.documentSize.complexity || 'low',\n        features: Array.from(stats?.elementTypes.keys() || []),\n        accessibility: {\n          hasTitle: accessibility?.hasTitle || !!document.title,\n          hasDescription: accessibility?.hasDescription || !!document.description\n        },\n        compliance: validationResult.documentResult?.compliance.compliant ? 'svg20' : 'non-compliant'\n      };\n    } catch (error) {\n      logger.warn('Failed to generate enhanced metadata, using basic metadata', { error });\n      \n      // Fallback to basic metadata\n      return {\n        complexity: document.elements.length < 10 ? 'low' : document.elements.length < 100 ? 'medium' : 'high',\n        features: [...new Set(document.elements.map(el => el.type))],\n        accessibility: {\n          hasTitle: !!document.title,\n          hasDescription: !!document.description\n        },\n        compliance: 'svg20'\n      };\n    }\n  }\n\n  getProcessingStats(): {\n    totalDocuments: number;\n    totalProcessingTime: number;\n    averageProcessingTime: number;\n  } {\n    // Simple stats for now\n    return {\n      totalDocuments: 0,\n      totalProcessingTime: 0,\n      averageProcessingTime: 0\n    };\n  }\n}\n"],"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","ignoreList":[]}