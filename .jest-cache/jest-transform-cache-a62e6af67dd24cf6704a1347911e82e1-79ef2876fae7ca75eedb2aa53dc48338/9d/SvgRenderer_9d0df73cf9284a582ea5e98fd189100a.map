{"version":3,"names":["cov_1gg39an67z","actualCoverage","SvgRenderError","logger","SvgRenderer","supportedElements","s","getSupportedElements","f","getCapabilities","basicShapes","paths","text","groups","styling","transforms","optimization","render","document","options","b","optimize","indent","minify","debug","svg","renderDocument","optimizeSvg","size","length","optimized","error","Error","message","elements","newline","indentStr","viewBox","width","height","viewBoxAttr","x","y","widthAttr","heightAttr","title","escapeXml","description","defs","forEach","def","content","style","element","renderElement","baseIndent","type","renderCircle","renderRect","renderLine","renderPath","renderText","renderGroup","cx","cy","r","attrs","buildCommonAttributes","rx","ry","undefined","x1","y1","x2","y2","d","escapedContent","children","result","child","id","escapeAttribute","className","transform","clipPath","mask","styleStr","buildStyleString","parts","Object","entries","key","value","kebabKey","replace","toLowerCase","push","join","originalSize","optimizedSize","reduction"],"sources":["C:\\GitHub\\Svg-Mcp-Server\\src\\core\\SvgRenderer.ts"],"sourcesContent":["/**\r\n * Core SVG Rendering Engine\r\n * \r\n * This class handles the actual SVG generation and rendering logic.\r\n */\r\n\r\nimport { SvgDocument, SvgAnyElement, SvgStyle, TextStyle, SvgRenderError } from '../types/svg.js';\r\nimport { logger } from '../utils/logger.js';\r\n\r\nexport interface RenderOptions {\r\n  optimize?: boolean;\r\n  validate?: boolean;\r\n  indent?: boolean;\r\n  minify?: boolean;\r\n}\r\n\r\nexport class SvgRenderer {\r\n  private readonly supportedElements = [\r\n    'circle',\r\n    'rect', \r\n    'line',\r\n    'path',\r\n    'text',\r\n    'group'\r\n  ];\r\n\r\n  getSupportedElements(): string[] {\r\n    return [...this.supportedElements];\r\n  }\r\n\r\n  getCapabilities(): Record<string, boolean> {\r\n    return {\r\n      basicShapes: true,\r\n      paths: true,\r\n      text: true,\r\n      groups: true,\r\n      styling: true,\r\n      transforms: true,\r\n      optimization: true,\r\n    };\r\n  }\r\n\r\n  async render(document: SvgDocument, options: RenderOptions = {}): Promise<string> {\r\n    const {\r\n      optimize = true,\r\n      indent = false,\r\n      minify = false\r\n    } = options;\r\n\r\n    try {\r\n      logger.debug('Starting SVG rendering', { document, options });\r\n\r\n      // Build SVG content\r\n      let svg = this.renderDocument(document, { indent, minify });\r\n\r\n      // Apply optimizations if requested\r\n      if (optimize) {\r\n        svg = this.optimizeSvg(svg);\r\n      }\r\n\r\n      logger.debug('SVG rendering completed', { \r\n        size: svg.length,\r\n        optimized: optimize \r\n      });\r\n\r\n      return svg;\r\n    } catch (error) {\r\n      logger.error('SVG rendering failed', error);\r\n      throw new SvgRenderError(\r\n        `Failed to render SVG: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        document.elements[0]\r\n      );\r\n    }\r\n  }\r\n\r\n  private renderDocument(document: SvgDocument, options: { indent: boolean; minify: boolean }): string {\r\n    const { indent, minify } = options;\r\n    const newline = minify ? '' : '\\n';\r\n    const indentStr = indent && !minify ? '  ' : '';\r\n\r\n    // Build SVG opening tag\r\n    const { viewBox, width, height } = document;\r\n    const viewBoxAttr = `viewBox=\"${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}\"`;\r\n    const widthAttr = width ? ` width=\"${width}\"` : '';\r\n    const heightAttr = height ? ` height=\"${height}\"` : '';\r\n\r\n    let svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" ${viewBoxAttr}${widthAttr}${heightAttr}>`;\r\n    \r\n    // Add title if provided\r\n    if (document.title) {\r\n      svg += `${newline}${indentStr}<title>${this.escapeXml(document.title)}</title>`;\r\n    }\r\n\r\n    // Add description if provided\r\n    if (document.description) {\r\n      svg += `${newline}${indentStr}<desc>${this.escapeXml(document.description)}</desc>`;\r\n    }\r\n\r\n    // Add definitions if provided\r\n    if (document.defs && document.defs.length > 0) {\r\n      svg += `${newline}${indentStr}<defs>`;\r\n      document.defs.forEach(def => {\r\n        svg += `${newline}${indentStr}${indentStr}${def.content}`;\r\n      });\r\n      svg += `${newline}${indentStr}</defs>`;\r\n    }\r\n\r\n    // Add global styles if provided\r\n    if (document.style) {\r\n      svg += `${newline}${indentStr}<style>${document.style}</style>`;\r\n    }\r\n\r\n    // Render elements\r\n    document.elements.forEach(element => {\r\n      svg += newline + this.renderElement(element, indentStr, { indent, minify });\r\n    });\r\n\r\n    svg += `${newline}</svg>`;\r\n\r\n    return svg;\r\n  }\r\n\r\n  private renderElement(element: SvgAnyElement, baseIndent: string, options: { indent: boolean; minify: boolean }): string {\r\n    const { indent, minify } = options;\r\n    const indentStr = indent && !minify ? baseIndent + '  ' : baseIndent;\r\n\r\n    try {\r\n      switch (element.type) {\r\n        case 'circle':\r\n          return this.renderCircle(element, indentStr);\r\n        case 'rect':\r\n          return this.renderRect(element, indentStr);\r\n        case 'line':\r\n          return this.renderLine(element, indentStr);\r\n        case 'path':\r\n          return this.renderPath(element, indentStr);\r\n        case 'text':\r\n          return this.renderText(element, indentStr);\r\n        case 'group':\r\n          return this.renderGroup(element, indentStr, options);\r\n        default:\r\n          throw new SvgRenderError(`Unsupported element type: ${(element as any).type}`, element);\r\n      }\r\n    } catch (error) {\r\n      logger.error(`Failed to render element`, { element, error });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private renderCircle(element: SvgAnyElement & { type: 'circle' }, indent: string): string {\r\n    const { cx, cy, r } = element as any;\r\n    const attrs = this.buildCommonAttributes(element);\r\n    return `${indent}<circle cx=\"${cx}\" cy=\"${cy}\" r=\"${r}\"${attrs} />`;\r\n  }\r\n\r\n  private renderRect(element: SvgAnyElement & { type: 'rect' }, indent: string): string {\r\n    const { x, y, width, height, rx, ry } = element as any;\r\n    let attrs = this.buildCommonAttributes(element);\r\n    \r\n    if (rx !== undefined) attrs += ` rx=\"${rx}\"`;\r\n    if (ry !== undefined) attrs += ` ry=\"${ry}\"`;\r\n\r\n    return `${indent}<rect x=\"${x}\" y=\"${y}\" width=\"${width}\" height=\"${height}\"${attrs} />`;\r\n  }\r\n\r\n  private renderLine(element: SvgAnyElement & { type: 'line' }, indent: string): string {\r\n    const { x1, y1, x2, y2 } = element as any;\r\n    const attrs = this.buildCommonAttributes(element);\r\n    return `${indent}<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\"${attrs} />`;\r\n  }\r\n\r\n  private renderPath(element: SvgAnyElement & { type: 'path' }, indent: string): string {\r\n    const { d } = element as any;\r\n    const attrs = this.buildCommonAttributes(element);\r\n    return `${indent}<path d=\"${d}\"${attrs} />`;\r\n  }\r\n\r\n  private renderText(element: SvgAnyElement & { type: 'text' }, indent: string): string {\r\n    const { x, y, content } = element as any;\r\n    const attrs = this.buildCommonAttributes(element);\r\n    const escapedContent = this.escapeXml(content);\r\n    return `${indent}<text x=\"${x}\" y=\"${y}\"${attrs}>${escapedContent}</text>`;\r\n  }\r\n\r\n  private renderGroup(element: SvgAnyElement & { type: 'group' }, indent: string, options: { indent: boolean; minify: boolean }): string {\r\n    const { children } = element as any;\r\n    const { minify } = options;\r\n    const newline = minify ? '' : '\\n';\r\n    const attrs = this.buildCommonAttributes(element);\r\n    \r\n    let result = `${indent}<g${attrs}>`;\r\n    \r\n    children.forEach((child: SvgAnyElement) => {\r\n      result += newline + this.renderElement(child, indent, options);\r\n    });\r\n    \r\n    result += `${newline}${indent}</g>`;\r\n    return result;\r\n  }\r\n\r\n  private buildCommonAttributes(element: SvgAnyElement): string {\r\n    let attrs = '';\r\n    \r\n    if (element.id) {\r\n      attrs += ` id=\"${this.escapeAttribute(element.id)}\"`;\r\n    }\r\n    \r\n    if (element.className) {\r\n      attrs += ` class=\"${this.escapeAttribute(element.className)}\"`;\r\n    }\r\n    \r\n    if (element.transform) {\r\n      attrs += ` transform=\"${this.escapeAttribute(element.transform)}\"`;\r\n    }\r\n    \r\n    if (element.clipPath) {\r\n      attrs += ` clip-path=\"${this.escapeAttribute(element.clipPath)}\"`;\r\n    }\r\n    \r\n    if (element.mask) {\r\n      attrs += ` mask=\"${this.escapeAttribute(element.mask)}\"`;\r\n    }\r\n    \r\n    // Handle styles\r\n    if (element.style) {\r\n      const styleStr = this.buildStyleString(element.style);\r\n      if (styleStr) {\r\n        attrs += ` style=\"${styleStr}\"`;\r\n      }\r\n    }\r\n    \r\n    return attrs;\r\n  }\r\n\r\n  private buildStyleString(style: SvgStyle | TextStyle): string {\r\n    const parts: string[] = [];\r\n    \r\n    Object.entries(style).forEach(([key, value]) => {\r\n      if (value !== undefined && value !== null) {\r\n        // Convert camelCase to kebab-case\r\n        const kebabKey = key.replace(/([A-Z])/g, '-$1').toLowerCase();\r\n        parts.push(`${kebabKey}:${value}`);\r\n      }\r\n    });\r\n    \r\n    return parts.join(';');\r\n  }\r\n\r\n  private optimizeSvg(svg: string): string {\r\n    // Basic optimizations\r\n    let optimized = svg;\r\n    \r\n    // Remove extra whitespace (but preserve content whitespace)\r\n    optimized = optimized.replace(/>\\s+</g, '><');\r\n    \r\n    // Remove empty style attributes\r\n    optimized = optimized.replace(/\\s+style=\"\"/g, '');\r\n    \r\n    // Remove unnecessary spaces in attributes\r\n    optimized = optimized.replace(/\\s+([a-z-]+)=\"/g, ' $1=\"');\r\n    \r\n    logger.debug('SVG optimization completed', {\r\n      originalSize: svg.length,\r\n      optimizedSize: optimized.length,\r\n      reduction: svg.length - optimized.length\r\n    });\r\n    \r\n    return optimized;\r\n  }\r\n\r\n  private escapeXml(text: string): string {\r\n    return text\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/</g, '&lt;')\r\n      .replace(/>/g, '&gt;')\r\n      .replace(/\"/g, '&quot;')\r\n      .replace(/'/g, '&#39;');\r\n  }\r\n\r\n  private escapeAttribute(value: string): string {\r\n    return value\r\n      .replace(/&/g, '&amp;')\r\n      .replace(/\"/g, '&quot;');\r\n  }\r\n}\r\n"],"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","ignoreList":[]}